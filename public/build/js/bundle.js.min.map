{"version":3,"sources":["Infohotel.js","auth.js","alertas.js","niveles.js","registro.js","usuarios.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","mostrarAlerta","titulo","mensaje","tipo","Swal","fire","icon","title","text","then","$","modal","reload","addEventListener","async","e","preventDefault","hotel","id","dataset","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","error","console","log","mostrarAlerta2","mensajeResultado","style","display","textContent","className","setTimeout","btniniciarSesion","event","usuario","email","password","autorizado","href","dataTable","dataTableInit","estatusDictionary","0","1","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","initDataTable","niveles","listarNiveles","length","llenarTabla","DataTable","response","tbody","innerHTML","nivel","index","estatus","row","numero","target","closest","nivelId","getAttribute","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirmed","ok","Error","statusText","querySelector","nivelActualizado","nivelOriginal","cambios","cambiosCount","keys","metodo","headers","Content-Type","JSON","stringify","nivelNuevo","btnCrear","nuevoUsuario","apellidos","password2","direccion","rolesDictionary","2","3","visible","usuarios","listarUsers","user","rol","rol_id","apellido","usuarioId","userId","src","usuarioActualizado","usuarioNuevo","test"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                id: btnActualizarInfo.dataset.id, \n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = '/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                                \n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide');\n            location.reload(); // Recarga la página automáticamente\n        });\n    }        \n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n}","// src/js/alertas.js\n(function() {\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); \n        });\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block';\n        mensajeResultado.textContent = mensaje;\n\n        mensajeResultado.className = `alert alert-${tipo === 'error' ? 'danger' : tipo === 'success' ? 'success' : 'info'}`;\n\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n\n    // Hacerlas accesibles globalmente\n    window.mostrarAlerta = mostrarAlerta;\n    window.mostrarAlerta2 = mostrarAlerta2;\n})();\n","if(window.location.pathname === '/admin/configuracion/niveles'){\n    //alert('cargado con exito el scrip de niveles');\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const niveles = await listarNiveles(); // Esperamos los datos antes de inicializar DataTable\n\n        if (niveles.length > 0) {\n            llenarTabla(niveles);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_niveles').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarNiveles() {\n        try {\n            const response = await fetch('/api/niveles');\n            const niveles = await response.json();\n            return niveles;\n        } catch (error) {\n            console.error('Error al obtener niveles:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(niveles) {\n        const tbody = document.getElementById('tableBody_niveles');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        niveles.forEach((nivel, index) => {\n            const estatus = estatusDictionary[nivel.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${nivel.nombre}</td>\n                    <td>${nivel.numero}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarNivel\" \n                            data-id=\"${nivel.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarNivel\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarNivel\" data-id=\"${nivel.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de usuarios\n    document.getElementById('tableBody_niveles').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarNivel')) {\n            const nivelId = event.target.closest('.btn-eliminarNivel').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/niveles/${nivelId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n    \n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarNivel')) {\n            const boton = event.target.closest('.btnEditarNivel');\n            const nivelId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/niveles/${nivelId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener nivel: ${respuesta.statusText}`);\n                }\n    \n                const nivel = await respuesta.json();\n                // Llenar los campos del modal con los datos del nivel\n                document.getElementById('nombreEditar').value = nivel.nombre;\n                document.getElementById('numeroEditar').value = nivel.numero;\n                document.getElementById('estatusEditar').value = nivel.estatus;\n                \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarNivel').dataset.id = nivelId;\n                //window.nivelOriginal = { ...nivel }; // Guardar copia de los datos iniciales\n                // Abrir el modal manualmente si es necesario\n                //$('#modalEditarNivel').modal('show');\n    \n            } catch (error) {\n                console.error('Error al obtener los datos del usuario:', error);\n            }\n        }\n    });\n\n    // ---------------    ACTUALIZAR NIVEL (PENDIENTE)     - ----------------\n    // ---------------    ACTUALIZAR NIVEL -----------------\n    document.getElementById('formEditarNivel').addEventListener('submit', async function(e) {\n        e.preventDefault();\n    \n        const nivelId = document.querySelector('.btnActualizarNivel').dataset.id;\n    \n        const nivelActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            numero: document.getElementById('numeroEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n        };\n    \n        try {\n            const respuesta = await fetch(`/api/niveles/${nivelId}`);\n            const nivelOriginal = await respuesta.json();\n    \n            let cambios = {};\n    \n            if (nivelActualizado.nombre !== nivelOriginal.nombre) cambios.nombre = nivelActualizado.nombre;\n            if (nivelActualizado.numero !== nivelOriginal.numero) cambios.numero = nivelActualizado.numero;\n            if (nivelActualizado.estatus !== nivelOriginal.estatus) cambios.estatus = nivelActualizado.estatus;\n    \n            const cambiosCount = Object.keys(cambios).length;\n    \n            if (cambiosCount === 0) {\n                mostrarAlerta2('No hay cambios por enviar', 'error');\n                return;\n            }\n    \n            const metodo = cambiosCount === 3 ? \"PUT\" : \"PATCH\";\n    \n            //console.log({ metodo, datos: cambios });\n            //console.log(cambios);\n\n            try {\n                const respuesta = await fetch(`/api/niveles/${nivelId}`, {\n                    method: metodo,\n                    headers: {\n                        'Content-Type': 'application/json', // Aseguramos que el contenido sea JSON\n                    },\n                    body: JSON.stringify(cambios) // Convertimos el objeto `cambios` a JSON\n                });\n            \n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                initDataTable();\n            \n            } catch (error) {\n                console.error('Error al actualizar usuario:', error);\n            }                        \n    \n        } catch (error) {\n            console.log(\"Error obteniendo nivel:\", error);\n        }\n    });    \n    \n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirNivel = document.querySelector('.btnSubirNivel');\n    botonSubirNivel.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const nivelNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            numero: document.getElementById('numero').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        };\n\n        if (nivelNuevo.nombre === \"\" || nivelNuevo.numero === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(nivelNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/niveles', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('numero').value = '';\n            document.getElementById('estatus').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}\n\n// try {\n//     const datos = new FormData();\n//     Object.entries(usuarioActualizado).forEach(([key, value]) => datos.append(key, value));\n//     const respuesta = await fetch(`/api/usuarios/${userId}`, {\n//         method: 'POST',\n//         body: datos\n//     });\n\n//     const resultado = await respuesta.json();\n//     mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n//     initDataTable();\n\n// } catch (error) {\n//     console.error('Error al actualizar usuario:', error);\n// }","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    // function mostrarAlerta(titulo, mensaje, tipo) {\n    //     Swal.fire({\n    //         icon: tipo,\n    //         title: titulo,\n    //         text: mensaje,\n    //     }).then(() => {\n    //         $('.modal').modal('hide'); // Cierra todos los modales activos\n    //     });\n    // }    \n\n    // function mostrarAlerta2(mensaje, tipo) {\n    //     const mensajeResultado = document.getElementById('mensaje-resultado');\n    //     mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n    //     mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n    //     // Cambiar el color de fondo del contenedor según el tipo de mensaje\n    //     if (tipo === 'error') {\n    //         mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n    //     } else if (tipo === 'success') {\n    //         mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n    //     } else {\n    //         mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n    //     }\n    \n    //     // Opcional: Ocultar el mensaje después de 5 segundos\n    //     setTimeout(() => {\n    //         mensajeResultado.style.display = 'none';\n    //     }, 5000);\n    // }\n    \n}\n","if (window.location.pathname === '/admin/usuarios') {\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td><img src=\"/build/img/${user.img}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>${user.telefono}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña en opciones de la tabla -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarUsuario\" \n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuarioEditarModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de usuarios\n    document.getElementById('tableBody_users').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarUsuario')) {\n            const usuarioId = event.target.closest('.btn-eliminarUsuario').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/usuarios/${usuarioId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarUsuario')) {\n            const boton = event.target.closest('.btnEditarUsuario');\n            const userId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/usuarios/${userId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const usuario = await respuesta.json();\n                // Llenar los campos del modal con los datos del usuario\n                document.getElementById('nombreEditar').value = usuario.nombre;\n                document.getElementById('apellidoEditar').value = usuario.apellido;\n                document.getElementById('direccionEditar').value = usuario.direccion;\n                document.getElementById('emailEditar').value = usuario.email;\n                document.getElementById('telefonoEditar').value = usuario.telefono;\n                document.getElementById('rol_idEditar').value = usuario.rol_id;\n                document.getElementById('estatusEditar').value = usuario.estatus;\n    \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditar');\n                imgElement.src = usuario.img ? `/build/img/${usuario.img}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarUsuario').dataset.id = userId;\n    \n                // Abrir el modal manualmente si es necesario\n                $('#usuarioEditarModal').modal('show');\n    \n            } catch (error) {\n                console.error('Error al obtener los datos del usuario:', error);\n            }\n        }\n    });\n    \n    // ---------------    ACTUALIZAR USUARIO     - ----------------\n    document.getElementById('formEditarUsuario').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const userId = document.querySelector('.btnActualizarUsuario').dataset.id;\n    \n        const usuarioActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            apellido: document.getElementById('apellidoEditar').value.trim(),\n            direccion: document.getElementById('direccionEditar').value.trim(),\n            email: document.getElementById('emailEditar').value.trim(),\n            telefono: document.getElementById('telefonoEditar').value.trim(),\n            password: document.getElementById('passwordEditar').value.trim(),\n            password2: document.getElementById('password2Editar').value.trim(),\n            rol_id: document.getElementById('rol_idEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n            img: document.getElementById('logoEditar').files[0]\n        };\n    \n        if (usuarioActualizado.password !== usuarioActualizado.password2) {\n            mostrarAlerta('Error', 'Las contraseñas no coinciden.', 'error');\n            return;\n        }\n    \n        delete usuarioActualizado.password2; // No enviar password2 al backend\n    \n        try {\n            const datos = new FormData();\n            Object.entries(usuarioActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/usuarios/${userId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar usuario:', error);\n        }\n    });\n\n    //  --------------    CREAR NUEVO USUARIO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const usuarioNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellido: document.getElementById('apellido').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            email: document.getElementById('email').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            password: document.getElementById('password').value.trim(),\n            password2: document.getElementById('password2').value.trim(),\n            rol_id: document.getElementById('rol_id').value.trim(),\n            estatus: document.getElementById('estatus').value.trim(),\n            img: document.getElementById('logo').files[0]\n        };\n\n        if (usuarioNuevo.email === \"\" || usuarioNuevo.nombre === \"\" || usuarioNuevo.direccion === \"\" || usuarioNuevo.password === \"\" || usuarioNuevo.password2 === \"\" || usuarioNuevo.telefono === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (usuarioNuevo.password !== usuarioNuevo.password2) {\n            mostrarAlerta2(\"Las contraseñas no coinciden.\", \"error\");\n            return;\n        }\n\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(usuarioNuevo.email)) {\n            mostrarAlerta2(\"El correo electrónico no tiene un formato válido.\", \"error\");\n            return;\n        }\n\n        delete usuarioNuevo.password2;\n\n        try {\n            const datos = new FormData();\n            Object.entries(usuarioNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/usuarios', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n    \n}"]}