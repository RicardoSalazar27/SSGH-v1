{"version":3,"sources":["Infohotel.js","auth.js","registro.js","usuarios.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","addEventListener","async","e","preventDefault","hotel","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","fetch","method","body","error","console","log","btniniciarSesion","mostrarAlerta2","mensaje","tipo","mensajeResultado","style","display","textContent","className","setTimeout","event","usuario","email","password","respuesta","resultado","json","autorizado","href","btnCrear","mostrarAlerta","titulo","Swal","fire","icon","title","text","then","$","modal","nuevoUsuario","apellidos","password2","direccion","dataTable","dataTableInit","rolesDictionary","1","2","3","estatusDictionary","0","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","visible","initDataTable","usuarios","listarUsers","length","llenarTabla","DataTable","response","tbody","innerHTML","user","index","rol","rol_id","estatus","row","apellido","id","target","closest","botonSubirUsuario","querySelector","classList","replace","cargarDatosUsuario","getAttribute","contains","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","result","isConfirmed","confirmarEliminacion","ok","llenarModal"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                \n                \n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n}","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); // Cierra todos los modales activos\n        });\n    }    \n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n    \n}\n","if (window.location.pathname === '/admin/usuarios') {\n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [5] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btn-editarUsuario\"\n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuariosModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n\n        tbody.addEventListener('click', function(e){\n            //Delegacion para actualizar el cliente\n            if( e.target.closest('.btn-editarUsuario') ){\n                // Cambiar la clase del botón para que sea de 'Actualizar' y no de 'Crear'\n                const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n                if ( botonSubirUsuario ){\n                    botonSubirUsuario.classList.replace('btnSubirUsuario','btnActualizarUsuario');\n                }\n\n                const usuarioId = e.target.closest('.btn-editarUsuario').getAttribute('data-id');\n                cargarDatosUsuario(usuarioId); //Llama a la funcion de cargar los datos\n            }\n            if (e.target.classList.contains('btn-eliminarUsuario')) {\n                const usuarioId = e.target.getAttribute('data-id');\n                confirmarEliminacion(usuarioId);\n            }            \n        })\n\n        async function confirmarEliminacion(id) {\n            Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            }).then(async (result) => {\n                if (result.isConfirmed) {\n                    try {\n                        const url = `http://localhost:3000/api/usuarios/${id}`; // 🔥 Aquí se inyecta el ID en la URL\n        \n                        const respuesta = await fetch(url, {\n                            method: 'DELETE',  // 🔥 Método DELETE para eliminar\n                        });\n        \n                        const resultado = await respuesta.json();\n                        mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n        \n                        if (resultado.tipo === 'success') {\n                            await initDataTable(); // Recarga la tabla de clientes\n                        }\n                    } catch (error) {\n                        console.error(error);\n                    }\n                }\n            });\n        }        \n    }\n\n    async function cargarDatosUsuario(id){\n        try {\n\n            const url = `http://localhost:3000/api/usuarios/${id}`;\n            const resultado = await fetch(url);\n\n            if( resultado.ok ) {\n                const usuario = await resultado.json();\n                llenarModal(usuario);\n            }\n\n            function llenarModal(usuario) {\n                document.getElementById('nombre').value = usuario.nombre;\n                document.getElementById('apellido').value = usuario.apellido;\n                document.getElementById('direccion').value = usuario.direccion;\n                document.getElementById('email').value = usuario.email;\n                document.getElementById('rol_id').value = usuario.rol_id;\n            }   \n            \n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); // Cierra todos los modales activos\n        });\n    }    \n}\n"]}