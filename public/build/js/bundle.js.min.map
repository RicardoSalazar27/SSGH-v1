{"version":3,"sources":["auth.js","registro.js","usuarios.js"],"names":["window","location","pathname","btniniciarSesion","document","getElementById","mostrarAlerta2","mensaje","tipo","mensajeResultado","style","display","textContent","className","setTimeout","addEventListener","async","event","preventDefault","usuario","email","value","trim","password","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","autorizado","href","error","console","log","btnCrear","mostrarAlerta","titulo","Swal","fire","icon","title","text","then","$","modal","nuevoUsuario","nombre","apellidos","password2","telefono","direccion","dataTable","dataTableInit","rolesDictionary","1","2","3","estatusDictionary","0","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","visible","initDataTable","usuarios","listarUsers","length","llenarTabla","DataTable","response","tbody","innerHTML","user","index","rol","rol_id","estatus","row","apellido","id","e","target","closest","botonSubirUsuario","querySelector","classList","replace","usuarioId","getAtribute","cargarDatosUsuario","contains","getAttribute","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","result","isConfirmed"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n}","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); // Cierra todos los modales activos\n        });\n    }    \n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n    \n}\n","if (window.location.pathname === '/admin/usuarios') {\n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [5] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btn-editarUsuario\"\n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-bs-target=\"#UsuarioModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n\n        tbody.addEventListener('click', function(e){\n            //Delegacion para actualizar el cliente\n            if( e.target.closest('.btn-editarUsuario') ){\n                // Cambiar la clase del botón para que sea de 'Actualizar' y no de 'Crear'\n                const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n                if ( botonSubirUsuario ){\n                    botonSubirUsuario.classList.replace('btnSubirUsuario','btnActualizarUusuario')\n                }\n\n                const usuarioId = e.target.closest('.btn-editarUsuario').getAtribute('data-id');\n                cargarDatosUsuario(usuarioId); //Llama a la funcion de cargar los datos\n            }\n            if( e.target.classList.contains('btn-eliminarUsuario') ){\n                const usuarioId = e.target.getAttribute('data-id');\n                confirmarEliminacion(usuarioId);\n            }\n        })\n\n        function confirmarEliminacion(id) {\n            Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            }).then(async (result) => {\n                if (result.isConfirmed) {\n                    try {\n                        const datos = new FormData();\n                        datos.append('id', id);\n\n                        const url = `http://localhost:3000/eliminar`;\n                        const respuesta = await fetch(url, {\n                            method: 'POST',\n                            body: datos\n                        });\n\n                        const resultado = await respuesta.json();\n                        mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                        if (resultado.tipo === 'success') {\n                            await initDataTable(); // Recarga la tabla de clientes\n                        }\n                    } catch (error) {\n                        console.error(error);\n                    }\n                }\n            });\n        }\n    }\n}\n"]}