{"version":3,"sources":["Infohotel.js","auth.js","alertas.js","catalogo_productos.js","categorias.js","clientes.js","habitaciones.js","dashboard.js","niveles.js","procesarventareserva.js","recepcion.js","recepcionhabitacion.js","registro.js","reservaciones.js","usuarios.js","reservacionesdahs.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","mostrarAlerta","titulo","mensaje","tipo","Swal","fire","icon","title","text","then","$","modal","reload","addEventListener","async","e","preventDefault","hotel","id","dataset","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","error","console","log","mostrarAlerta2","mensajeResultado","style","display","textContent","className","setTimeout","mostrarAlerta3","willClose","obtenerFechaFormateada","fecha","Date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","btniniciarSesion","event","usuario","email","password","autorizado","href","dataTable","dataTableInit","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","initDataTable","productos","listarProductos","length","llenarTabla","DataTable","response","tbody","innerHTML","producto","index","row","precio","stock","categoria_producto_id","codigo_barras","proveedor","foto","target","closest","productoId","ok","Error","statusText","src","querySelector","productoActualizado","inputFile","parentNode","replaceChild","cloneNode","getAttribute","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirmed","productoNuevo","estatusDictionary","0","1","categorias","listarCategorias","status","categoria","estatus","estado","capacidad_maxima","tipo_cama","precio_base","servicios_incluidos","categoriaId","categoriaOriginal","categoriaActualizada","cambios","keys","metodo","headers","Content-Type","JSON","stringify","errorData","respuestaUpdate","message","categoriaNueva","clientes","listarClientes","cliente","apellidos","direccion","documento_identidad","clienteOriginal","clientesId","clienteId","clienteActualizado","barChart","ctx","getContext","periodoSelect","cargarDatos","periodo","actualizarGrafica","data","meses","labels","map","item","mes","parseFloat","ganancias","Chart","type","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","beginAtZero","this","habitaciones","listarhabitaciones","habitacion","numero","id_nivel","id_categoria","detalles_personalizados","habitacionId","habitacionOriginal","habitacionActualizada","habitacionNueva","niveles","listarNiveles","nivel","nivelId","nivelOriginal","nivelActualizado","nivelNuevo","idReserva","URLSearchParams","search","get","inputBuscador","listaSugerencias","tablaVenta","cuandoPagar","grupoMetodoPago","grupoEfectivo","metodoPago","cantidadEfectivo","feriaCalculada","inputTotalPagar","btnTerminarVenta","serviciosVendidos","productosDisponibles","total","renderSugerencias","Array","isArray","li","createElement","classList","add","agregarProducto","limpiarLista","appendChild","remove","precioUnitario","productoExistente","find","p","cantidad","push","id_producto","actualizarTabla","servicio","fila","toFixed","agregarEventosEliminar","agregarEventosContador","calcularTotal","querySelectorAll","boton","eliminarProducto","codigoBarras","filter","btnSumar","btnRestar","btn","query","contains","totalRaw","feria","Math","abs","ventas","reservacion_id","producto_id","monto","fecha_pago","tipo_pago","descripcion","actualizarEstadoHabitacion","nuevoEstado","id_estado_habitacion","catch","result","undefined","inputCorreoCliente","inputNombreCliente","inputApellidosCliente","inputDocumentoCliente","inputTelefonoCliente","inputDireccionCliente","btnCrearCliente","inputNombreClienteNuevo","inputApellidosClienteNuevo","inputCorreoClienteNuevo","inputTelefonoClienteNuevo","inputDocumentoClienteNuevo","inputDireccionClienteNuevo","clienteNuevo","inputFechaEntrada","inputFechaSalida","inputTipoDescuento","inputDescuento","inputCobroExtra","inputAdelanto","precioHabitacion","inputMetodoPago","inputObservaciones","noches","totalOriginal","totalPendiente","descuento","tipoDescuento","cobroExtra","adelanto","buscarClientes","encodeURIComponent","mostrarSugerencias","seleccionarCliente","calcularNoches","fechaEntrada","fechaSalida","isNaN","calcularTotalPagar","tipoDescuentoSeleccionado","totalConDescuento","actualizarCalculo","input","radio","observaciones","idHabitacion","reserva","fechas","entrada","salida","pago","totalPagar","totalPagarOriginal","metodo_pago","formData","btnCrear","nuevoUsuario","password2","inputCorreo","selectHabitacion","btnSiguiente","btnAtras","btnConfirmar","totalPagarInput","descuentoInput","cobroExtraInput","adelantoInput","timeoutBusqueda","pasoActual","habitacionesDisponibles","habitacionesSeleccionadas","choices","Choices","removeItemButton","placeholder","placeholderValue","searchEnabled","guardarClienteNuevo","progressBar","actualizarBarraProgreso","porcentaje","width","setAttribute","cambiarPaso","nuevoPaso","toggle","cargarHabitaciones","clearChoices","setChoices","disabled","fechaEntradaDate","diferenciaNoches","alert","h","resetearModal","habitacionesSelect","option","selected","inputNombre","inputTelefono","getValue","clearTimeout","valor","clienteFinal","datosReserva","jsonDatosReserva","calendarEl","modalElement","MyModal","bootstrap","Modal","todasHabitaciones","calendar","FullCalendar","Calendar","displayEventTime","locale","initialView","headerToolbar","left","center","right","buttonText","today","prev","next","month","week","day","list","allDayText","events","dateClick","info","startInput","dateStr","show","render","reservacion","evento","ID_reserva","cliente_nombre","start","fecha_entrada","end","fecha_salida","description","estado_descripcion","allDay","color","estado_color","addEvent","modalEditarReservacion","MyModalEditarReserva","reservacionOriginal","totalPriceBase","calculateTotalPrice","fechaEntradaObj","totalPrice","toString","descuentoPorcentaje","checked","on","idEvento","cliente_apellidos","split","cobro_extra","tipo_descuento","porcentajeDescuento","descuento_aplicado","precio_total","ID_estado","precio_pendiente","populateEditForm","habitacionesSeleccionadasIds","responseHabitaciones","habitacionesCompletasSeleccionadas","includes","opciones","clearStore","cargarHabitacionesDisponibles","ID_habitacion","handleEventClick","reservacionId","reservacionActualizada","rolesDictionary","2","3","visible","usuarios","listarUsers","user","rol","rol_id","apellido","usuarioId","userId","usuarioActualizado","usuarioNuevo","test"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                id: btnActualizarInfo.dataset.id, \n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = '/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                                \n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide');\n            location.reload(); // Recarga la página automáticamente\n        });\n    }        \n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n}","// src/js/alertas.js\n(function() {\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); \n        });\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block';\n        mensajeResultado.textContent = mensaje;\n\n        mensajeResultado.className = `alert alert-${tipo === 'error' ? 'danger' : tipo === 'success' ? 'success' : 'info'}`;\n\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n\n    function mostrarAlerta3(titulo, mensaje, tipo) {\n            Swal.fire({\n                icon: tipo,\n                title: titulo,\n                text: mensaje,\n                willClose: () => {\n                    // Al cerrar la alerta, recargar la página después de un pequeño retraso\n                    setTimeout(() => {\n                        window.location.reload();\n                    }, 1000); // Ajusta los milisegundos según tu preferencia\n                }\n            }).then(() => {\n                $('.modal').modal('hide'); \n            });\n    }\n\n    function obtenerFechaFormateada() {\n        const fecha = new Date();\n        const year = fecha.getFullYear();\n        const month = String(fecha.getMonth() + 1).padStart(2, '0'); // +1 porque enero es 0\n        const day = String(fecha.getDate()).padStart(2, '0');\n        const hours = String(fecha.getHours()).padStart(2, '0');\n        const minutes = String(fecha.getMinutes()).padStart(2, '0');\n        const seconds = String(fecha.getSeconds()).padStart(2, '0');\n    \n        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    }\n    \n\n    // Hacerlas accesibles globalmente\n    window.mostrarAlerta = mostrarAlerta;\n    window.mostrarAlerta2 = mostrarAlerta2;\n    window.mostrarAlerta3 = mostrarAlerta3;\n    window.obtenerFechaFormateada = obtenerFechaFormateada;\n})();\n","if(window.location.pathname === '/admin/puntodeventa/catalogo'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const productos = await listarProductos(); // Esperamos los datos antes de inicializar DataTable\n\n        if (productos.length > 0) {\n            llenarTabla(productos);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_productos').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarProductos() {\n        try {\n            const response = await fetch('/api/productos');\n            const productos = await response.json();\n            return productos;\n        } catch (error) {\n            console.error('Error al obtener los productos:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(productos) {\n\n        const tbody = document.getElementById('tableBody_productos');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n        //console.log(productos);\n\n        productos.forEach((producto, index) => {\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${producto.nombre}</td>\n                    <td>${producto.precio}</td>\n                    <td class=\"text-center\">${producto.stock}</td>\n                    <td class=\"text-center\">${producto.categoria_producto_id.nombre}</td>\n                    <td class=\"text-center\">${producto.codigo_barras}</td>\n                    <td class=\"text-center\">${producto.proveedor}</td>\n                    <td><img src=\"/build/img/${producto.foto}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarProducto\" \n                            data-id=\"${producto.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarProducto\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarProducto\" data-id=\"${producto.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarProducto')) {\n            \n            const boton = event.target.closest('.btnEditarProducto');\n            const productoId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/productos/${productoId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const producto = await respuesta.json();\n                // Llenar los campos del modal con los datos del producto\n                document.getElementById('nombreEditar').value = producto.nombre;\n                document.getElementById('precioEditar').value = producto.precio;\n                document.getElementById('stockEditar').value = producto.stock;\n                document.getElementById('categoria_idEditar').value = producto.categoria_producto_id;\n                document.getElementById('codigo_barrasEditar').value = producto.codigo_barras;\n                document.getElementById('proveedorEditar').value = producto.proveedor;\n                \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditarP');\n                imgElement.src = producto.foto ? `/build/img/${producto.foto}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarProducto').dataset.id = productoId;\n        \n            } catch (error) {\n                console.error('Error al obtener los datos del producto:', error);\n            }\n        }\n    });\n\n    // ---------------    ACTUALIZAR PRODUCTO     -----------------\n    document.getElementById('formEditarProducto').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const productoId = document.querySelector('.btnActualizarProducto').dataset.id;\n    \n        const productoActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            precio: document.getElementById('precioEditar').value.trim(),\n            stock: document.getElementById('stockEditar').value.trim(),\n            categoria_producto_id: document.getElementById('categoria_idEditar').value.trim(),\n            codigo_barras: document.getElementById('codigo_barrasEditar').value.trim(),\n            proveedor: document.getElementById('proveedorEditar').value.trim(),\n            foto: document.getElementById('fotoP').files[0]\n        };\n\n        //console.log(productoActualizado);\n        //  return;\n    \n        if (!productoActualizado.nombre || !productoActualizado.precio || !productoActualizado.categoria_producto_id) {\n            mostrarAlerta('Error', 'No pueden ir vacios.', 'error');\n            return;\n        }\n\n        try {\n            const datos = new FormData();\n            Object.entries(productoActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/productos/${productoId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            const inputFile = document.getElementById('fotoP');\n            inputFile.value = ''; // Intenta resetear primero\n            if (inputFile.value) { \n                inputFile.parentNode.replaceChild(inputFile.cloneNode(true), inputFile);\n            }\n\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar producto:', error);\n        }\n    });\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_productos').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarProducto')) {\n            const productoId = event.target.closest('.btn-eliminarProducto').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/productos/${productoId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    //  --------------    CREAR NUEVO PRODUCTO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirProducto');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n        // alert('click');\n        // return;\n\n        const productoNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            precio: document.getElementById('precio').value.trim(),\n            stock: document.getElementById('stock').value.trim(),\n            categoria_producto_id: document.getElementById('categoria_id').value.trim(),\n            codigo_barras: document.getElementById('codigo_barras').value.trim(),\n            proveedor: document.getElementById('proveedor').value.trim(),\n            foto: document.getElementById('fotoPN').files[0]\n        };\n\n        // console.log(productoNuevo);\n        // return;\n\n        if (productoNuevo.nombre === \"\" || productoNuevo.precio === \"\" || productoNuevo.stock === \"\" || productoNuevo.categoria_producto_id === \"\" || productoNuevo.codigo_barras === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (productoNuevo.codigo_barras.length != 12) {\n            mostrarAlerta2('Codigo UPC INvalido', 'error');\n            return;\n        }\n\n        try {\n            const datos = new FormData();\n            Object.entries(productoNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/productos', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if(window.location.pathname === '/admin/configuracion/categorias'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const categorias = await listarCategorias(); // Esperamos los datos antes de inicializar DataTable\n\n        if (categorias.length > 0) {\n            llenarTabla(categorias);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_categorias').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarCategorias() {\n        try {\n            const response = await fetch('/api/categorias');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener categorías:', error);\n            return null;\n        }\n    }\n    \n    // Delegación de eventos para eliminación de categorias\n    document.getElementById('tableBody_categorias').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCategoria')) {\n            const categoriaId = event.target.closest('.btn-eliminarCategoria').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/categorias/${categoriaId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(categorias) {\n        const tbody = document.getElementById('tableBody_categorias');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        categorias.forEach((categoria, index) => {\n            const estatus = estatusDictionary[categoria.estado] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${categoria.nombre}</td>\n                    <td class=\"text-center\">${categoria.capacidad_maxima}</td>\n                    <td>${categoria.tipo_cama}</td>\n                    <td>${categoria.precio_base}</td>\n                    <td>${categoria.servicios_incluidos}</td>\n                    <td>${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCategoria\" \n                            data-id=\"${categoria.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCategoria\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCategoria\" data-id=\"${categoria.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar la categoria original\n    let categoriaOriginal = null;\n\n    // ---------------------------    LLENAR MODAL PARA ACTUALIZAR    ------------------------------\n    document.addEventListener('click', async function (e) {\n        if(e.target.closest('.btnEditarCategoria')) { //boton editar que abre modal\n            const boton = e.target.closest('.btnEditarCategoria');\n            const categoriaId = boton.dataset.id;\n            categoriaOriginal = null;\n\n            try {\n                \n                // Obtener datos de la categoria desde la API\n                const url = `/api/categorias/${categoriaId}`;\n                const respuesta = await fetch(url);\n                if(!respuesta.ok){\n                    throw new Error(`Error al obtener categoria: ${respuesta.statusText}`);\n                }\n                const categoria = await respuesta.json();\n                categoriaOriginal = { ...categoria }; // Guarda en la variable global\n\n                // Llenar campos del modal con los datos de la categoria\n                document.getElementById('nombreEditar').value = categoria.nombre;\n                document.getElementById('capacidad_maximaEditar').value = categoria.capacidad_maxima;\n                document.getElementById('tipo_camaEditar').value = categoria.tipo_cama;\n                document.getElementById('precio_baseEditar').value = categoria.precio_base;\n                document.getElementById('servicios_incluidosEditar').value = categoria.servicios_incluidos;\n                document.getElementById('estadoEditar').value = categoria.estado;\n\n                // Guardar el ID de la categoria en el botón de actualización\n                document.querySelector('.btnActualizarCategoria').dataset.id = categoriaId;\n\n            } catch (error) {\n                console.log('Error al obtener los datos de la categoria:', error);\n            }\n        }\n    });\n\n    // ------------------------     ACTUALIZAR CATEGORIA    ------------------------\n    document.getElementById('formEditarCategoria').addEventListener('submit', async function (e) {\n\n        e.preventDefault();\n\n        const categoriaId = document.querySelector('.btnActualizarCategoria').dataset.id;\n\n        const categoriaActualizada = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maximaEditar').value.trim(),\n            tipo_cama: document.getElementById('tipo_camaEditar').value.trim(),\n            precio_base: document.getElementById('precio_baseEditar').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidosEditar').value.trim(),\n            estado: document.getElementById('estadoEditar').value.trim()\n        }\n\n        if (!categoriaOriginal) {\n            console.error('Error: No hay datos originales de la categoria');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        //Comparar con los datos originales\n        let cambios = {};\n        if (categoriaActualizada.nombre !== categoriaOriginal.nombre) cambios.nombre = categoriaActualizada.nombre;\n        if (categoriaActualizada.capacidad_maxima !== categoriaOriginal.capacidad_maxima) cambios.capacidad_maxima = categoriaActualizada.capacidad_maxima;\n        if (categoriaActualizada.tipo_cama !== categoriaOriginal.tipo_cama) cambios.tipo_cama = categoriaActualizada.tipo_cama;\n        if (categoriaActualizada.precio_base !== categoriaOriginal.precio_base) cambios.precio_base = categoriaActualizada.precio_base;\n        if (categoriaActualizada.servicios_incluidos !== categoriaOriginal.servicios_incluidos) cambios.servicios_incluidos = categoriaActualizada.servicios_incluidos;\n        if (categoriaActualizada.estado !== categoriaOriginal.estado) cambios.estado = categoriaActualizada.estado;\n\n        // Si no hay cambios, no se envia la peticion\n        if(Object.keys(cambios).length === 0){\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si es PUT O PATCH\n        const metodo = Object.keys(cambios).length === 6 ? 'PUT' : 'PATCH';\n        const datos = metodo === 'PUT' ? categoriaActualizada : cambios;\n\n        try {\n            // Enviar la actualizacion al servidor\n            const url = `/api/categorias/${categoriaId}`;\n            const respuesta = await fetch(url, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if(!respuesta.ok){\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n            \n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirCategoria = document.querySelector('.btnSubirCategoria');\n    botonSubirCategoria.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const categoriaNueva = {\n            nombre: document.getElementById('nombre').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maxima').value.trim(),\n            tipo_cama: document.getElementById('tipo_cama').value.trim(),\n            precio_base: document.getElementById('precio_base').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidos').value.trim(),\n            estado: document.getElementById('estado').value.trim()\n        };\n\n        if (categoriaNueva.nombre === \"\" || categoriaNueva.capacidad_maxima === \"\" || categoriaNueva.tipo_cama === \"\" || categoriaNueva.precio_base === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(categoriaNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/categorias', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('capacidad_maxima').value = '';\n            document.getElementById('tipo_cama').value = '';\n            document.getElementById('servicios_incluidos').value = '';\n            document.getElementById('precio_base').value = '';\n            document.getElementById('estatado').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if(window.location.pathname === '/admin/clientes'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [6,7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const clientes = await listarClientes(); // Esperamos los datos antes de inicializar DataTable\n\n        if (clientes.length > 0) {\n            llenarTabla(clientes);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_clientes').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarClientes() {\n        try {\n            const response = await fetch('/api/clientes');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener clientes:', error);\n            return null;\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(clientes) {\n        const tbody = document.getElementById('tableBody_clientes');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        clientes.forEach((cliente, index) => {\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${cliente.nombre}</td>\n                    <td>${cliente.apellidos}</td>\n                    <td>${cliente.telefono}</td>\n                    <td>${cliente.correo}</td>\n                    <td>${cliente.direccion}</td>\n                    <td>${cliente.documento_identidad}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCliente\" \n                            data-id=\"${cliente.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCliente\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCliente\" data-id=\"${cliente.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar el nivel original\n    let clienteOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarCliente')) {\n            const boton = event.target.closest('.btnEditarCliente');\n            const clientesId = boton.dataset.id;\n            clienteOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/clientes/${clientesId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener cliente: ${respuesta.statusText}`);\n                }\n                const cliente = await respuesta.json();\n                clienteOriginal = { ...cliente }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del cliente\n                document.getElementById('nombre').value = cliente.nombre;\n                document.getElementById('apellidos').value = cliente.apellidos;\n                document.getElementById('direccion').value = cliente.direccion;\n                document.getElementById('correo').value = cliente.correo;\n                document.getElementById('telefono').value = cliente.telefono;\n                document.getElementById('documento_identidad').value = cliente.documento_identidad;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarCliente').dataset.id = clientesId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del cliente:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR CLIENTE -----------------\n    document.getElementById('formEditarCliente').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const clienteId = document.querySelector('.btnActualizarCliente').dataset.id;\n\n        const clienteActualizado = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellidos: document.getElementById('apellidos').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            correo: document.getElementById('correo').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            documento_identidad: document.getElementById('documento_identidad').value.trim()\n        };\n\n        if (!clienteOriginal) {\n            console.error('Error: No hay datos originales del cliente');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (clienteActualizado.nombre !== clienteOriginal.nombre) cambios.nombre = clienteActualizado.nombre;\n        if (clienteActualizado.apellidos !== clienteOriginal.apellidos) cambios.apellidos = clienteActualizado.apellidos;\n        if (clienteActualizado.telefono !== clienteOriginal.telefono) cambios.telefono = clienteActualizado.telefono;\n        if (clienteActualizado.correo !== clienteOriginal.correo) cambios.correo = clienteActualizado.correo;\n        if (clienteActualizado.direccion !== clienteOriginal.direccion) cambios.direccion = clienteActualizado.direccion;\n        if (clienteActualizado.documento_identidad !== clienteOriginal.documento_identidad) cambios.documento_identidad = clienteActualizado.documento_identidad;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 6 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? clienteActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/clientes/${clienteId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar cliente:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    // Delegación de eventos para eliminación de clientes\n    document.getElementById('tableBody_clientes').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCliente')) {\n            const clienteId = event.target.closest('.btn-eliminarCliente').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/clientes/${clienteId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n}","if(window.location.pathname === '/admin/configuracion/habitaciones'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const habitaciones = await listarhabitaciones(); // Esperamos los datos antes de inicializar DataTable\n\n        if (habitaciones.length > 0) {\n            llenarTabla(habitaciones);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_habitaciones').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarhabitaciones() {\n        try {\n            const response = await fetch('/api/habitaciones');\n            const habitaciones = await response.json();\n            return habitaciones;\n        } catch (error) {\n            console.error('Error al obtener habitaciones:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(habitaciones) {\n        const tbody = document.getElementById('tableBody_habitaciones');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        habitaciones.forEach((habitacion) => {\n            const estatus = estatusDictionary[habitacion.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${habitacion.numero}</td>\n                    <td>${habitacion.id_nivel.nombre}</td>\n                    <td>${habitacion.id_categoria.nombre}</td>\n                    <td>${habitacion.id_categoria.precio_base}</td>\n                    <td>${habitacion.id_categoria.servicios_incluidos}</td>\n                    <td>${habitacion.detalles_personalizados}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarHabitacion\" \n                            data-id=\"${habitacion.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarHabitacion\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarHabitacion\" data-id=\"${habitacion.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_habitaciones').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarHabitacion')) {\n            const habitacionId = event.target.closest('.btn-eliminarHabitacion').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/habitaciones/${habitacionId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n\n    // Variable global para almacenar el habitacion original\n    let habitacionOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarHabitacion')) {\n            const boton = event.target.closest('.btnEditarHabitacion');\n            const habitacionId = boton.dataset.id;\n            habitacionOriginal = '';\n    \n            try {\n                const respuesta = await fetch(`/api/habitaciones/${habitacionId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener habitación: ${respuesta.statusText}`);\n                }\n                const habitacion = await respuesta.json();\n                console.log(habitacion);\n    \n                habitacionOriginal = { ...habitacion }; // Guardar en variable global\n    \n                // Llenar los campos del modal con los datos de la habitación\n                document.getElementById('numeroEditar').value = habitacion.numero;\n                document.getElementById('id_nivelEditar').value = habitacion.id_nivel.id; // Aquí se asigna el ID del habitacion\n                document.getElementById('id_categoriaEditar').value = habitacion.id_categoria.id; // Aquí el ID de la categoría\n                document.getElementById('detalles_personalizadosEditar').value = habitacion.detalles_personalizados;\n                document.getElementById('estatusEditar').value = habitacion.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarHabitacion').dataset.id = habitacionId;\n    \n            } catch (error) {\n                console.error('Error al obtener los datos de la habitación:', error);\n            }\n        }\n    });\n    \n    // --------------- ACTUALIZAR HABITACION -----------------\n    document.getElementById('formEditarHabitacion').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const habitacionId = document.querySelector('.btnActualizarHabitacion').dataset.id;\n\n        const habitacionActualizada = {\n            numero: document.getElementById('numeroEditar').value.trim(),\n            id_nivel: document.getElementById('id_nivelEditar').value.trim(),\n            id_categoria: document.getElementById('id_categoriaEditar').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizadosEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim()\n        };\n\n        // console.log(habitacionActualizada);\n        // return;\n\n        if (!habitacionOriginal) {\n            console.error('Error: No hay datos originales del habitacion');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (habitacionActualizada.numero !== habitacionOriginal.numero) cambios.numero = habitacionActualizada.numero;\n        if (habitacionActualizada.id_nivel !== habitacionOriginal.id_nivel) cambios.id_nivel = habitacionActualizada.id_nivel;\n        if (habitacionActualizada.id_categoria !== habitacionOriginal.id_categoria) cambios.id_categoria = habitacionActualizada.id_categoria;\n        if (habitacionActualizada.detalles_personalizados !== habitacionOriginal.detalles_personalizados) cambios.detalles_personalizados = habitacionActualizada.detalles_personalizados;\n        if (habitacionActualizada.estatus !== habitacionOriginal.estatus) cambios.estatus = habitacionActualizada.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n        const datos = habitacionActualizada;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/habitaciones/${habitacionId}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar habitacion:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------     CREAR NUEVa HABITACION     ----------------\n    const botonSubirHabitacion = document.querySelector('.btnSubirHabitacion');\n    botonSubirHabitacion.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const habitacionNueva = {\n\n            numero: document.getElementById('numero').value.trim(),\n            id_nivel: document.getElementById('id_nivel').value.trim(),\n            id_categoria: document.getElementById('id_categoria').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizados').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        \n        };\n\n        if (habitacionNueva.id_nivel === \"\" || habitacionNueva.numero === \"\" || habitacionNueva.id_categoria === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(habitacionNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/habitaciones', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario después de crear una habitación\n            document.getElementById('numero').value = '';\n            document.getElementById('detalles_personalizados').value = '';\n            document.getElementById('estatus').value = '1';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n\n}\n","document.addEventListener(\"DOMContentLoaded\", function() {\n    var ctx = document.getElementById('barChart').getContext('2d');\n    var barChart;\n    var periodoSelect = document.getElementById('periodoSelect');\n\n    async function cargarDatos(periodo) {\n        try {\n            const response = await fetch(`/api/ganancias?anio=2025&periodo=${periodo}`);\n    \n            // Si el servidor responde con un 204 No Content, devolvemos un array vacío\n            if (response.status === 204) {\n                actualizarGrafica([], []);\n                return;\n            }\n    \n            const data = await response.json();\n    \n            // Procesar los datos de la API\n            const meses = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"];\n            const labels = data.length > 0 ? data.map(item => meses[item.mes - 1]) : [\"Sin datos\"];\n            const ganancias = data.length > 0 ? data.map(item => parseFloat(item.ganancias)) : [0];\n    \n            actualizarGrafica(labels, ganancias);\n        } catch (error) {\n            console.error(\"Error al cargar datos:\", error);\n        }\n    }\n    \n    function actualizarGrafica(labels, ganancias) {\n        if (barChart) {\n            barChart.destroy();\n        }\n    \n        barChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Ganancias',\n                    data: ganancias,\n                    backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n    \n    // Cargar datos iniciales\n    cargarDatos(periodoSelect.value);\n\n    // Cambiar los datos cuando el usuario seleccione otro período\n    periodoSelect.addEventListener(\"change\", function() {\n        cargarDatos(this.value);\n    });\n});\n","if(window.location.pathname === '/admin/configuracion/niveles'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const niveles = await listarNiveles(); // Esperamos los datos antes de inicializar DataTable\n\n        if (niveles.length > 0) {\n            llenarTabla(niveles);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_niveles').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarNiveles() {\n        try {\n            const response = await fetch('/api/niveles');\n            const niveles = await response.json();\n            return niveles;\n        } catch (error) {\n            console.error('Error al obtener niveles:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(niveles) {\n        const tbody = document.getElementById('tableBody_niveles');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        niveles.forEach((nivel, index) => {\n            const estatus = estatusDictionary[nivel.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${nivel.nombre}</td>\n                    <td>${nivel.numero}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarNivel\" \n                            data-id=\"${nivel.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarNivel\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarNivel\" data-id=\"${nivel.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_niveles').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarNivel')) {\n            const nivelId = event.target.closest('.btn-eliminarNivel').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/niveles/${nivelId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n    \n    // Variable global para almacenar el nivel original\n    let nivelOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarNivel')) {\n            const boton = event.target.closest('.btnEditarNivel');\n            const nivelId = boton.dataset.id;\n            nivelOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/niveles/${nivelId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener nivel: ${respuesta.statusText}`);\n                }\n                const nivel = await respuesta.json();\n                nivelOriginal = { ...nivel }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del nivel\n                document.getElementById('nombreEditar').value = nivel.nombre;\n                document.getElementById('numeroEditar').value = nivel.numero;\n                document.getElementById('estatusEditar').value = nivel.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarNivel').dataset.id = nivelId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del nivel:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR NIVEL -----------------\n    document.getElementById('formEditarNivel').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const nivelId = document.querySelector('.btnActualizarNivel').dataset.id;\n\n        const nivelActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            numero: document.getElementById('numeroEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n        };\n\n        if (!nivelOriginal) {\n            console.error('Error: No hay datos originales del nivel');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (nivelActualizado.nombre !== nivelOriginal.nombre) cambios.nombre = nivelActualizado.nombre;\n        if (nivelActualizado.numero !== nivelOriginal.numero) cambios.numero = nivelActualizado.numero;\n        if (nivelActualizado.estatus !== nivelOriginal.estatus) cambios.estatus = nivelActualizado.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 3 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? nivelActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/niveles/${nivelId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n    \n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirNivel = document.querySelector('.btnSubirNivel');\n    botonSubirNivel.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const nivelNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            numero: document.getElementById('numero').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        };\n\n        if (nivelNuevo.nombre === \"\" || nivelNuevo.numero === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(nivelNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/niveles', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('numero').value = '';\n            document.getElementById('estatus').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if (window.location.pathname === '/admin/puntodeventa/vender/reserva') {\n\n    const params = new URLSearchParams(window.location.search);\n    const idReserva = params.get(\"id\");\n\n    const inputBuscador = document.getElementById('inputBuscarProducto');\n    const listaSugerencias = document.getElementById('listaSugerencias');\n    const tablaVenta = document.getElementById('tablaVentaProductos');\n\n    const cuandoPagar = document.getElementById('cuandoPagar');\n    const grupoMetodoPago = document.getElementById('grupoMetodoPago');\n    const grupoEfectivo = document.getElementById('grupoEfectivo');\n    const metodoPago = document.getElementById('metodoPago');\n    const cantidadEfectivo = document.getElementById('cantidadEfectivo');\n    const feriaCalculada = document.getElementById('feriaCalculada');\n    const inputTotalPagar = document.getElementById('totalPagarVenta');\n\n    const btnTerminarVenta = document.getElementById('terminarVenta');\n\n    let serviciosVendidos = [];\n    let productosDisponibles = []; // Para guardar los productos obtenidos de la búsqueda\n    let total = 0;\n\n    inputBuscador.addEventListener('input', async (e) => {\n        const query = e.target.value.trim();\n        if (query.length >= 3) {\n            try {\n                const url = `/api/productos/codigo/${query}`;\n                const respuesta = await fetch(url);\n                productosDisponibles = await respuesta.json(); // Guardamos los productos disponibles\n                renderSugerencias(productosDisponibles);\n            } catch (error) {\n                console.error('Error al buscar productos:', error);\n                listaSugerencias.innerHTML = '<li class=\"list-group-item text-danger\">Error en la búsqueda</li>';\n                listaSugerencias.classList.remove('d-none');\n            }\n        } else {\n            limpiarLista();\n        }\n    });\n\n    function renderSugerencias(productos) {\n        listaSugerencias.innerHTML = '';\n        if (!Array.isArray(productos) || productos.length === 0) {\n            listaSugerencias.innerHTML = '<li class=\"list-group-item\">No se encontraron productos</li>';\n        } else {\n            productos.forEach(producto => {\n                const li = document.createElement('li');\n                li.classList.add('list-group-item', 'list-group-item-action');\n                li.textContent = `${producto.codigo_barras} - ${producto.nombre}`;\n                li.addEventListener('click', () => {\n                    agregarProducto(producto);  // Le pasamos el objeto completo del producto\n                    limpiarLista();\n                    inputBuscador.value = '';\n                });\n                listaSugerencias.appendChild(li);\n            });\n        }\n        listaSugerencias.classList.remove('d-none');\n    }\n\n    function limpiarLista() {\n        listaSugerencias.innerHTML = '';\n        listaSugerencias.classList.add('d-none');\n    }\n\n    function agregarProducto(producto) {\n        const precioUnitario = parseFloat(producto.precio);\n    \n        // Verificar si el producto ya está en la lista de serviciosVendidos\n        let productoExistente = serviciosVendidos.find(p => p.codigo_barras === producto.codigo_barras);\n    \n        if (productoExistente) {\n            // Si el producto ya existe, incrementamos la cantidad\n            productoExistente.cantidad++;\n            productoExistente.total = productoExistente.cantidad * precioUnitario;\n        } else {\n            // Si el producto no existe, lo agregamos a la lista\n            serviciosVendidos.push({\n                id_producto: producto.id,\n                codigo_barras: producto.codigo_barras,\n                nombre: producto.nombre,  // Agregamos el nombre del producto\n                proveedor: producto.proveedor,  // Agregamos el proveedor\n                precio: parseFloat(producto.precio),  // Precio unitario\n                foto: producto.foto,  // Foto del producto\n                cantidad: 1,\n                total: precioUnitario,\n                stock: producto.stock  // Agregar stock al producto\n            });\n        }\n    \n        // Actualizamos la tabla con los productos\n        actualizarTabla();\n    }\n    \n    // Función para actualizar la tabla\n    function actualizarTabla() {\n        // Limpiar la tabla antes de actualizarla\n        tablaVenta.innerHTML = '';\n    \n        // Recorrer todos los productos vendidos\n        serviciosVendidos.forEach(servicio => {\n            const fila = document.createElement('tr');\n            fila.innerHTML = `\n                <td>${servicio.nombre}</td>\n                <td>${servicio.proveedor}</td>\n                <td>\n                    <div class=\"d-flex justify-content-center align-items-center gap-2\">\n                        <button class=\"btn btn-sm btn-outline-secondary btn-restar\" data-id=\"${servicio.codigo_barras}\">-</button>\n                        <span class=\"cantidad\">${servicio.cantidad}</span>\n                        <button class=\"btn btn-sm btn-outline-secondary btn-sumar\" data-id=\"${servicio.codigo_barras}\" ${servicio.cantidad >= servicio.stock ? 'disabled' : ''}>+</button>\n                    </div>\n                </td>\n                <td>$${parseFloat(servicio.precio).toFixed(2)}</td>\n                <td>$${servicio.total.toFixed(2)}</td>\n                <td><img src=\"/build/img/${servicio.foto}.png\" alt=\"Foto\" width=\"50\" height=\"50\"></td>\n                <td><button class=\"btn btn-danger btn-sm\" data-id=\"${servicio.codigo_barras}\" id=\"eliminarProducto\">Eliminar</button></td>\n            `;\n            tablaVenta.appendChild(fila);\n        });\n        //console.log(serviciosVendidos);\n        // Agregar los eventos de eliminar, sumar y restar después de que la tabla haya sido actualizada\n        agregarEventosEliminar();\n        agregarEventosContador();\n        calcularTotal();\n    }\n    \n    // Función para agregar eventos de eliminación\n    function agregarEventosEliminar() {\n        const botonesEliminar = document.querySelectorAll('#eliminarProducto');\n    \n        botonesEliminar.forEach(boton => {\n            boton.addEventListener('click', function () {\n                const codigoBarras = this.getAttribute('data-id');\n                eliminarProducto(codigoBarras);\n            });\n        });\n    }\n    \n    // Función para eliminar un producto de serviciosVendidos\n    function eliminarProducto(codigoBarras) {\n        // Filtrar el producto que queremos eliminar\n        serviciosVendidos = serviciosVendidos.filter(servicio => servicio.codigo_barras !== codigoBarras);\n    \n        // Volver a actualizar la tabla\n        actualizarTabla();\n    }\n    \n    // Función para agregar eventos de incremento (+) y decremento (-)\n    function agregarEventosContador() {\n        const btnSumar = document.querySelectorAll('.btn-sumar');\n        const btnRestar = document.querySelectorAll('.btn-restar');\n    \n        // Evento de Sumar\n        btnSumar.forEach(btn => {\n            btn.addEventListener('click', function () {\n                const codigoBarras = this.getAttribute('data-id');\n                const producto = serviciosVendidos.find(p => p.codigo_barras === codigoBarras);\n    \n                if (producto && producto.cantidad < producto.stock) {\n                    producto.cantidad++;\n                    producto.total = producto.cantidad * parseFloat(producto.precio);\n                }\n    \n                // Actualizamos la tabla con los productos\n                actualizarTabla();\n            });\n        });\n    \n        // Evento de Restar\n        btnRestar.forEach(btn => {\n            btn.addEventListener('click', function () {\n                const codigoBarras = this.getAttribute('data-id');\n                const producto = serviciosVendidos.find(p => p.codigo_barras === codigoBarras);\n    \n                if (producto && producto.cantidad > 1) {\n                    producto.cantidad--;\n                    producto.total = producto.cantidad * parseFloat(producto.precio);\n                }\n    \n                // Actualizamos la tabla con los productos\n                actualizarTabla();\n            });\n        });\n    }\n\n    function calcularTotal() {\n        total = 0; // Reiniciar el total antes de empezar a sumar\n    \n        serviciosVendidos.forEach(servicio => {\n            total += servicio.total;\n        });\n    \n        const inputTotalPagar = document.getElementById('totalPagarVenta');\n        inputTotalPagar.value = `${total.toFixed(2)}`;\n    }    \n            \n    // Cerrar la lista si hace clic fuera\n    document.addEventListener('click', function (e) {\n        const isClickInside = inputBuscador.contains(e.target) || listaSugerencias.contains(e.target);\n        if (!isClickInside) {\n            limpiarLista();\n        }\n    });\n\n    // Mostrar u ocultar método de pago y efectivo\n    cuandoPagar.addEventListener('change', () => {\n        if (cuandoPagar.value === '1') {\n            grupoMetodoPago.classList.remove('d-none');//mostrar\n            grupoEfectivo.classList.remove('d-none');\n        } else {\n            grupoMetodoPago.classList.add('d-none');\n            grupoEfectivo.classList.add('d-none');\n            cantidadEfectivo.value = '';\n            feriaCalculada.value = '';\n        }\n    });\n\n    metodoPago.addEventListener('change', () => {\n        if( metodoPago.value === '2'){\n            grupoEfectivo.classList.add('d-none')\n        }\n        if( metodoPago.value === '3'){\n            grupoEfectivo.classList.add('d-none')\n        }\n        if( metodoPago.value === '1'){\n            grupoEfectivo.classList.remove('d-none');\n        }\n    })\n\n    // Calcular feria cuando se ingresa efectivo\n    cantidadEfectivo.addEventListener('input', () => {\n        // Eliminar cualquier carácter que no sea número o punto decimal\n        const totalRaw = inputTotalPagar.value;\n        const total = parseFloat(totalRaw) || 0;\n        //console.log(total);\n        const efectivo = parseFloat(cantidadEfectivo.value) || 0;\n        //console.log(efectivo);\n        const feria = total - efectivo;\n        feriaCalculada.value = Math.abs(feria);\n    });\n    \n    //enviar datos de la venta al servidor\n    btnTerminarVenta.addEventListener('click', () => {\n\n        if (serviciosVendidos.length === 0) {\n            mostrarAlerta('Opps.', 'El carrito está vacío', 'warning');\n            return;\n        }        \n        if(!cuandoPagar.value){\n            mostrarAlerta('Opps.', 'Falta seleccionar metodo de pago', 'warning');\n            return;\n        }\n\n        //SI SE PAGA EN EL MOMENTO\n        if(cuandoPagar.value === '1'){\n                //arreglo de objetos\n                const ventas = serviciosVendidos.map(producto => ({\n                    reservacion_id: idReserva,\n                    producto_id: producto.id_producto,\n                    cantidad: producto.cantidad,\n                    monto: parseFloat(producto.cantidad * producto.precio),\n                    fecha_pago: obtenerFechaFormateada(),\n                    tipo_pago: 'Huésped',\n                    descripcion: producto.nombre,\n                    estado : 1\n                }));\n                console.log(ventas);\n        } else{ //si se paga despues\n            //arreglo de objetos\n            const ventas = serviciosVendidos.map(producto => ({\n                reservacion_id: idReserva,\n                producto_id: producto.id_producto,\n                cantidad: producto.cantidad,\n                monto: parseFloat(producto.cantidad * producto.precio),\n                fecha_pago: obtenerFechaFormateada(),\n                tipo_pago: 'Huésped',\n                descripcion: producto.nombre,\n                estado : 2\n            }));\n            console.log(ventas);\n        }\n    })\n}\n","if (window.location.pathname === '/admin/recepcion') {\n    // Seleccionar todos los enlaces con la clase \"small-box-footer\"\n    const habitaciones = document.querySelectorAll('.small-box-footer');\n\n    habitaciones.forEach(habitacion => {\n        // Obtener los valores de los atributos data\n        const id = habitacion.getAttribute('data-id');\n        const estado = habitacion.getAttribute('data-estado');\n\n        // Si la habitación está en estado 3 o 6, mostrar alerta al hacer clic\n        if (estado == 3 || estado == 6 || estado == 8) {\n            habitacion.addEventListener('click', (event) => {\n                event.preventDefault(); // Evita la redirección por defecto\n                \n                Swal.fire({\n                    title: \"¿Limpieza Terminada?\",\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    confirmButtonColor: \"#3085d6\",\n                    cancelButtonColor: \"#d33\",\n                    confirmButtonText: \"Sí, confirmar!\"\n                }).then((result) => {\n                    if (result.isConfirmed) {\n                        let nuevoEstado; // Declarar variable correctamente\n                        \n                        if (estado == 3) {\n                            nuevoEstado = 2;\n                        } else if (estado == 6) {\n                            nuevoEstado = 1;\n                        } else if( estado == 8){\n                            nuevoEstado = 5;\n                        }\n\n                        if (nuevoEstado !== undefined) {\n                            // Llamar a la función para actualizar el estado\n                            actualizarEstadoHabitacion(id, nuevoEstado);\n                        } else {\n                            console.error(\"Error: nuevoEstado no está definido.\");\n                        }\n                    }\n                });\n            });\n        }\n    });\n\n    // Función para actualizar el estado de la habitación mediante PATCH\n    function actualizarEstadoHabitacion(id, nuevoEstado) {\n        fetch(`/api/habitaciones/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                id_estado_habitacion: nuevoEstado\n            })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            //console.log(\"Respuesta del servidor:\", data);\n            Swal.fire({\n                title: \"Habitación nuevamente disponible\",\n                icon: \"success\"\n            }).then(() => {\n                location.reload(); // Recargar la página para reflejar cambios\n            });\n        })\n        .catch(error => {\n            console.error(\"Error:\", error);\n            Swal.fire({\n                title: \"Error al actualizar\",\n                text: \"No se pudo cambiar la habitación.\",\n                icon: \"error\"\n            });\n        });\n    }\n}","if (window.location.pathname === \"/admin/recepcion/habitacion\") {\n\n    // Elementos del DOM\n    const listaSugerencias = document.getElementById(\"sugerenciaCorreo\");\n    const inputCorreoCliente = document.getElementById(\"correo\");\n    const inputNombreCliente = document.getElementById(\"nombre\");\n    const inputApellidosCliente = document.getElementById(\"apellidos\");\n    const inputDocumentoCliente = document.getElementById(\"documento\");\n    const inputTelefonoCliente = document.getElementById(\"telefono\");\n    const inputDireccionCliente = document.getElementById(\"direccion\");\n\n    //Modal para crear cliente si es nuevo\n    const btnCrearCliente = document.querySelector(\".btnCrearCliente\");\n    const inputNombreClienteNuevo = document.getElementById(\"nombreNuevoCliente\");\n    const inputApellidosClienteNuevo = document.getElementById(\"apellidosNuevoCliente\");\n    const inputCorreoClienteNuevo = document.getElementById(\"correoNuevoCliente\");\n    const inputTelefonoClienteNuevo = document.getElementById(\"telefonoNuevoCliente\");\n    const inputDocumentoClienteNuevo = document.getElementById(\"documento_identidadNuevoCliente\");\n    const inputDireccionClienteNuevo = document.getElementById(\"direccionNuevoCliente\");\n\n    let clienteNuevo = '';\n\n    const inputFechaEntrada = document.getElementById(\"fechaEntrada\");\n    const inputFechaSalida = document.getElementById(\"fechaSalida\");\n    const inputTipoDescuento = document.querySelectorAll(\"input[name='tipoDescuento']\");\n    const inputDescuento = document.getElementById(\"descuento\");\n    const inputCobroExtra = document.getElementById(\"cobroExtra\");\n    const inputAdelanto = document.getElementById(\"adelanto\");\n    const inputTotalPagar = document.getElementById(\"totalPagar\");\n    const precioHabitacion = parseFloat(document.getElementById(\"precio_habitacion\").textContent.trim()) || 0;\n    const inputMetodoPago = document.getElementById(\"metodoPago\");\n    const inputObservaciones = document.getElementById(\"observaciones\");\n    \n    let noches = 1;\n    let totalOriginal = noches * precioHabitacion;\n    let totalPendiente = totalOriginal;\n    let descuento = 0;\n    let tipoDescuento = '';\n    let cobroExtra = 0;\n    let adelanto = 0;\n\n    // Función para buscar clientes por correo en la API\n    async function buscarClientes(correo) {\n        if (correo.length < 3) {\n            listaSugerencias.classList.add(\"d-none\");\n            return;\n        }\n\n        try {\n            const response = await fetch(`/api/clientes/correo/${encodeURIComponent(correo)}`);\n\n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n\n            const clientes = await response.json();\n            mostrarSugerencias(clientes);\n        } catch (error) {\n            console.error(\"Error al obtener clientes:\", error);\n            listaSugerencias.classList.add(\"d-none\");\n        }\n    }\n\n    // Función para mostrar sugerencias de clientes en la lista desplegable\n    function mostrarSugerencias(clientes) {\n        listaSugerencias.innerHTML = \"\";\n\n        if (clientes.length === 0) {\n            listaSugerencias.classList.add(\"d-none\");\n            return;\n        }\n\n        listaSugerencias.classList.remove(\"d-none\");\n\n        clientes.forEach((cliente) => {\n            const item = document.createElement(\"li\");\n            item.classList.add(\"list-group-item\", \"list-group-item-action\");\n            item.textContent = cliente.correo;\n            item.dataset.id = cliente.id;\n            item.addEventListener(\"click\", () => seleccionarCliente(cliente));\n            listaSugerencias.appendChild(item);\n        });\n    }\n\n    // Función para llenar los campos con la información del cliente seleccionado\n    function seleccionarCliente(cliente) {\n        inputCorreoCliente.value = cliente.correo;\n        inputNombreCliente.value = cliente.nombre;\n        inputApellidosCliente.value = cliente.apellidos;\n        inputDocumentoCliente.value = cliente.documento_identidad;\n        inputTelefonoCliente.value = cliente.telefono;\n        inputDireccionCliente.value = cliente.direccion;\n\n        listaSugerencias.classList.add(\"d-none\");\n    }\n\n    // Evento para buscar clientes cuando el usuario escribe en el input\n    inputCorreoCliente.addEventListener(\"input\", (e) => {\n        buscarClientes(e.target.value);\n    });\n\n    // Ocultar sugerencias si el usuario hace clic fuera\n    document.addEventListener(\"click\", (e) => {\n        if (!inputCorreoCliente.contains(e.target) && !listaSugerencias.contains(e.target)) {\n            listaSugerencias.classList.add(\"d-none\");\n        }\n    });\n\n    //Crear cliente nuevo si no esta registrado y llenar la reserva con sus datos\n    btnCrearCliente.addEventListener(\"click\", (event) =>{\n        event.preventDefault();\n\n        clienteNuevo = {\n            nombre: inputNombreClienteNuevo.value.trim(),\n            apellidos: inputApellidosClienteNuevo.value.trim(),\n            correo: inputCorreoClienteNuevo.value.trim(),\n            telefono: inputTelefonoClienteNuevo.value.trim(),\n            documento_identidad: inputDocumentoClienteNuevo.value.trim(), // Tenías un error en \"identad\"\n            direccion: inputDireccionClienteNuevo.value.trim()\n        };\n\n        //Validar los datos del cliente nuevo\n        if(!clienteNuevo.nombre || !clienteNuevo.apellidos || !clienteNuevo.telefono){\n            mostrarAlerta2('Datos Incompletos: El nombre, apellidos y telefono son obligatorios', 'error')\n            return;\n        }\n\n        // Llenar los inputs principales con los datos del nuevo cliente\n        inputNombreCliente.value = clienteNuevo.nombre + \" \" + clienteNuevo.apellidos;\n        inputCorreoCliente.value = clienteNuevo.correo ?? '';\n        inputDocumentoCliente.value = clienteNuevo.documento_identidad ?? '';\n        inputTelefonoCliente.value = clienteNuevo.telefono;\n        inputDireccionCliente.value = clienteNuevo.direccion ?? '';\n        \n        mostrarAlerta('Huesped Agregado','Datos capturados con exito','info');\n    })\n\n    /////////////////////////////\n    function calcularNoches() {\n        const fechaEntrada = new Date(inputFechaEntrada.value);\n        const fechaSalida = new Date(inputFechaSalida.value);\n    \n        if (isNaN(fechaEntrada) || isNaN(fechaSalida) || fechaSalida <= fechaEntrada) {\n            noches = 1;\n        } else {\n            noches = (fechaSalida - fechaEntrada) / (1000 * 60 * 60 * 24);\n        }\n    }\n    \n    function calcularTotalPagar() {\n        totalOriginal = noches * precioHabitacion;\n        \n        descuento = parseFloat(inputDescuento.value) || 0;\n        cobroExtra = parseFloat(inputCobroExtra.value) || 0;\n        adelanto = parseFloat(inputAdelanto.value) || 0;\n        \n        const tipoDescuentoSeleccionado = document.querySelector(\"input[name='tipoDescuento']:checked\");\n        tipoDescuento = tipoDescuentoSeleccionado ? tipoDescuentoSeleccionado.value : '';\n        \n        let totalConDescuento = totalOriginal;\n        if (tipoDescuento === \"PORCENTAJE\") {\n            totalConDescuento -= totalOriginal * (descuento / 100);\n        } else if (tipoDescuento === \"MONTO\") {\n            totalConDescuento -= descuento;\n        }\n        \n        totalPendiente = totalConDescuento + cobroExtra - adelanto;\n        inputTotalPagar.value = totalPendiente.toFixed(2);\n    }\n    \n    function actualizarCalculo() {\n        calcularNoches();\n        calcularTotalPagar();\n    }\n    \n    [inputFechaEntrada, inputFechaSalida, inputDescuento, inputCobroExtra, inputAdelanto].forEach(input => {\n        input.addEventListener(\"input\", actualizarCalculo);\n    });\n    \n    inputTipoDescuento.forEach(radio => {\n        radio.addEventListener(\"change\", actualizarCalculo);\n    });\n    \n    // Calcular total inicial al cargar la página\n    actualizarCalculo();\n\n    //Obtener datos y enviar datos de la reserva de la habitacion al servidor\n    const metodoPago = inputMetodoPago.value;\n    const observaciones = inputObservaciones.value.trim();\n    document.getElementById(\"reservarHabitacion\").addEventListener('click', async (e) => {\n        \n        e.preventDefault();\n        \n        //mostrar alertas o alerta si faltan datos\n        if(!inputNombreCliente.value.trim() || !inputApellidosCliente.value.trim() || !inputTelefonoCliente.value.trim()){\n            mostrarAlerta('Faltan datos del Huesped', 'El nombre, apellidos y telefono son obligatorios', 'warning');\n            return;\n        }\n\n        const params = new URLSearchParams(window.location.search);\n        const idHabitacion = params.get(\"id\");\n\n        const reserva = {\n            cliente: {\n                correo : inputCorreoCliente.value.trim(),\n                nombre : inputNombreCliente.value.trim(),\n                apellidos : inputApellidosCliente.value.trim(),\n                documento_identidad : inputDocumentoCliente.value.trim(),\n                telefono : inputTelefonoCliente.value.trim(),\n                direccion : inputDireccionCliente.value.trim()\n            },\n            fechas : {\n                entrada: `${inputFechaEntrada.value} 14:00:00`,\n                salida: `${inputFechaSalida.value} 12:00:00`\n            },\n            habitaciones: [idHabitacion],\n            pago: {\n                totalPagar: parseFloat(totalPendiente),\n                totalPagarOriginal: parseFloat(totalOriginal),\n                descuento: parseFloat(descuento),\n                tipoDescuento: tipoDescuento,\n                cobroExtra: parseFloat(cobroExtra),\n                adelanto: parseFloat(adelanto),\n                metodo_pago: metodoPago // METODO de PAGO va aquí si el backend lo espera dentro de pago\n            },\n            observaciones: observaciones\n        };\n        \n        // ✅ NO sobreescribas el FormData\n        const formData = new FormData();\n        formData.append('reserva', JSON.stringify(reserva));\n        \n        // ✅ Enviar correctamente el FormData\n        try {\n            const respuesta = await fetch('/api/reservaciones', {\n                method: 'POST',\n                body: formData\n            });\n        \n            if (!respuesta.ok) throw new Error('Error en la respuesta del servidor');\n        \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n        } catch (error) {\n            console.error('Error:', error);\n            mostrarAlerta('Error', 'No se pudo enviar la reserva', 'error');\n        }        \n    })\n}\n","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    // function mostrarAlerta(titulo, mensaje, tipo) {\n    //     Swal.fire({\n    //         icon: tipo,\n    //         title: titulo,\n    //         text: mensaje,\n    //     }).then(() => {\n    //         $('.modal').modal('hide'); // Cierra todos los modales activos\n    //     });\n    // }    \n\n    // function mostrarAlerta2(mensaje, tipo) {\n    //     const mensajeResultado = document.getElementById('mensaje-resultado');\n    //     mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n    //     mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n    //     // Cambiar el color de fondo del contenedor según el tipo de mensaje\n    //     if (tipo === 'error') {\n    //         mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n    //     } else if (tipo === 'success') {\n    //         mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n    //     } else {\n    //         mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n    //     }\n    \n    //     // Opcional: Ocultar el mensaje después de 5 segundos\n    //     setTimeout(() => {\n    //         mensajeResultado.style.display = 'none';\n    //     }, 5000);\n    // }\n    \n}\n","if(window.location.pathname === '/admin/reservaciones'){\n    // Elementos del DOM\n    const inputCorreo = document.getElementById('searchEmail');\n    const listaSugerencias = document.getElementById('sugerenciasCorreo');\n    const fechaEntrada = document.getElementById(\"fechaEntrada\");\n    const fechaSalida = document.getElementById(\"fechaSalida\");\n    const selectHabitacion = document.getElementById(\"habitacion\");\n    const btnSiguiente = document.getElementById('btnSiguiente');\n    const btnAtras = document.getElementById('btnAtras');\n    const btnConfirmar = document.getElementById('btnConfirmar'); // Asegúrate de tener este botón en el modal\n    const totalPagarInput = document.getElementById(\"totalPagar\");\n    const descuentoInput = document.getElementById(\"descuento\");\n    const cobroExtraInput = document.getElementById(\"cobroExtra\");\n    const adelantoInput = document.getElementById(\"adelanto\");\n\n    // Variables de control\n    let timeoutBusqueda;\n    let clienteNuevo = {};  \n    let pasoActual = 1;\n    let habitacionesDisponibles = []; // Definir la variable global para las habitaciones\n    let habitacionesSeleccionadas = [];\n\n    // Inicializar Choices.js para la selección de habitaciones\n    const choices = new Choices(selectHabitacion, {\n        removeItemButton: true,\n        placeholder: true,\n        placeholderValue: \"Seleccione una o más habitaciones\",\n        searchEnabled: false,\n    });\n\n    // Función para buscar clientes por correo en la API\n    async function buscarClientes(correo) {\n        try {\n            const response = await fetch(`/api/clientes/correo/${encodeURIComponent(correo)}`);\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error al obtener clientes:\", error);\n            return [];\n        }\n    }\n\n    // Función para mostrar sugerencias de clientes en la lista desplegable\n    function mostrarSugerencias(clientes) {\n        listaSugerencias.innerHTML = '';\n        if (clientes.length === 0) {\n            listaSugerencias.classList.add('d-none');\n            return;\n        }\n        listaSugerencias.classList.remove('d-none');\n        clientes.forEach(cliente => {\n            const item = document.createElement('li');\n            item.classList.add('list-group-item', 'list-group-item-action');\n            item.textContent = cliente.correo;\n            item.dataset.id = cliente.id;\n            item.addEventListener('click', () => seleccionarCliente(cliente));\n            listaSugerencias.appendChild(item);\n        });\n    }\n\n    // Función para llenar los campos con la información del cliente seleccionado\n    function seleccionarCliente(cliente) {\n        inputCorreo.value = cliente.correo;\n        document.getElementById('nombre').value = cliente.nombre;\n        document.getElementById('apellidos').value = cliente.apellidos;\n        document.getElementById('documento_identidad').value = cliente.documento_identidad;\n        document.getElementById('telefono').value = cliente.telefono;\n        document.getElementById('direccion').value = cliente.direccion;\n        listaSugerencias.classList.add('d-none');\n    }\n\n    // Función para guardar los datos de un nuevo cliente ingresado\n    function guardarClienteNuevo() {\n        clienteNuevo = {\n            correo: inputCorreo.value.trim(),\n            nombre: document.getElementById('nombre').value.trim(),\n            apellidos: document.getElementById('apellidos').value.trim(),\n            documento_identidad: document.getElementById('documento_identidad').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            direccion: document.getElementById('direccion').value.trim()\n        };\n    }\n\n        // Variables para la barra de progreso\n        const progressBar = document.getElementById('progressBar');\n\n        // Función para actualizar la barra de progreso\n        function actualizarBarraProgreso(porcentaje) {\n            progressBar.style.width = `${porcentaje}%`;\n            progressBar.setAttribute('aria-valuenow', porcentaje);\n            progressBar.textContent = `${porcentaje}%`;\n        }\n    \n        // Modificar la lógica de los pasos\n        btnSiguiente.addEventListener('click', () => {\n            switch (pasoActual) {\n                case 1:\n                    if (!document.getElementById('nombre').value.trim()) {\n                        guardarClienteNuevo();\n                    }\n                    const inputNombre = document.getElementById('nombre').value.trim();\n                    const inputTelefono = document.getElementById('telefono').value.trim();\n    \n                    if (!inputNombre || !inputTelefono) {\n                        mostrarAlerta('Campos Obligatorios', 'El nombre y el teléfono son obligatorios para crear reservación', 'warning');\n                        return;\n                    }\n                    cambiarPaso(2);\n                    actualizarBarraProgreso(66);  // Actualizar barra a 66% en el paso 2\n                    break;\n                case 2:\n                    habitacionesSeleccionadas = choices.getValue(true);\n                    if (habitacionesSeleccionadas.length === 0) {\n                        mostrarAlerta('No selecciono habitaciones','Por favor, seleccione una habitación.','warning');\n                        return;\n                    }\n                    cambiarPaso(3);\n                    // Calcular el total cuando llegues al paso 3\n                    calcularTotalPagar();  // Llamada aquí para calcular el total automáticamente\n                    btnSiguiente.classList.add('d-none'); // Ocultar el botón de Siguiente en el paso 3\n                    btnConfirmar.classList.remove('d-none'); // Mostrar el botón de Confirmar en el paso 3\n                    actualizarBarraProgreso(100);  // Actualizar barra a 100% en el paso 3\n                    break;\n            }\n        });\n    \n        // Función para cambiar de paso\n        function cambiarPaso(nuevoPaso) {\n            // Ocultar el paso actual y mostrar el nuevo paso\n            document.getElementById(`step${pasoActual}`).classList.add('d-none');\n            document.getElementById(`step${nuevoPaso}`).classList.remove('d-none');\n    \n            pasoActual = nuevoPaso;\n    \n            // Mostrar u ocultar el botón de \"Atras\" dependiendo del paso actual\n            btnAtras.classList.toggle('d-none', pasoActual === 1);\n    \n            // Actualizar el texto y la visibilidad de los botones\n            if (pasoActual === 3) {\n                btnSiguiente.textContent = \"Registrar\";  // En el paso 3 se muestra \"Registrar\"\n                btnConfirmar.classList.remove('d-none');\n                btnSiguiente.classList.add('d-none');\n            } else {\n                btnSiguiente.textContent = \"Siguiente\";  // En los otros pasos se muestra \"Siguiente\"\n                btnConfirmar.classList.add('d-none');\n                btnSiguiente.classList.remove('d-none');\n            }\n        }\n    /**\n     * Carga habitaciones disponibles según las fechas seleccionadas\n     */\n    async function cargarHabitaciones() {\n        if (!fechaEntrada.value || !fechaSalida.value) return;\n        try {\n            const response = await fetch(`/api/habitaciones/disponibles/${fechaEntrada.value}/${fechaSalida.value}`);\n            habitacionesDisponibles = await response.json();  // Guardar habitaciones disponibles\n            choices.clearChoices();\n            if (habitacionesDisponibles.length === 0) {\n                choices.setChoices([{ value: \"\", label: \"No hay habitaciones disponibles\", disabled: true }]);\n                return;\n            }\n            choices.setChoices(habitacionesDisponibles.map(habitacion => ({\n                value: habitacion.id,\n                label: `Habitación ${habitacion.numero} | ${habitacion.id_categoria.nombre} | Capacidad max. ${habitacion.id_categoria.capacidad_maxima} personas | $${habitacion.id_categoria.precio_base} MXN`\n            })));\n        } catch (error) {\n            console.error(\"Error al obtener habitaciones:\", error);\n        }\n    }\n\n    // Evento para detectar cambios en las fechas y cargar habitacione\n    fechaEntrada.addEventListener(\"change\", cargarHabitaciones);\n    fechaSalida.addEventListener(\"change\", cargarHabitaciones);\n\n    //Maneja el retroceso de pasos en el modal\n     \n    btnAtras.addEventListener('click', () => {\n        if (pasoActual > 1) {\n            cambiarPaso(pasoActual - 1);\n        }\n    });\n\n    // Maneja la búsqueda de clientes por correo con retraso\n    \n    inputCorreo.addEventListener('input', () => {\n        clearTimeout(timeoutBusqueda);\n        const valor = inputCorreo.value.trim();\n        if (valor.length < 3) {\n            listaSugerencias.classList.add('d-none');\n            return;\n        }\n        timeoutBusqueda = setTimeout(async () => {\n            mostrarSugerencias(await buscarClientes(valor));\n        }, 300);\n    });\n\n    // Oculta las sugerencias si se hace clic fuera del input\n     \n    document.addEventListener('click', (e) => {\n        if (!inputCorreo.contains(e.target) && !listaSugerencias.contains(e.target)) {\n            listaSugerencias.classList.add('d-none');\n        }\n    });\n    // Función para calcular el total a pagar\n    function calcularTotalPagar() {\n        let total = 0;\n\n        // Obtener la diferencia de noches entre las fechas de entrada y salida\n        const fechaEntradaDate = new Date(fechaEntrada.value);\n        const fechaSalidaDate = new Date(fechaSalida.value);\n        const diferenciaNoches = (fechaSalidaDate - fechaEntradaDate) / (1000 * 60 * 60 * 24);  // Calculamos la diferencia en días\n\n        if (diferenciaNoches <= 0) {\n            alert(\"La fecha de salida debe ser posterior a la de entrada.\");\n            return;\n        }\n\n        // Sumar los precios base de las habitaciones seleccionadas, multiplicados por las noches\n        habitacionesSeleccionadas.forEach(habitacionId => {\n            const habitacion = habitacionesDisponibles.find(h => h.id === habitacionId);  // Buscar la habitación en las disponibles\n            if (habitacion) {\n                total += parseFloat(habitacion.id_categoria.precio_base) * diferenciaNoches;  // Multiplicar por la cantidad de noches\n            }\n        });\n\n        // Guardamos el total de las habitaciones seleccionadas antes de aplicar ningún descuento o cobro extra\n        totalPagarOriginal = total;  // Aquí almacenamos el precio total sin descuentos ni cobros extras\n\n        // Obtener el descuento ingresado\n        const descuento = parseFloat(descuentoInput.value) || 0;  // Si no se ingresa un valor, el descuento será 0\n        const tipoDescuento = document.querySelector('input[name=\"tipoDescuento\"]:checked') ? \n                              document.querySelector('input[name=\"tipoDescuento\"]:checked').value : \n                              'monto';  // Si no está seleccionado, por defecto es 'monto'\n\n        // Aplicar el descuento\n        if (tipoDescuento === 'PORCENTAJE') {\n            total -= (total * descuento) / 100;  // Descuento en porcentaje\n        } else {\n            total -= descuento;  // Descuento en monto fijo\n        }\n\n        // Aplicar cobro extra\n        const cobroExtra = parseFloat(cobroExtraInput.value) || 0;  // Si no se ingresa un valor, el cobro extra será 0\n        total += cobroExtra;  // Sumar el cobro extra\n\n        // Asegurarse de que el total no sea negativo después de aplicar el descuento y el cobro extra\n        total = total < 0 ? 0 : total;\n\n        // Obtener el adelanto\n        const adelanto = parseFloat(adelantoInput.value) || 0;\n\n        // Restar el adelanto del total\n        total -= adelanto;  // Descontamos el adelanto del total\n\n        // Asegurarse de que el total no sea negativo\n        total = total < 0 ? 0 : total;\n\n        // Actualizar el total en el campo correspondiente\n        totalPagarInput.value = total.toFixed(2);  // Mostrar el total con 2 decimales\n    }\n        // Evento de Confirmar en el paso 3 del modal:\n        btnConfirmar.addEventListener('click', async () => {\n            // Primero, obtendremos todos los valores actualizados\n            let total = 0;\n            habitacionesSeleccionadas.forEach(habitacionId => {\n                const habitacion = habitacionesDisponibles.find(h => h.id === habitacionId);  // Buscar en habitacionesDisponibles\n                if (habitacion) {\n                    total += parseFloat(habitacion.id_categoria.precio_base);\n                }\n            });\n    \n            // Obtener el descuento\n            const descuento = parseFloat(descuentoInput.value) || 0;\n            const tipoDescuento = document.querySelector('input[name=\"tipoDescuento\"]:checked').value;\n            if (tipoDescuento === 'PORCENTAJE') {\n                total -= (total * descuento) / 100; // Se resta el porcentaje del total\n            } else {\n                total -= descuento; // Si es un monto, simplemente lo restamos\n            }\n    \n            // Aplicar cobro extra\n            const cobroExtra = parseFloat(cobroExtraInput.value) || 0;\n            total += cobroExtra;\n    \n            // Obtener el adelanto ingresado en el formulario\n            const adelanto = parseFloat(document.getElementById('adelanto').value) || 0;  // Si no se ingresa un valor, por defecto será 0\n    \n            // Restar el adelanto\n            total -= adelanto;  // Restar el adelanto del total\n    \n            // Asegurarse de que el total no sea negativo\n            //total = total < 0 ? 0 : total;\n            //console.log(total); este totak esta de mas y los calculos al dar confirmar\n    \n            // Actualizar el total en el campo correspondiente\n            //totalPagarInput.value = total.toFixed(2);\n    \n            // Obtener el cliente\n            let clienteFinal = {};\n    \n            if (clienteNuevo.correo) {\n                // Si el cliente es nuevo, usamos los datos que se ingresaron\n                clienteFinal = clienteNuevo;\n            } else {\n                // Si el cliente ya existía y fue seleccionado, usamos sus datos\n                clienteFinal = {\n                    correo: inputCorreo.value,\n                    nombre: document.getElementById('nombre').value,\n                    apellidos: document.getElementById('apellidos').value,\n                    documento_identidad: document.getElementById('documento_identidad').value,\n                    telefono: document.getElementById('telefono').value,\n                    direccion: document.getElementById('direccion').value\n                };\n            }\n    \n            // Enviar los datos al servidor\n            const url = '/api/reservaciones';  // URL de la API de reservaciones\n            const datos = new FormData();\n            \n            const totalPendiente = document.getElementById('totalPagar').value;\n            //console.log(totalPendiente);\n            // Crear la estructura de datos\n            const datosReserva = {\n                cliente: {\n                    correo: clienteFinal.correo,\n                    nombre: clienteFinal.nombre,\n                    apellidos: clienteFinal.apellidos,\n                    documento_identidad: clienteFinal.documento_identidad,\n                    telefono: clienteFinal.telefono,\n                    direccion: clienteFinal.direccion\n                },\n                fechas: {\n                    entrada: `${fechaEntrada.value} 14:00:00`, // Agregar manualmente la hora de entrada\n                    salida: `${fechaSalida.value} 12:00:00`   // Agregar manualmente la hora de salida\n                },\n                habitaciones: habitacionesSeleccionadas,  // Array de habitaciones seleccionadas\n                pago: {\n                    totalPagar: totalPendiente,\n                    totalPagarOriginal: totalPagarOriginal.toFixed(2),\n                    descuento: tipoDescuento === 'PORCENTAJE' ? (totalPagarOriginal * descuento) / 100 : descuento,\n                    tipoDescuento: tipoDescuento,\n                    cobroExtra: cobroExtra,\n                    adelanto: adelanto.toFixed(2)\n                },\n                observaciones: document.getElementById('observaciones').value.trim(),\n                metodo_pago: document.getElementById('metodoPago').value\n            };\n            \n            // console.log(datosReserva);\n            // return;\n            // Convertirlo a JSON para enviar al servidor\n            const jsonDatosReserva = JSON.stringify(datosReserva);\n    \n            // Enviar el JSON usando FormData (si es necesario)\n            datos.append('reserva', jsonDatosReserva);\n    \n            // Realizar la solicitud fetch\n            try {\n                const respuesta = await fetch(url, {\n                    method: 'POST',\n                    body: datos\n                });\n    \n                if (!respuesta.ok) {\n                    throw new Error('Error en la respuesta del servidor');\n                }\n    \n                const resultado = await respuesta.json();\n    \n                // Mostrar alerta con los resultados\n                mostrarAlerta3(resultado.titulo, resultado.mensaje, resultado.tipo);\n            } catch (error) {\n                console.error('Error en la solicitud:', error);\n            // Puedes agregar aquí un mensaje de error al usuario si es necesario\n            mostrarAlerta('Error', 'Hubo un problema al procesar la solicitud', 'error');\n            }\n    });\n    // Agregar listeners para actualizar en tiempo real el total cuando haya cambios\n    descuentoInput.addEventListener('input', calcularTotalPagar);\n    cobroExtraInput.addEventListener('input', calcularTotalPagar);\n    adelantoInput.addEventListener('input', calcularTotalPagar);\n    function resetearModal() {\n        // Limpiar todos los campos del formulario en el modal\n        document.getElementById('nombre').value = '';\n        document.getElementById('apellidos').value = '';\n        document.getElementById('documento_identidad').value = '';\n        document.getElementById('telefono').value = '';\n        document.getElementById('direccion').value = '';\n        document.getElementById('observaciones').value = '';\n        selectHabitacion.value = '';  // Limpiar la selección de habitación\n        fechaEntrada.value = '';  // Limpiar la fecha de entrada\n        fechaSalida.value = '';  // Limpiar la fecha de salida\n        totalPagarInput.value = '';  // Limpiar el total a pagar\n        adelantoInput.value = ''; // Limpiar el adelanto\n\n        // Limpiar los campos específicos de descuento y cobro extra\n        descuentoInput.value = '';  // Limpiar descuento\n        cobroExtraInput.value = '';  // Limpiar cobro extra\n\n        // Limpiar las habitaciones seleccionadas\n        choices.clearChoices();  // Esto debería limpiar las opciones seleccionadas del selector de habitaciones\n        \n        // Limpiar la selección de las habitaciones en el select (si existe el elemento selectHabitacion)\n        const habitacionesSelect = document.getElementById('selectHabitacion');\n        if (habitacionesSelect) {\n            for (let option of habitacionesSelect.options) {\n                option.selected = false;  // Deseleccionar todas las opciones\n            }\n        }\n\n        // Limpiar el campo de correo\n        inputCorreo.value = '';  // Limpiar correo\n\n        // Resetear el paso actual al step 1\n        pasoActual = 1;\n\n        // Mostrar solo el paso 1, ocultando los demás\n        document.getElementById('step1').classList.remove('d-none');\n        document.getElementById('step2').classList.add('d-none');\n        document.getElementById('step3').classList.add('d-none');\n        document.getElementById('btnConfirmar').classList.add('d-none');\n\n        // Resetear la visibilidad de los botones\n        btnAtras.classList.add('d-none');  // Ocultar el botón \"Previo\"\n        btnSiguiente.classList.remove('d-none');  // Mostrar el botón \"Siguiente\"\n    }\n}","if (window.location.pathname === '/admin/usuarios') {\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td><img src=\"/build/img/${user.img}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>${user.telefono}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña en opciones de la tabla -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarUsuario\" \n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuarioEditarModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de usuarios\n    document.getElementById('tableBody_users').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarUsuario')) {\n            const usuarioId = event.target.closest('.btn-eliminarUsuario').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/usuarios/${usuarioId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarUsuario')) {\n            const boton = event.target.closest('.btnEditarUsuario');\n            const userId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/usuarios/${userId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const usuario = await respuesta.json();\n                // Llenar los campos del modal con los datos del usuario\n                document.getElementById('nombreEditar').value = usuario.nombre;\n                document.getElementById('apellidoEditar').value = usuario.apellido;\n                document.getElementById('direccionEditar').value = usuario.direccion;\n                document.getElementById('emailEditar').value = usuario.email;\n                document.getElementById('telefonoEditar').value = usuario.telefono;\n                document.getElementById('rol_idEditar').value = usuario.rol_id;\n                document.getElementById('estatusEditar').value = usuario.estatus;\n    \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditar');\n                imgElement.src = usuario.img ? `/build/img/${usuario.img}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarUsuario').dataset.id = userId;\n    \n                // Abrir el modal manualmente si es necesario\n                $('#usuarioEditarModal').modal('show');\n    \n            } catch (error) {\n                console.error('Error al obtener los datos del usuario:', error);\n            }\n        }\n    });\n    \n    // ---------------    ACTUALIZAR USUARIO     - ----------------\n    document.getElementById('formEditarUsuario').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const userId = document.querySelector('.btnActualizarUsuario').dataset.id;\n    \n        const usuarioActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            apellido: document.getElementById('apellidoEditar').value.trim(),\n            direccion: document.getElementById('direccionEditar').value.trim(),\n            email: document.getElementById('emailEditar').value.trim(),\n            telefono: document.getElementById('telefonoEditar').value.trim(),\n            password: document.getElementById('passwordEditar').value.trim(),\n            password2: document.getElementById('password2Editar').value.trim(),\n            rol_id: document.getElementById('rol_idEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n            img: document.getElementById('logoEditar').files[0]\n        };\n    \n        if (usuarioActualizado.password !== usuarioActualizado.password2) {\n            mostrarAlerta('Error', 'Las contraseñas no coinciden.', 'error');\n            return;\n        }\n\n        if (usuarioActualizado.telefono.length > 10) {\n            mostrarAlerta('Error', 'Telefono no valido', 'error');\n            return;\n        }\n    \n        delete usuarioActualizado.password2; // No enviar password2 al backend\n    \n        try {\n            const datos = new FormData();\n            Object.entries(usuarioActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/usuarios/${userId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar usuario:', error);\n        }\n    });\n\n    //  --------------    CREAR NUEVO USUARIO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const usuarioNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellido: document.getElementById('apellido').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            email: document.getElementById('email').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            password: document.getElementById('password').value.trim(),\n            password2: document.getElementById('password2').value.trim(),\n            rol_id: document.getElementById('rol_id').value.trim(),\n            estatus: document.getElementById('estatus').value.trim(),\n            img: document.getElementById('logo').files[0]\n        };\n\n        if (usuarioNuevo.email === \"\" || usuarioNuevo.nombre === \"\" || usuarioNuevo.direccion === \"\" || usuarioNuevo.password === \"\" || usuarioNuevo.password2 === \"\" || usuarioNuevo.telefono === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (usuarioNuevo.password !== usuarioNuevo.password2) {\n            mostrarAlerta2(\"Las contraseñas no coinciden.\", \"error\");\n            return;\n        }\n\n        if (usuarioNuevo.telefono.length > 10) {\n            mostrarAlerta2('Telefono no valido', 'error');\n            return;\n        }\n\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(usuarioNuevo.email)) {\n            mostrarAlerta2(\"El correo electrónico no tiene un formato válido.\", \"error\");\n            return;\n        }\n\n        delete usuarioNuevo.password2;\n\n        try {\n            const datos = new FormData();\n            Object.entries(usuarioNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/usuarios', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n    \n}","if (window.location.pathname === '/admin/reservaciones') {\n    document.addEventListener('DOMContentLoaded', function () {\n        var calendarEl = document.getElementById('calendar');\n        var modalElement = document.getElementById('modalReservacion');\n        var MyModal = new bootstrap.Modal(modalElement);\n        // Definir todasHabitaciones globalmente\n        let todasHabitaciones = [];\n        // Configuración del calendario\n        var calendar = new FullCalendar.Calendar(calendarEl, {\n            displayEventTime: false,\n            locale: 'es',\n            initialView: 'dayGridMonth',\n            headerToolbar: {\n                left: 'prev,next today',\n                center: 'title',\n                right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n            },\n            buttonText: {\n                today: 'Hoy',\n                prev: 'Anterior',\n                next: 'Siguiente',\n                month: 'Mes',\n                week: 'Semana',\n                day: 'Día',\n                list: 'Lista',\n            },\n            allDayText: 'Todo el día',\n            events: [],\n            dateClick: dateClickHandler\n        });\n\n        // Inicializar el calendario\n        calendar.render();\n        setupEventListeners();\n        loadReservations();\n\n        // Variables y modal para edición\n        const modalEditarReservacion = document.getElementById('modalEditar');\n        const MyModalEditarReserva = new bootstrap.Modal(modalEditarReservacion);\n        let reservacionOriginal;\n        let choices = null;\n        let totalPriceBase = 0;\n\n        // Configuración de eventos\n        calendar.on('eventClick', async function(info) {\n            await handleEventClick(info, MyModalEditarReserva);\n        });\n\n        // Manejador de clic en la fecha del calendario\n        function dateClickHandler(info) {\n            var startInput = document.getElementById('start');\n            if (startInput) {\n                startInput.value = info.dateStr;\n            } else {\n                console.error(\"El input con ID 'start' no se encontró.\");\n            }\n\n            // Antes de mostrar el modal, asegúrate de limpiar previamente las selecciones de habitaciones\n            if (choices) {\n                choices.clearChoices();\n            }\n\n            MyModal.show();\n        }\n\n        // Configuración de event listeners\n        function setupEventListeners() {\n            let btnNuevaReservacion = document.querySelector('#btnAgregarReservacion');\n            btnNuevaReservacion.addEventListener('click', function() {\n                MyModal.show();\n            });\n        }\n\n        // Cargar reservas desde el API\n        function loadReservations() {\n            fetch('http://localhost:3000/api/reservaciones')\n                .then(response => response.json())\n                .then(data => {\n                    data.forEach(reservacion => {\n                        const evento = {\n                            id: reservacion.ID_reserva,\n                            title: `${reservacion.habitaciones} | ${reservacion.cliente_nombre}`,\n                            start: reservacion.fecha_entrada,\n                            end: reservacion.fecha_salida,\n                            description: reservacion.estado_descripcion,\n                            allDay: false,\n                            color: reservacion.estado_color\n                        };\n                        calendar.addEvent(evento);\n                    });\n                })\n                .catch(error => console.error('Error al obtener las reservaciones:', error));\n        }\n\n        // Manejar clic en evento del calendario\n        async function handleEventClick(info, modal) {\n            const evento = info.event;\n            const idEvento = evento.id;\n\n            try {\n                const respuesta = await fetch(`/api/reservaciones/${idEvento}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener la reservación: ${respuesta.statusText}`);\n                }\n                const reservacion = await respuesta.json();\n                reservacionOriginal = { ...reservacion };\n                populateEditForm(reservacion);\n                await cargarHabitacionesDisponibles(reservacion.fecha_entrada.split(' ')[0], reservacion.fecha_salida.split(' ')[0], reservacion.ID_habitacion);\n\n                modal.show();\n\n            } catch (error) {\n                console.error('Error al obtener los datos de la reservación:', error);\n            }\n        }\n\n        // Población de formulario de edición\n        function populateEditForm(reservacion) {\n            document.getElementById('idReservacion').value = reservacion.ID_reserva;\n            document.getElementById('nombreEditar').value = reservacion.cliente_nombre;\n            document.getElementById('searchEmailEditar').value = reservacion.correo;\n            document.getElementById('apellidosEditar').value = reservacion.cliente_apellidos;\n            document.getElementById('documento_identidadEditar').value = reservacion.documento_identidad;\n            document.getElementById('telefonoEditar').value = reservacion.telefono;\n            document.getElementById('direccionEditar').value = reservacion.direccion;\n            document.getElementById('observacionesEditar').value = reservacion.observaciones;\n\n            let fechaEntrada = reservacion.fecha_entrada.split(' ')[0];\n            let fechaSalida = reservacion.fecha_salida.split(' ')[0];\n            document.getElementById('fechaEntradaEditar').value = fechaEntrada;\n            document.getElementById('fechaSalidaEditar').value = fechaSalida;\n            // Rellenar campos de pago\n            document.getElementById('adelantoEditar').value = reservacion.adelanto;\n            document.getElementById('cobroExtraEditar').value = reservacion.cobro_extra;\n\n            if (reservacion.tipo_descuento === \"PORCENTAJE\") {\n                let porcentajeDescuento = (reservacion.descuento_aplicado / reservacion.precio_total) * 100;\n                document.getElementById('descuentoEditar').value = porcentajeDescuento.toFixed(2);\n                document.getElementById('descuentoPorcentajeEditar').checked = true;\n                document.getElementById('descuentoMontoEditar').checked = false;\n            } else {\n                document.getElementById('descuentoEditar').value = reservacion.descuento_aplicado;\n                document.getElementById('descuentoMontoEditar').checked = true;\n                document.getElementById('descuentoPorcentajeEditar').checked = false;\n            }\n\n            document.getElementById('metodoPagoEditar').value = reservacion.metodo_pago;\n            document.getElementById('estatusEditar').value = reservacion.ID_estado;\n            document.getElementById('totalPagarEditar').value = reservacion.precio_pendiente;\n        }\n\n        // Cargar habitaciones disponibles\n        async function cargarHabitacionesDisponibles(fechaEntrada, fechaSalida, habitacionesSeleccionadasIds) {\n            const selectHabitacion = document.getElementById('habitacionEditar');\n\n            try {\n                const response = await fetch(`/api/habitaciones/disponibles/${fechaEntrada}/${fechaSalida}`);\n                let habitacionesDisponibles = await response.json();\n                \n                const habitacionesSeleccionadas = habitacionesSeleccionadasIds ? habitacionesSeleccionadasIds.split(',').map(id => id.trim()) : [];\n\n                const responseHabitaciones = await fetch('/api/habitaciones');\n                todasHabitaciones = await responseHabitaciones.json();\n\n                const habitacionesCompletasSeleccionadas = todasHabitaciones.filter(habitacion => habitacionesSeleccionadas.includes(habitacion.id.toString()));\n                habitacionesDisponibles = habitacionesDisponibles.filter(h => !habitacionesSeleccionadas.includes(h.id.toString()));\n\n                // Inicializa Choices solo si aún no está inicializado\n                if (!choices) {\n                    choices = new Choices(selectHabitacion, {\n                        removeItemButton: true,\n                        placeholder: true,\n                        placeholderValue: \"Seleccione una o más habitaciones\",\n                        searchEnabled: false,\n                    });\n                }\n\n                // Elimina las elecciones anteriores antes de agregar nuevas para evitar duplicados\n                choices.clearChoices();\n\n                let opciones = [];\n\n                // Mantén las habitaciones seleccionadas\n                habitacionesCompletasSeleccionadas.forEach(habitacion => {\n                    opciones.push({\n                        value: habitacion.id,\n                        label: `Habitación ${habitacion.numero} | ${habitacion.id_categoria.nombre} | Capacidad max. ${habitacion.id_categoria.capacidad_maxima} personas | $${habitacion.id_categoria.precio_base} MXN`,\n                        selected: true  // Marcar como seleccionada\n                    });\n                });\n\n                // Agrega habitaciones disponibles\n                habitacionesDisponibles.forEach(habitacion => {\n                    opciones.push({\n                        value: habitacion.id,\n                        label: `Habitación ${habitacion.numero} | ${habitacion.id_categoria.nombre} | Capacidad max. ${habitacion.id_categoria.capacidad_maxima} personas | $${habitacion.id_categoria.precio_base} MXN`\n                    });\n                });\n                // Elimina todas las opciones antes de agregar las nuevas\n                choices.clearStore();\n\n                // Establece las nuevas opciones\n                choices.setChoices(opciones);\n\n                // Calcular precio total cuando cambien las habitaciones seleccionadas o las fechas\n                calculateTotalPrice();\n\n                // Obtener habitaciones seleccionadas desde Choices\n                document.getElementById('habitacionEditar').addEventListener('change', function() {\n                    let habitacionesSeleccionadas = choices.getValue(true);\n                    //console.log('Habitaciones seleccionadas:', habitacionesSeleccionadas);\n                    calculateTotalPrice();\n                });\n\n                // Detectar cambio de fechas\n                document.getElementById('fechaEntradaEditar').addEventListener('change', function() {\n                    calculateTotalPrice();\n                });\n\n                document.getElementById('fechaSalidaEditar').addEventListener('change', function() {\n                    calculateTotalPrice();\n                });\n\n            } catch (error) {\n                console.error('Error al obtener habitaciones disponibles:', error);\n            }\n        }\n\n        // Calcular precio total\n        function calculateTotalPrice() {\n            const habitacionesSeleccionadas = choices.getValue(true);\n            const fechaEntrada = document.getElementById('fechaEntradaEditar').value;\n            const fechaSalida = document.getElementById('fechaSalidaEditar').value;\n\n            if (!fechaEntrada || !fechaSalida || habitacionesSeleccionadas.length === 0) {\n                return;\n            }\n\n            // Calcular la cantidad de noches\n            const fechaEntradaObj = new Date(fechaEntrada);\n            const fechaSalidaObj = new Date(fechaSalida);\n            const diferenciaEnTiempo = fechaSalidaObj - fechaEntradaObj;\n            const noches = diferenciaEnTiempo / (1000 * 3600 * 24); // Convertir a días\n\n            let totalPrice = 0;\n\n            // Obtener los precios de las habitaciones seleccionadas\n            habitacionesSeleccionadas.forEach(id => {\n                const habitacion = todasHabitaciones.find(h => h.id.toString() === id);\n                if (habitacion) {\n                    totalPrice += habitacion.id_categoria.precio_base * noches;\n                }\n            });\n            totalPriceBase = totalPrice;\n            // Ahora, ajustamos el total con base en los inputs de pago\n\n            // Obtener valores de inputs de pago\n            const adelanto = parseFloat(document.getElementById('adelantoEditar').value) || 0;\n            const cobroExtra = parseFloat(document.getElementById('cobroExtraEditar').value) || 0;\n\n            const descuento = parseFloat(document.getElementById('descuentoEditar').value) || 0;\n            const descuentoPorcentaje = document.getElementById('descuentoPorcentajeEditar').checked;\n\n            // Si el descuento es por porcentaje, aplicamos el porcentaje\n            if (descuentoPorcentaje) {\n                totalPrice -= (totalPrice * (descuento / 100));\n            } else {\n                totalPrice -= descuento;\n            }\n\n            // Sumamos el cobro extra y restamos el adelanto\n            totalPrice += cobroExtra;\n            totalPrice -= adelanto;\n\n            // Mostrar el precio final\n            console.log(`Precio total: $${totalPrice.toFixed(2)} MXN`);\n            const totalPagarInput = document.getElementById('totalPagarEditar');\n            totalPagarInput.value = totalPrice.toFixed(2);\n        }\n\n        // Función para actualizar el precio cada vez que se cambien los campos de pago\n        function setupEventListenersForPriceUpdates() {\n            // Escuchar cambios en los inputs de fecha, adelanto, cobro extra y descuento\n            document.getElementById('fechaEntradaEditar').addEventListener('change', calculateTotalPrice);\n            document.getElementById('fechaSalidaEditar').addEventListener('change', calculateTotalPrice);\n            document.getElementById('adelantoEditar').addEventListener('input', calculateTotalPrice);\n            document.getElementById('cobroExtraEditar').addEventListener('input', calculateTotalPrice);\n            document.getElementById('descuentoEditar').addEventListener('input', calculateTotalPrice);\n            document.getElementById('descuentoPorcentajeEditar').addEventListener('change', calculateTotalPrice);\n            document.getElementById('descuentoMontoEditar').addEventListener('change', calculateTotalPrice);\n        }\n\n        // Llamamos la función de setup para los listeners\n        setupEventListenersForPriceUpdates();\n\n        document.getElementById('btnEditar').addEventListener('click', async function (e) {\n            e.preventDefault();\n        \n            const reservacionId = document.getElementById('idReservacion').value;\n        \n            const reservacionActualizada = {\n                cliente: {\n                    correo: document.getElementById('searchEmailEditar').value.trim(),\n                    nombre: document.getElementById('nombreEditar').value.trim(),\n                    apellidos: document.getElementById('apellidosEditar').value.trim(),\n                    documento_identidad: document.getElementById('documento_identidadEditar').value.trim(),\n                    telefono: document.getElementById('telefonoEditar').value.trim(),\n                    direccion: document.getElementById('direccionEditar').value.trim()\n                },\n                fechas: {\n                    entrada: `${document.getElementById('fechaEntradaEditar').value.trim()} 14:00:00`, // Hora manual\n                    salida: `${document.getElementById('fechaSalidaEditar').value.trim()} 12:00:00`   // Hora manual\n                },\n                habitaciones: choices.getValue(true), // Suponiendo que choices está correctamente inicializado\n                pago: {\n                    totalPagar: parseFloat(document.getElementById('totalPagarEditar').value.trim()) || 0,\n                    totalPagarOriginal: parseFloat(totalPriceBase || 0).toFixed(2), // Solo lo convierte a número y luego lo redondea\n                    descuento: document.getElementById('descuentoPorcentajeEditar').checked \n                        ? ((totalPriceBase || 0) * (parseFloat(document.getElementById('descuentoEditar').value.trim()) || 0)) / 100 \n                        : parseFloat(document.getElementById('descuentoEditar').value.trim()) || 0,\n                    tipoDescuento: document.getElementById('descuentoPorcentajeEditar').checked ? 'PORCENTAJE' : 'MONTO',\n                    cobroExtra: parseFloat(document.getElementById('cobroExtraEditar').value.trim()) || 0,\n                    adelanto: parseFloat(document.getElementById('adelantoEditar').value.trim()) || 0\n                },                \n                observaciones: document.getElementById('observacionesEditar').value.trim(),\n                metodo_pago: document.getElementById('metodoPagoEditar').value.trim(),\n                ID_estado: document.getElementById('estatusEditar').value\n            };\n\n            //console.log(reservacionActualizada);\n            //return;\n        \n            try {\n                // Mostrar spinner de carga\n                document.getElementById('loadingSpinner').classList.remove('d-none');\n        \n                const respuestaUpdate = await fetch(`/api/reservaciones/${reservacionId}`, {\n                    method: 'PATCH',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(reservacionActualizada)\n                });\n        \n                // Ocultar spinner\n                document.getElementById('loadingSpinner').classList.add('d-none');\n        \n                if (!respuestaUpdate.ok) {\n                    const errorData = await respuestaUpdate.json();\n                    throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n                }\n        \n                const resultado = await respuestaUpdate.json();\n                mostrarAlerta3(resultado.titulo, resultado.mensaje, resultado.tipo);\n        \n                // Cerrar modal\n                $('#modalEditar').modal('hide');\n        \n            } catch (error) {\n                console.error('Error al actualizar la reservación:', error);\n                mostrarAlerta('Error', error.message, 'error');\n            }\n        });                \n    });\n}\n"]}