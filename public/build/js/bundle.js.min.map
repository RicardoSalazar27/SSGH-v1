{"version":3,"sources":["Infohotel.js","auth.js","alertas.js","categorias.js","niveles.js","registro.js","usuarios.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","mostrarAlerta","titulo","mensaje","tipo","Swal","fire","icon","title","text","then","$","modal","reload","addEventListener","async","e","preventDefault","hotel","id","dataset","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","error","console","log","mostrarAlerta2","mensajeResultado","style","display","textContent","className","setTimeout","btniniciarSesion","event","usuario","email","password","autorizado","href","dataTable","dataTableInit","estatusDictionary","0","1","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","initDataTable","categorias","listarCategorias","length","llenarTabla","DataTable","response","status","ok","Error","tbody","innerHTML","categoria","index","estatus","estado","row","capacidad_maxima","tipo_cama","precio_base","servicios_incluidos","niveles","listarNiveles","nivel","numero","target","closest","nivelId","getAttribute","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirmed","nivelOriginal","statusText","querySelector","nivelActualizado","cambios","keys","metodo","respuestaUpdate","headers","Content-Type","JSON","stringify","errorData","message","nivelNuevo","btnCrear","nuevoUsuario","apellidos","password2","direccion","rolesDictionary","2","3","visible","usuarios","listarUsers","user","rol","rol_id","apellido","usuarioId","userId","src","usuarioActualizado","usuarioNuevo","test"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                id: btnActualizarInfo.dataset.id, \n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = '/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                                \n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide');\n            location.reload(); // Recarga la página automáticamente\n        });\n    }        \n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n}","// src/js/alertas.js\n(function() {\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); \n        });\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block';\n        mensajeResultado.textContent = mensaje;\n\n        mensajeResultado.className = `alert alert-${tipo === 'error' ? 'danger' : tipo === 'success' ? 'success' : 'info'}`;\n\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n\n    // Hacerlas accesibles globalmente\n    window.mostrarAlerta = mostrarAlerta;\n    window.mostrarAlerta2 = mostrarAlerta2;\n})();\n","if(window.location.pathname === '/admin/configuracion/categorias'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const categorias = await listarCategorias(); // Esperamos los datos antes de inicializar DataTable\n\n        if (categorias.length > 0) {\n            llenarTabla(categorias);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_categorias').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarCategorias() {\n        try {\n            const response = await fetch('/api/categorias');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener categorías:', error);\n            return null;\n        }\n    }    \n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(categorias) {\n        const tbody = document.getElementById('tableBody_categorias');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        categorias.forEach((categoria, index) => {\n            const estatus = estatusDictionary[categoria.estado] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${categoria.nombre}</td>\n                    <td class=\"text-center\">${categoria.capacidad_maxima}</td>\n                    <td>${categoria.tipo_cama}</td>\n                    <td>${categoria.precio_base}</td>\n                    <td>${categoria.servicios_incluidos}</td>\n                    <td>${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCategoria\" \n                            data-id=\"${categoria.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCategoria\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCategoria\" data-id=\"${categoria.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n}","if(window.location.pathname === '/admin/configuracion/niveles'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const niveles = await listarNiveles(); // Esperamos los datos antes de inicializar DataTable\n\n        if (niveles.length > 0) {\n            llenarTabla(niveles);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_niveles').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarNiveles() {\n        try {\n            const response = await fetch('/api/niveles');\n            const niveles = await response.json();\n            return niveles;\n        } catch (error) {\n            console.error('Error al obtener niveles:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(niveles) {\n        const tbody = document.getElementById('tableBody_niveles');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        niveles.forEach((nivel, index) => {\n            const estatus = estatusDictionary[nivel.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${nivel.nombre}</td>\n                    <td>${nivel.numero}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarNivel\" \n                            data-id=\"${nivel.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarNivel\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarNivel\" data-id=\"${nivel.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de usuarios\n    document.getElementById('tableBody_niveles').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarNivel')) {\n            const nivelId = event.target.closest('.btn-eliminarNivel').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/niveles/${nivelId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n    \n    // Variable global para almacenar el nivel original\n    let nivelOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarNivel')) {\n            const boton = event.target.closest('.btnEditarNivel');\n            const nivelId = boton.dataset.id;\n            nivelOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/niveles/${nivelId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener nivel: ${respuesta.statusText}`);\n                }\n                const nivel = await respuesta.json();\n                nivelOriginal = { ...nivel }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del nivel\n                document.getElementById('nombreEditar').value = nivel.nombre;\n                document.getElementById('numeroEditar').value = nivel.numero;\n                document.getElementById('estatusEditar').value = nivel.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarNivel').dataset.id = nivelId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del nivel:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR NIVEL -----------------\n    document.getElementById('formEditarNivel').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const nivelId = document.querySelector('.btnActualizarNivel').dataset.id;\n\n        const nivelActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            numero: document.getElementById('numeroEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n        };\n\n        if (!nivelOriginal) {\n            console.error('Error: No hay datos originales del nivel');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (nivelActualizado.nombre !== nivelOriginal.nombre) cambios.nombre = nivelActualizado.nombre;\n        if (nivelActualizado.numero !== nivelOriginal.numero) cambios.numero = nivelActualizado.numero;\n        if (nivelActualizado.estatus !== nivelOriginal.estatus) cambios.estatus = nivelActualizado.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 3 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? nivelActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/niveles/${nivelId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n    \n    \n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirNivel = document.querySelector('.btnSubirNivel');\n    botonSubirNivel.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const nivelNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            numero: document.getElementById('numero').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        };\n\n        if (nivelNuevo.nombre === \"\" || nivelNuevo.numero === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(nivelNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/niveles', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('numero').value = '';\n            document.getElementById('estatus').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    // function mostrarAlerta(titulo, mensaje, tipo) {\n    //     Swal.fire({\n    //         icon: tipo,\n    //         title: titulo,\n    //         text: mensaje,\n    //     }).then(() => {\n    //         $('.modal').modal('hide'); // Cierra todos los modales activos\n    //     });\n    // }    \n\n    // function mostrarAlerta2(mensaje, tipo) {\n    //     const mensajeResultado = document.getElementById('mensaje-resultado');\n    //     mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n    //     mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n    //     // Cambiar el color de fondo del contenedor según el tipo de mensaje\n    //     if (tipo === 'error') {\n    //         mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n    //     } else if (tipo === 'success') {\n    //         mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n    //     } else {\n    //         mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n    //     }\n    \n    //     // Opcional: Ocultar el mensaje después de 5 segundos\n    //     setTimeout(() => {\n    //         mensajeResultado.style.display = 'none';\n    //     }, 5000);\n    // }\n    \n}\n","if (window.location.pathname === '/admin/usuarios') {\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td><img src=\"/build/img/${user.img}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>${user.telefono}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña en opciones de la tabla -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarUsuario\" \n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuarioEditarModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de usuarios\n    document.getElementById('tableBody_users').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarUsuario')) {\n            const usuarioId = event.target.closest('.btn-eliminarUsuario').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/usuarios/${usuarioId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarUsuario')) {\n            const boton = event.target.closest('.btnEditarUsuario');\n            const userId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/usuarios/${userId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const usuario = await respuesta.json();\n                // Llenar los campos del modal con los datos del usuario\n                document.getElementById('nombreEditar').value = usuario.nombre;\n                document.getElementById('apellidoEditar').value = usuario.apellido;\n                document.getElementById('direccionEditar').value = usuario.direccion;\n                document.getElementById('emailEditar').value = usuario.email;\n                document.getElementById('telefonoEditar').value = usuario.telefono;\n                document.getElementById('rol_idEditar').value = usuario.rol_id;\n                document.getElementById('estatusEditar').value = usuario.estatus;\n    \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditar');\n                imgElement.src = usuario.img ? `/build/img/${usuario.img}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarUsuario').dataset.id = userId;\n    \n                // Abrir el modal manualmente si es necesario\n                $('#usuarioEditarModal').modal('show');\n    \n            } catch (error) {\n                console.error('Error al obtener los datos del usuario:', error);\n            }\n        }\n    });\n    \n    // ---------------    ACTUALIZAR USUARIO     - ----------------\n    document.getElementById('formEditarUsuario').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const userId = document.querySelector('.btnActualizarUsuario').dataset.id;\n    \n        const usuarioActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            apellido: document.getElementById('apellidoEditar').value.trim(),\n            direccion: document.getElementById('direccionEditar').value.trim(),\n            email: document.getElementById('emailEditar').value.trim(),\n            telefono: document.getElementById('telefonoEditar').value.trim(),\n            password: document.getElementById('passwordEditar').value.trim(),\n            password2: document.getElementById('password2Editar').value.trim(),\n            rol_id: document.getElementById('rol_idEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n            img: document.getElementById('logoEditar').files[0]\n        };\n    \n        if (usuarioActualizado.password !== usuarioActualizado.password2) {\n            mostrarAlerta('Error', 'Las contraseñas no coinciden.', 'error');\n            return;\n        }\n\n        if (usuarioActualizado.telefono.length > 10) {\n            mostrarAlerta('Error', 'Telefono no valido', 'error');\n            return;\n        }\n    \n        delete usuarioActualizado.password2; // No enviar password2 al backend\n    \n        try {\n            const datos = new FormData();\n            Object.entries(usuarioActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/usuarios/${userId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar usuario:', error);\n        }\n    });\n\n    //  --------------    CREAR NUEVO USUARIO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const usuarioNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellido: document.getElementById('apellido').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            email: document.getElementById('email').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            password: document.getElementById('password').value.trim(),\n            password2: document.getElementById('password2').value.trim(),\n            rol_id: document.getElementById('rol_id').value.trim(),\n            estatus: document.getElementById('estatus').value.trim(),\n            img: document.getElementById('logo').files[0]\n        };\n\n        if (usuarioNuevo.email === \"\" || usuarioNuevo.nombre === \"\" || usuarioNuevo.direccion === \"\" || usuarioNuevo.password === \"\" || usuarioNuevo.password2 === \"\" || usuarioNuevo.telefono === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (usuarioNuevo.password !== usuarioNuevo.password2) {\n            mostrarAlerta2(\"Las contraseñas no coinciden.\", \"error\");\n            return;\n        }\n\n        if (usuarioNuevo.telefono.length > 10) {\n            mostrarAlerta2('Telefono no valido', 'error');\n            return;\n        }\n\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(usuarioNuevo.email)) {\n            mostrarAlerta2(\"El correo electrónico no tiene un formato válido.\", \"error\");\n            return;\n        }\n\n        delete usuarioNuevo.password2;\n\n        try {\n            const datos = new FormData();\n            Object.entries(usuarioNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/usuarios', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n    \n}"]}