{"version":3,"sources":["auth.js","registro.js"],"names":["window","location","pathname","btniniciarSesion","document","getElementById","mostrarAlerta2","mensaje","tipo","mensajeResultado","style","display","textContent","className","setTimeout","addEventListener","async","event","preventDefault","usuario","email","value","trim","password","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","autorizado","href","error","console","log","btnCrear","mostrarAlerta","titulo","Swal","fire","icon","title","text","then","$","modal","nuevoUsuario","nombre","apellidos","password2","telefono","direccion"],"mappings":"AAAA,GAAA,WAAAA,OAAAC,SAAAC,SAAA,CACA,MAAAC,EAAAC,SAAAC,eAAA,oBAwCA,SAAAC,eAAAC,EAAAC,GACA,MAAAC,EAAAL,SAAAC,eAAA,qBACAI,EAAAC,MAAAC,QAAA,QACAF,EAAAG,YAAAL,EAIAE,EAAAI,UADA,UAAAL,EACA,qBACA,YAAAA,EACA,sBAEA,mBAIAM,WAAA,KACAL,EAAAC,MAAAC,QAAA,QACA,KAvDAR,GACAA,EAAAY,iBAAA,SAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAAC,EAAA,CACAC,MAAAhB,SAAAC,eAAA,SAAAgB,MAAAC,OACAC,SAAAnB,SAAAC,eAAA,YAAAgB,MAAAC,QAGA,GAAA,KAAAH,EAAAC,OAAA,KAAAD,EAAAI,SAKA,IAEA,MAAAC,EAAA,IAAAC,SACAC,OAAAC,QAAAR,GAAAS,QAAA,EAAAC,EAAAR,KAAAG,EAAAM,OAAAD,EAAAR,IACA,MAAAU,EAAA,8BACAC,QAAAC,MAAAF,EAAA,CACAG,OAAA,OACAC,KAAAX,IAIAY,QAAAJ,EAAAK,OACAD,EAAAE,WACAtC,OAAAC,SAAAsC,KAAA,eAEAjC,eAAA8B,EAAA7B,QAAA6B,EAAA5B,MAGA,MAAAgC,GACAC,QAAAC,IAAAF,QAvBAlC,eAAA,oCAAA,YCbA,GAAA,cAAAN,OAAAC,SAAAC,SAAA,CAEA,MAAAyC,EAAAvC,SAAAC,eAAA,gBAmDA,SAAAuC,cAAAC,EAAAtC,EAAAC,GACAsC,KAAAC,KAAA,CACAC,KAAAxC,EACAyC,MAAAJ,EACAK,KAAA3C,IACA4C,KAAA,KACAC,EAAA,UAAAC,MAAA,UAIA,SAAA/C,eAAAC,EAAAC,GACA,MAAAC,EAAAL,SAAAC,eAAA,qBACAI,EAAAC,MAAAC,QAAA,QACAF,EAAAG,YAAAL,EAIAE,EAAAI,UADA,UAAAL,EACA,qBACA,YAAAA,EACA,sBAEA,mBAIAM,WAAA,KACAL,EAAAC,MAAAC,QAAA,QACA,KA5EAgC,GACAA,EAAA5B,iBAAA,SAAAC,eAAAC,GAEAA,EAAAC,iBAEA,MAAAoC,EAAA,CACAC,OAAAnD,SAAAC,eAAA,UAAAgB,MAAAC,OACAkC,UAAApD,SAAAC,eAAA,aAAAgB,MAAAC,OACAF,MAAAhB,SAAAC,eAAA,SAAAgB,MAAAC,OACAC,SAAAnB,SAAAC,eAAA,YAAAgB,MAAAC,OACAmC,UAAArD,SAAAC,eAAA,aAAAgB,MAAAC,OACAoC,SAAAtD,SAAAC,eAAA,YAAAgB,MAAAC,OACAqC,UAAAvD,SAAAC,eAAA,aAAAgB,MAAAC,QAGA,GAAA,KAAAgC,EAAAlC,OAAA,KAAAkC,EAAAC,QAAA,KAAAD,EAAAK,WAAA,KAAAL,EAAA/B,UAAA,KAAA+B,EAAAG,WAAA,KAAAH,EAAAI,SAKA,GAAAJ,EAAA/B,WAAA+B,EAAAG,UAAA,QAMAH,EAAAG,UAEA,IAEA,MAAAjC,EAAA,IAAAC,SACAC,OAAAC,QAAA2B,GAAA1B,QAAA,EAAAC,EAAAR,KAAAG,EAAAM,OAAAD,EAAAR,IACA,MAAAU,EAAA,iCACAC,QAAAC,MAAAF,EAAA,CACAG,OAAA,OACAC,KAAAX,IAIAY,QAAAJ,EAAAK,OACAO,cAAAR,EAAAS,OAAAT,EAAA7B,QAAA6B,EAAA5B,MAEA,MAAAgC,GACAC,QAAAC,IAAA,yBAAAF,SAtBAlC,eAAA,+BAAA,cALAA,eAAA,kCAAA","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n}","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); // Cierra todos los modales activos\n        });\n    }    \n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n    \n}\n"]}