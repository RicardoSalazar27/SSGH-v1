{"version":3,"sources":["Infohotel.js","auth.js","registro.js","usuarios.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","mostrarAlerta","titulo","mensaje","tipo","Swal","fire","icon","title","text","then","$","modal","reload","addEventListener","async","e","preventDefault","hotel","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","error","console","log","btniniciarSesion","mostrarAlerta2","mensajeResultado","style","display","textContent","className","setTimeout","event","usuario","email","password","autorizado","href","btnCrear","nuevoUsuario","apellidos","password2","direccion","dataTable","dataTableInit","rolesDictionary","1","2","3","estatusDictionary","0","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","visible","initDataTable","usuarios","listarUsers","length","llenarTabla","DataTable","response","tbody","innerHTML","user","index","rol","rol_id","estatus","row","apellido","id","target","closest","botonSubirUsuario","querySelector","classList","replace","cargarDatosUsuario","getAttribute","contains","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","result","isConfirmed","confirmarEliminacion","ok","llenarModal"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo)\n\n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide');\n            location.reload(); // Recarga la página automáticamente\n        });\n    }        \n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n}","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); // Cierra todos los modales activos\n        });\n    }    \n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n    \n}\n","if (window.location.pathname === '/admin/usuarios') {\n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [5] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btn-editarUsuario\"\n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuariosModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n\n        tbody.addEventListener('click', function(e){\n            //Delegacion para actualizar el cliente\n            if( e.target.closest('.btn-editarUsuario') ){\n                // Cambiar la clase del botón para que sea de 'Actualizar' y no de 'Crear'\n                const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n                if ( botonSubirUsuario ){\n                    botonSubirUsuario.classList.replace('btnSubirUsuario','btnActualizarUsuario');\n                }\n\n                const usuarioId = e.target.closest('.btn-editarUsuario').getAttribute('data-id');\n                cargarDatosUsuario(usuarioId); //Llama a la funcion de cargar los datos\n            }\n            if (e.target.classList.contains('btn-eliminarUsuario')) {\n                const usuarioId = e.target.getAttribute('data-id');\n                confirmarEliminacion(usuarioId);\n            }            \n        })\n\n        async function confirmarEliminacion(id) {\n            Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            }).then(async (result) => {\n                if (result.isConfirmed) {\n                    try {\n                        const url = `http://localhost:3000/api/usuarios/${id}`; // 🔥 Aquí se inyecta el ID en la URL\n        \n                        const respuesta = await fetch(url, {\n                            method: 'DELETE',  // 🔥 Método DELETE para eliminar\n                        });\n        \n                        const resultado = await respuesta.json();\n                        mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n        \n                        if (resultado.tipo === 'success') {\n                            await initDataTable(); // Recarga la tabla de clientes\n                        }\n                    } catch (error) {\n                        console.error(error);\n                    }\n                }\n            });\n        }        \n    }\n\n    async function cargarDatosUsuario(id){\n        try {\n\n            const url = `http://localhost:3000/api/usuarios/${id}`;\n            const resultado = await fetch(url);\n\n            if( resultado.ok ) {\n                const usuario = await resultado.json();\n                llenarModal(usuario);\n            }\n\n            function llenarModal(usuario) {\n                document.getElementById('nombre').value = usuario.nombre;\n                document.getElementById('apellido').value = usuario.apellido;\n                document.getElementById('direccion').value = usuario.direccion;\n                document.getElementById('email').value = usuario.email;\n                document.getElementById('rol_id').value = usuario.rol_id;\n            }   \n            \n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); // Cierra todos los modales activos\n        });\n    }    \n}\n"]}