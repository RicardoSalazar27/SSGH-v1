{"version":3,"sources":["Infohotel.js","auth.js","registro.js","usuarios.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","mostrarAlerta","titulo","mensaje","tipo","Swal","fire","icon","title","text","then","$","modal","reload","addEventListener","async","e","preventDefault","hotel","id","dataset","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","error","console","log","btniniciarSesion","mostrarAlerta2","mensajeResultado","style","display","textContent","className","setTimeout","event","usuario","email","password","autorizado","href","btnCrear","nuevoUsuario","apellidos","password2","direccion","dataTable","dataTableInit","rolesDictionary","1","2","3","estatusDictionary","0","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","visible","initDataTable","usuarios","listarUsers","length","llenarTabla","DataTable","response","tbody","innerHTML","user","index","rol","rol_id","estatus","row","apellido","querySelectorAll","boton","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","result","isConfirmed","confirmarEliminacion","this","getAttribute","target","closest","userId","ok","Error","statusText","src","querySelector","usuarioActualizado","usuarioNuevo","test"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                id: btnActualizarInfo.dataset.id, \n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = '/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                                \n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide');\n            location.reload(); // Recarga la página automáticamente\n        });\n    }        \n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n}","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); // Cierra todos los modales activos\n        });\n    }    \n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n    \n}\n","if (window.location.pathname === '/admin/usuarios') {\n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td><img src=\"/build/img/${user.img}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>${user.telefono}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña en opciones de la tabla -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            id=\"btnEditarUsuario\" \n                            class=\"btn btn-sm btn-primary btnEditarUsuario\" \n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuarioEditarModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n\n        // -----------------    ELIMINAR USUARIO     -----------------------------\n        const botonesEliminar = document.querySelectorAll('.btn-eliminarUsuario');\n        botonesEliminar.forEach(boton => {\n            boton.addEventListener('click', function (e) {\n                const usuarioId = this.getAttribute('data-id');\n                confirmarEliminacion(usuarioId);\n            });\n        });\n\n        async function confirmarEliminacion(id) {\n            Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            }).then(async (result) => {\n                if (result.isConfirmed) {\n                    try {\n                        const url = `/api/usuarios/${id}`;\n                        const respuesta = await fetch(url, {\n                            method: 'DELETE',\n                        });\n\n                        const resultado = await respuesta.json();\n                        mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                        if (resultado.tipo === 'success') {\n                            await initDataTable();\n                        }\n                    } catch (error) {\n                        console.error(error);\n                    }\n                }\n            });\n        } // --------- TERMINA ELIMINAR USUARIO  ------------\n\n\n        // ------------------   LLENAR MODAL PARA ACTUALIZAR    -----------------\n        document.addEventListener('click', async function (event) {\n            if (event.target.closest('.btnEditarUsuario')) {\n                const boton = event.target.closest('.btnEditarUsuario');\n                const userId = boton.dataset.id;\n                \n                try {\n                    // Obtener los datos del usuario desde la API o una variable global\n                    const respuesta = await fetch(`/api/usuarios/${userId}`);\n                    if (!respuesta.ok) {\n                        throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                    }\n        \n                    const usuario = await respuesta.json();\n                    // Llenar los campos del modal con los datos del usuario\n                    document.getElementById('nombreEditar').value = usuario.nombre;\n                    document.getElementById('apellidoEditar').value = usuario.apellido;\n                    document.getElementById('direccionEditar').value = usuario.direccion;\n                    document.getElementById('emailEditar').value = usuario.email;\n                    document.getElementById('telefonoEditar').value = usuario.telefono;\n                    document.getElementById('rol_idEditar').value = usuario.rol_id;\n                    document.getElementById('estatusEditar').value = usuario.estatus;\n        \n                    // Mostrar la imagen si existe\n                    const imgElement = document.getElementById('imgEditar');\n                    imgElement.src = usuario.img ? `/build/img/${usuario.img}.png` : '/build/img/default.png';                    \n        \n                    // Guardar el ID en el botón de actualización\n                    document.querySelector('.btnActualizarUsuario').dataset.id = userId;\n        \n                    // Abrir el modal manualmente si es necesario\n                    $('#usuarioEditarModal').modal('show');\n        \n                } catch (error) {\n                    console.error('Error al obtener los datos del usuario:', error);\n                }\n            }\n        });\n        \n        // ------------------ ACTUALIZAR USUARIO -----------------\n        document.getElementById('formEditarUsuario').addEventListener('submit', async function (e) {\n            e.preventDefault();\n        \n            const userId = document.querySelector('.btnActualizarUsuario').dataset.id;\n        \n            const usuarioActualizado = {\n                nombre: document.getElementById('nombreEditar').value.trim(),\n                apellido: document.getElementById('apellidoEditar').value.trim(),\n                direccion: document.getElementById('direccionEditar').value.trim(),\n                email: document.getElementById('emailEditar').value.trim(),\n                telefono: document.getElementById('telefonoEditar').value.trim(),\n                password: document.getElementById('passwordEditar').value.trim(),\n                password2: document.getElementById('password2Editar').value.trim(),\n                rol_id: document.getElementById('rol_idEditar').value.trim(),\n                estatus: document.getElementById('estatusEditar').value.trim(),\n                img: document.getElementById('logoEditar').files[0]\n            };\n        \n            if (!userId) {\n                mostrarAlerta('Error', 'No se encontró el ID del usuario.', 'error');\n                return;\n            }\n        \n            if (usuarioActualizado.password !== usuarioActualizado.password2) {\n                mostrarAlerta('Error', 'Las contraseñas no coinciden.', 'error');\n                return;\n            }\n        \n            delete usuarioActualizado.password2; // No enviar password2 al backend\n        \n            try {\n                const datos = new FormData();\n                Object.entries(usuarioActualizado).forEach(([key, value]) => datos.append(key, value));\n                const respuesta = await fetch(`/api/usuarios/${userId}`, {\n                    method: 'POST',\n                    body: datos\n                });\n        \n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                initDataTable();\n        \n            } catch (error) {\n                console.error('Error al actualizar usuario:', error);\n            }\n        });        \n    }\n\n    //  ------------- CREAR NUEVO USUARIO  ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const usuarioNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellido: document.getElementById('apellido').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            email: document.getElementById('email').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            password: document.getElementById('password').value.trim(),\n            password2: document.getElementById('password2').value.trim(),\n            rol_id: document.getElementById('rol_id').value.trim(),\n            estatus: document.getElementById('estatus').value.trim(),\n            img: document.getElementById('logo').files[0]\n        };\n\n        if (usuarioNuevo.email === \"\" || usuarioNuevo.nombre === \"\" || usuarioNuevo.direccion === \"\" || usuarioNuevo.password === \"\" || usuarioNuevo.password2 === \"\" || usuarioNuevo.telefono === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (usuarioNuevo.password !== usuarioNuevo.password2) {\n            mostrarAlerta2(\"Las contraseñas no coinciden.\", \"error\");\n            return;\n        }\n\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(usuarioNuevo.email)) {\n            mostrarAlerta2(\"El correo electrónico no tiene un formato válido.\", \"error\");\n            return;\n        }\n\n        delete usuarioNuevo.password2;\n\n        try {\n            const datos = new FormData();\n            Object.entries(usuarioNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/usuarios', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n    // ------------------ TERMINA CREACION DE USUARIO --------------------\n\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); // Cierra todos los modales activos\n        });\n    }\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n        mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n        // Cambiar el color de fondo del contenedor según el tipo de mensaje\n        if (tipo === 'error') {\n            mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n        } else if (tipo === 'success') {\n            mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n        } else {\n            mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n        }\n    \n        // Opcional: Ocultar el mensaje después de 5 segundos\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n}"]}