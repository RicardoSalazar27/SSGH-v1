{"version":3,"sources":["Infohotel.js","auth.js","alertas.js","catalogo_productos.js","categorias.js","clientes.js","habitaciones.js","niveles.js","registro.js","usuarios.js","reservaciones.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","mostrarAlerta","titulo","mensaje","tipo","Swal","fire","icon","title","text","then","$","modal","reload","addEventListener","async","e","preventDefault","hotel","id","dataset","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","error","console","log","mostrarAlerta2","mensajeResultado","style","display","textContent","className","setTimeout","btniniciarSesion","event","usuario","email","password","autorizado","href","dataTable","dataTableInit","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","initDataTable","productos","listarProductos","length","llenarTabla","DataTable","response","tbody","innerHTML","producto","index","row","precio","stock","categoria_producto_id","codigo_barras","proveedor","foto","target","closest","productoId","ok","Error","statusText","src","querySelector","productoActualizado","inputFile","parentNode","replaceChild","cloneNode","getAttribute","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirmed","productoNuevo","estatusDictionary","0","1","categorias","listarCategorias","status","categoria","estatus","estado","capacidad_maxima","tipo_cama","precio_base","servicios_incluidos","categoriaId","categoriaOriginal","categoriaActualizada","cambios","keys","metodo","headers","Content-Type","JSON","stringify","errorData","respuestaUpdate","message","categoriaNueva","clientes","listarClientes","cliente","apellidos","direccion","documento_identidad","clienteOriginal","clientesId","clienteId","clienteActualizado","habitaciones","listarhabitaciones","habitacion","numero","id_nivel","id_categoria","detalles_personalizados","habitacionId","habitacionOriginal","habitacionActualizada","habitacionNueva","niveles","listarNiveles","nivel","nivelId","nivelOriginal","nivelActualizado","nivelNuevo","btnCrear","nuevoUsuario","password2","calendarEl","modalElement","MyModal","bootstrap","Modal","FullCalendar","Calendar","locale","initialView","headerToolbar","left","center","right","buttonText","today","prev","next","month","week","day","list","allDayText","dateClick","info","startInput","dateStr","show","render","querySelectorAll","button","hide","rolesDictionary","2","3","visible","usuarios","listarUsers","user","rol","rol_id","apellido","usuarioId","userId","usuarioActualizado","usuarioNuevo","test"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                id: btnActualizarInfo.dataset.id, \n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = '/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                                \n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide');\n            location.reload(); // Recarga la página automáticamente\n        });\n    }        \n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n}","// src/js/alertas.js\n(function() {\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); \n        });\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block';\n        mensajeResultado.textContent = mensaje;\n\n        mensajeResultado.className = `alert alert-${tipo === 'error' ? 'danger' : tipo === 'success' ? 'success' : 'info'}`;\n\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n\n    // Hacerlas accesibles globalmente\n    window.mostrarAlerta = mostrarAlerta;\n    window.mostrarAlerta2 = mostrarAlerta2;\n})();\n","if(window.location.pathname === '/admin/puntodeventa/catalogo'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const productos = await listarProductos(); // Esperamos los datos antes de inicializar DataTable\n\n        if (productos.length > 0) {\n            llenarTabla(productos);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_productos').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarProductos() {\n        try {\n            const response = await fetch('/api/productos');\n            const productos = await response.json();\n            return productos;\n        } catch (error) {\n            console.error('Error al obtener los productos:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(productos) {\n\n        const tbody = document.getElementById('tableBody_productos');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n        //console.log(productos);\n\n        productos.forEach((producto, index) => {\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${producto.nombre}</td>\n                    <td>${producto.precio}</td>\n                    <td class=\"text-center\">${producto.stock}</td>\n                    <td class=\"text-center\">${producto.categoria_producto_id.nombre}</td>\n                    <td class=\"text-center\">${producto.codigo_barras}</td>\n                    <td class=\"text-center\">${producto.proveedor}</td>\n                    <td><img src=\"/build/img/${producto.foto}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarProducto\" \n                            data-id=\"${producto.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarProducto\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarProducto\" data-id=\"${producto.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarProducto')) {\n            \n            const boton = event.target.closest('.btnEditarProducto');\n            const productoId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/productos/${productoId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const producto = await respuesta.json();\n                // Llenar los campos del modal con los datos del producto\n                document.getElementById('nombreEditar').value = producto.nombre;\n                document.getElementById('precioEditar').value = producto.precio;\n                document.getElementById('stockEditar').value = producto.stock;\n                document.getElementById('categoria_idEditar').value = producto.categoria_producto_id;\n                document.getElementById('codigo_barrasEditar').value = producto.codigo_barras;\n                document.getElementById('proveedorEditar').value = producto.proveedor;\n                \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditarP');\n                imgElement.src = producto.foto ? `/build/img/${producto.foto}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarProducto').dataset.id = productoId;\n        \n            } catch (error) {\n                console.error('Error al obtener los datos del producto:', error);\n            }\n        }\n    });\n\n    // ---------------    ACTUALIZAR PRODUCTO     -----------------\n    document.getElementById('formEditarProducto').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const productoId = document.querySelector('.btnActualizarProducto').dataset.id;\n    \n        const productoActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            precio: document.getElementById('precioEditar').value.trim(),\n            stock: document.getElementById('stockEditar').value.trim(),\n            categoria_producto_id: document.getElementById('categoria_idEditar').value.trim(),\n            codigo_barras: document.getElementById('codigo_barrasEditar').value.trim(),\n            proveedor: document.getElementById('proveedorEditar').value.trim(),\n            foto: document.getElementById('fotoP').files[0]\n        };\n\n        //console.log(productoActualizado);\n        //  return;\n    \n        if (!productoActualizado.nombre || !productoActualizado.precio || !productoActualizado.categoria_producto_id) {\n            mostrarAlerta('Error', 'No pueden ir vacios.', 'error');\n            return;\n        }\n\n        try {\n            const datos = new FormData();\n            Object.entries(productoActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/productos/${productoId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            const inputFile = document.getElementById('fotoP');\n            inputFile.value = ''; // Intenta resetear primero\n            if (inputFile.value) { \n                inputFile.parentNode.replaceChild(inputFile.cloneNode(true), inputFile);\n            }\n\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar producto:', error);\n        }\n    });\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_productos').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarProducto')) {\n            const productoId = event.target.closest('.btn-eliminarProducto').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/productos/${productoId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    //  --------------    CREAR NUEVO PRODUCTO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirProducto');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n        // alert('click');\n        // return;\n\n        const productoNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            precio: document.getElementById('precio').value.trim(),\n            stock: document.getElementById('stock').value.trim(),\n            categoria_producto_id: document.getElementById('categoria_id').value.trim(),\n            codigo_barras: document.getElementById('codigo_barras').value.trim(),\n            proveedor: document.getElementById('proveedor').value.trim(),\n            foto: document.getElementById('fotoPN').files[0]\n        };\n\n        // console.log(productoNuevo);\n        // return;\n\n        if (productoNuevo.nombre === \"\" || productoNuevo.precio === \"\" || productoNuevo.stock === \"\" || productoNuevo.categoria_producto_id === \"\" || productoNuevo.codigo_barras === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (productoNuevo.codigo_barras.length != 12) {\n            mostrarAlerta2('Codigo UPC INvalido', 'error');\n            return;\n        }\n\n        try {\n            const datos = new FormData();\n            Object.entries(productoNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/productos', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if(window.location.pathname === '/admin/configuracion/categorias'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const categorias = await listarCategorias(); // Esperamos los datos antes de inicializar DataTable\n\n        if (categorias.length > 0) {\n            llenarTabla(categorias);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_categorias').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarCategorias() {\n        try {\n            const response = await fetch('/api/categorias');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener categorías:', error);\n            return null;\n        }\n    }\n    \n    // Delegación de eventos para eliminación de categorias\n    document.getElementById('tableBody_categorias').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCategoria')) {\n            const categoriaId = event.target.closest('.btn-eliminarCategoria').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/categorias/${categoriaId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(categorias) {\n        const tbody = document.getElementById('tableBody_categorias');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        categorias.forEach((categoria, index) => {\n            const estatus = estatusDictionary[categoria.estado] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${categoria.nombre}</td>\n                    <td class=\"text-center\">${categoria.capacidad_maxima}</td>\n                    <td>${categoria.tipo_cama}</td>\n                    <td>${categoria.precio_base}</td>\n                    <td>${categoria.servicios_incluidos}</td>\n                    <td>${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCategoria\" \n                            data-id=\"${categoria.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCategoria\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCategoria\" data-id=\"${categoria.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar la categoria original\n    let categoriaOriginal = null;\n\n    // ---------------------------    LLENAR MODAL PARA ACTUALIZAR    ------------------------------\n    document.addEventListener('click', async function (e) {\n        if(e.target.closest('.btnEditarCategoria')) { //boton editar que abre modal\n            const boton = e.target.closest('.btnEditarCategoria');\n            const categoriaId = boton.dataset.id;\n            categoriaOriginal = null;\n\n            try {\n                \n                // Obtener datos de la categoria desde la API\n                const url = `/api/categorias/${categoriaId}`;\n                const respuesta = await fetch(url);\n                if(!respuesta.ok){\n                    throw new Error(`Error al obtener categoria: ${respuesta.statusText}`);\n                }\n                const categoria = await respuesta.json();\n                categoriaOriginal = { ...categoria }; // Guarda en la variable global\n\n                // Llenar campos del modal con los datos de la categoria\n                document.getElementById('nombreEditar').value = categoria.nombre;\n                document.getElementById('capacidad_maximaEditar').value = categoria.capacidad_maxima;\n                document.getElementById('tipo_camaEditar').value = categoria.tipo_cama;\n                document.getElementById('precio_baseEditar').value = categoria.precio_base;\n                document.getElementById('servicios_incluidosEditar').value = categoria.servicios_incluidos;\n                document.getElementById('estadoEditar').value = categoria.estado;\n\n                // Guardar el ID de la categoria en el botón de actualización\n                document.querySelector('.btnActualizarCategoria').dataset.id = categoriaId;\n\n            } catch (error) {\n                console.log('Error al obtener los datos de la categoria:', error);\n            }\n        }\n    });\n\n    // ------------------------     ACTUALIZAR CATEGORIA    ------------------------\n    document.getElementById('formEditarCategoria').addEventListener('submit', async function (e) {\n\n        e.preventDefault();\n\n        const categoriaId = document.querySelector('.btnActualizarCategoria').dataset.id;\n\n        const categoriaActualizada = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maximaEditar').value.trim(),\n            tipo_cama: document.getElementById('tipo_camaEditar').value.trim(),\n            precio_base: document.getElementById('precio_baseEditar').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidosEditar').value.trim(),\n            estado: document.getElementById('estadoEditar').value.trim()\n        }\n\n        if (!categoriaOriginal) {\n            console.error('Error: No hay datos originales de la categoria');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        //Comparar con los datos originales\n        let cambios = {};\n        if (categoriaActualizada.nombre !== categoriaOriginal.nombre) cambios.nombre = categoriaActualizada.nombre;\n        if (categoriaActualizada.capacidad_maxima !== categoriaOriginal.capacidad_maxima) cambios.capacidad_maxima = categoriaActualizada.capacidad_maxima;\n        if (categoriaActualizada.tipo_cama !== categoriaOriginal.tipo_cama) cambios.tipo_cama = categoriaActualizada.tipo_cama;\n        if (categoriaActualizada.precio_base !== categoriaOriginal.precio_base) cambios.precio_base = categoriaActualizada.precio_base;\n        if (categoriaActualizada.servicios_incluidos !== categoriaOriginal.servicios_incluidos) cambios.servicios_incluidos = categoriaActualizada.servicios_incluidos;\n        if (categoriaActualizada.estado !== categoriaOriginal.estado) cambios.estado = categoriaActualizada.estado;\n\n        // Si no hay cambios, no se envia la peticion\n        if(Object.keys(cambios).length === 0){\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si es PUT O PATCH\n        const metodo = Object.keys(cambios).length === 6 ? 'PUT' : 'PATCH';\n        const datos = metodo === 'PUT' ? categoriaActualizada : cambios;\n\n        try {\n            // Enviar la actualizacion al servidor\n            const url = `/api/categorias/${categoriaId}`;\n            const respuesta = await fetch(url, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if(!respuesta.ok){\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n            \n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirCategoria = document.querySelector('.btnSubirCategoria');\n    botonSubirCategoria.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const categoriaNueva = {\n            nombre: document.getElementById('nombre').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maxima').value.trim(),\n            tipo_cama: document.getElementById('tipo_cama').value.trim(),\n            precio_base: document.getElementById('precio_base').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidos').value.trim(),\n            estado: document.getElementById('estado').value.trim()\n        };\n\n        if (categoriaNueva.nombre === \"\" || categoriaNueva.capacidad_maxima === \"\" || categoriaNueva.tipo_cama === \"\" || categoriaNueva.precio_base === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(categoriaNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/categorias', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('capacidad_maxima').value = '';\n            document.getElementById('tipo_cama').value = '';\n            document.getElementById('servicios_incluidos').value = '';\n            document.getElementById('precio_base').value = '';\n            document.getElementById('estatado').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if(window.location.pathname === '/admin/clientes'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [6,7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const clientes = await listarClientes(); // Esperamos los datos antes de inicializar DataTable\n\n        if (clientes.length > 0) {\n            llenarTabla(clientes);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_clientes').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarClientes() {\n        try {\n            const response = await fetch('/api/clientes');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener clientes:', error);\n            return null;\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(clientes) {\n        const tbody = document.getElementById('tableBody_clientes');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        clientes.forEach((cliente, index) => {\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${cliente.nombre}</td>\n                    <td>${cliente.apellidos}</td>\n                    <td>${cliente.telefono}</td>\n                    <td>${cliente.correo}</td>\n                    <td>${cliente.direccion}</td>\n                    <td>${cliente.documento_identidad}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCliente\" \n                            data-id=\"${cliente.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCliente\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCliente\" data-id=\"${cliente.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar el nivel original\n    let clienteOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarCliente')) {\n            const boton = event.target.closest('.btnEditarCliente');\n            const clientesId = boton.dataset.id;\n            clienteOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/clientes/${clientesId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener cliente: ${respuesta.statusText}`);\n                }\n                const cliente = await respuesta.json();\n                clienteOriginal = { ...cliente }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del cliente\n                document.getElementById('nombre').value = cliente.nombre;\n                document.getElementById('apellidos').value = cliente.apellidos;\n                document.getElementById('direccion').value = cliente.direccion;\n                document.getElementById('correo').value = cliente.correo;\n                document.getElementById('telefono').value = cliente.telefono;\n                document.getElementById('documento_identidad').value = cliente.documento_identidad;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarCliente').dataset.id = clientesId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del cliente:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR CLIENTE -----------------\n    document.getElementById('formEditarCliente').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const clienteId = document.querySelector('.btnActualizarCliente').dataset.id;\n\n        const clienteActualizado = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellidos: document.getElementById('apellidos').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            correo: document.getElementById('correo').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            documento_identidad: document.getElementById('documento_identidad').value.trim()\n        };\n\n        if (!clienteOriginal) {\n            console.error('Error: No hay datos originales del cliente');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (clienteActualizado.nombre !== clienteOriginal.nombre) cambios.nombre = clienteActualizado.nombre;\n        if (clienteActualizado.apellidos !== clienteOriginal.apellidos) cambios.apellidos = clienteActualizado.apellidos;\n        if (clienteActualizado.telefono !== clienteOriginal.telefono) cambios.telefono = clienteActualizado.telefono;\n        if (clienteActualizado.correo !== clienteOriginal.correo) cambios.correo = clienteActualizado.correo;\n        if (clienteActualizado.direccion !== clienteOriginal.direccion) cambios.direccion = clienteActualizado.direccion;\n        if (clienteActualizado.documento_identidad !== clienteOriginal.documento_identidad) cambios.documento_identidad = clienteActualizado.documento_identidad;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 6 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? clienteActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/clientes/${clienteId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar cliente:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    // Delegación de eventos para eliminación de clientes\n    document.getElementById('tableBody_clientes').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCliente')) {\n            const clienteId = event.target.closest('.btn-eliminarCliente').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/clientes/${clienteId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n}","if(window.location.pathname === '/admin/configuracion/habitaciones'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const habitaciones = await listarhabitaciones(); // Esperamos los datos antes de inicializar DataTable\n\n        if (habitaciones.length > 0) {\n            llenarTabla(habitaciones);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_habitaciones').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarhabitaciones() {\n        try {\n            const response = await fetch('/api/habitaciones');\n            const habitaciones = await response.json();\n            return habitaciones;\n        } catch (error) {\n            console.error('Error al obtener habitaciones:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(habitaciones) {\n        const tbody = document.getElementById('tableBody_habitaciones');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        habitaciones.forEach((habitacion) => {\n            const estatus = estatusDictionary[habitacion.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${habitacion.numero}</td>\n                    <td>${habitacion.id_nivel.nombre}</td>\n                    <td>${habitacion.id_categoria.nombre}</td>\n                    <td>${habitacion.id_categoria.precio_base}</td>\n                    <td>${habitacion.id_categoria.servicios_incluidos}</td>\n                    <td>${habitacion.detalles_personalizados}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarHabitacion\" \n                            data-id=\"${habitacion.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarHabitacion\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarHabitacion\" data-id=\"${habitacion.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_habitaciones').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarHabitacion')) {\n            const habitacionId = event.target.closest('.btn-eliminarHabitacion').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/habitaciones/${habitacionId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n\n    // Variable global para almacenar el habitacion original\n    let habitacionOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarHabitacion')) {\n            const boton = event.target.closest('.btnEditarHabitacion');\n            const habitacionId = boton.dataset.id;\n            habitacionOriginal = '';\n    \n            try {\n                const respuesta = await fetch(`/api/habitaciones/${habitacionId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener habitación: ${respuesta.statusText}`);\n                }\n                const habitacion = await respuesta.json();\n                console.log(habitacion);\n    \n                habitacionOriginal = { ...habitacion }; // Guardar en variable global\n    \n                // Llenar los campos del modal con los datos de la habitación\n                document.getElementById('numeroEditar').value = habitacion.numero;\n                document.getElementById('id_nivelEditar').value = habitacion.id_nivel.id; // Aquí se asigna el ID del habitacion\n                document.getElementById('id_categoriaEditar').value = habitacion.id_categoria.id; // Aquí el ID de la categoría\n                document.getElementById('detalles_personalizadosEditar').value = habitacion.detalles_personalizados;\n                document.getElementById('estatusEditar').value = habitacion.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarHabitacion').dataset.id = habitacionId;\n    \n            } catch (error) {\n                console.error('Error al obtener los datos de la habitación:', error);\n            }\n        }\n    });\n    \n    // --------------- ACTUALIZAR HABITACION -----------------\n    document.getElementById('formEditarHabitacion').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const habitacionId = document.querySelector('.btnActualizarHabitacion').dataset.id;\n\n        const habitacionActualizada = {\n            numero: document.getElementById('numeroEditar').value.trim(),\n            id_nivel: document.getElementById('id_nivelEditar').value.trim(),\n            id_categoria: document.getElementById('id_categoriaEditar').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizadosEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim()\n        };\n\n        // console.log(habitacionActualizada);\n        // return;\n\n        if (!habitacionOriginal) {\n            console.error('Error: No hay datos originales del habitacion');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (habitacionActualizada.numero !== habitacionOriginal.numero) cambios.numero = habitacionActualizada.numero;\n        if (habitacionActualizada.id_nivel !== habitacionOriginal.id_nivel) cambios.id_nivel = habitacionActualizada.id_nivel;\n        if (habitacionActualizada.id_categoria !== habitacionOriginal.id_categoria) cambios.id_categoria = habitacionActualizada.id_categoria;\n        if (habitacionActualizada.detalles_personalizados !== habitacionOriginal.detalles_personalizados) cambios.detalles_personalizados = habitacionActualizada.detalles_personalizados;\n        if (habitacionActualizada.estatus !== habitacionOriginal.estatus) cambios.estatus = habitacionActualizada.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n        const datos = habitacionActualizada;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/habitaciones/${habitacionId}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar habitacion:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------     CREAR NUEVa HABITACION     ----------------\n    const botonSubirHabitacion = document.querySelector('.btnSubirHabitacion');\n    botonSubirHabitacion.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const habitacionNueva = {\n\n            numero: document.getElementById('numero').value.trim(),\n            id_nivel: document.getElementById('id_nivel').value.trim(),\n            id_categoria: document.getElementById('id_categoria').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizados').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        \n        };\n\n        if (habitacionNueva.id_nivel === \"\" || habitacionNueva.numero === \"\" || habitacionNueva.id_categoria === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(habitacionNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/habitaciones', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario después de crear una habitación\n            document.getElementById('numero').value = '';\n            document.getElementById('detalles_personalizados').value = '';\n            document.getElementById('estatus').value = '1';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n\n}\n","if(window.location.pathname === '/admin/configuracion/niveles'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const niveles = await listarNiveles(); // Esperamos los datos antes de inicializar DataTable\n\n        if (niveles.length > 0) {\n            llenarTabla(niveles);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_niveles').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarNiveles() {\n        try {\n            const response = await fetch('/api/niveles');\n            const niveles = await response.json();\n            return niveles;\n        } catch (error) {\n            console.error('Error al obtener niveles:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(niveles) {\n        const tbody = document.getElementById('tableBody_niveles');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        niveles.forEach((nivel, index) => {\n            const estatus = estatusDictionary[nivel.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${nivel.nombre}</td>\n                    <td>${nivel.numero}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarNivel\" \n                            data-id=\"${nivel.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarNivel\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarNivel\" data-id=\"${nivel.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_niveles').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarNivel')) {\n            const nivelId = event.target.closest('.btn-eliminarNivel').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/niveles/${nivelId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n    \n    // Variable global para almacenar el nivel original\n    let nivelOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarNivel')) {\n            const boton = event.target.closest('.btnEditarNivel');\n            const nivelId = boton.dataset.id;\n            nivelOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/niveles/${nivelId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener nivel: ${respuesta.statusText}`);\n                }\n                const nivel = await respuesta.json();\n                nivelOriginal = { ...nivel }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del nivel\n                document.getElementById('nombreEditar').value = nivel.nombre;\n                document.getElementById('numeroEditar').value = nivel.numero;\n                document.getElementById('estatusEditar').value = nivel.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarNivel').dataset.id = nivelId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del nivel:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR NIVEL -----------------\n    document.getElementById('formEditarNivel').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const nivelId = document.querySelector('.btnActualizarNivel').dataset.id;\n\n        const nivelActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            numero: document.getElementById('numeroEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n        };\n\n        if (!nivelOriginal) {\n            console.error('Error: No hay datos originales del nivel');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (nivelActualizado.nombre !== nivelOriginal.nombre) cambios.nombre = nivelActualizado.nombre;\n        if (nivelActualizado.numero !== nivelOriginal.numero) cambios.numero = nivelActualizado.numero;\n        if (nivelActualizado.estatus !== nivelOriginal.estatus) cambios.estatus = nivelActualizado.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 3 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? nivelActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/niveles/${nivelId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n    \n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirNivel = document.querySelector('.btnSubirNivel');\n    botonSubirNivel.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const nivelNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            numero: document.getElementById('numero').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        };\n\n        if (nivelNuevo.nombre === \"\" || nivelNuevo.numero === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(nivelNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/niveles', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('numero').value = '';\n            document.getElementById('estatus').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    // function mostrarAlerta(titulo, mensaje, tipo) {\n    //     Swal.fire({\n    //         icon: tipo,\n    //         title: titulo,\n    //         text: mensaje,\n    //     }).then(() => {\n    //         $('.modal').modal('hide'); // Cierra todos los modales activos\n    //     });\n    // }    \n\n    // function mostrarAlerta2(mensaje, tipo) {\n    //     const mensajeResultado = document.getElementById('mensaje-resultado');\n    //     mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n    //     mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n    //     // Cambiar el color de fondo del contenedor según el tipo de mensaje\n    //     if (tipo === 'error') {\n    //         mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n    //     } else if (tipo === 'success') {\n    //         mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n    //     } else {\n    //         mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n    //     }\n    \n    //     // Opcional: Ocultar el mensaje después de 5 segundos\n    //     setTimeout(() => {\n    //         mensajeResultado.style.display = 'none';\n    //     }, 5000);\n    // }\n    \n}\n","if (window.location.pathname === '/admin/usuarios') {\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td><img src=\"/build/img/${user.img}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>${user.telefono}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña en opciones de la tabla -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarUsuario\" \n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuarioEditarModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de usuarios\n    document.getElementById('tableBody_users').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarUsuario')) {\n            const usuarioId = event.target.closest('.btn-eliminarUsuario').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/usuarios/${usuarioId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarUsuario')) {\n            const boton = event.target.closest('.btnEditarUsuario');\n            const userId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/usuarios/${userId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const usuario = await respuesta.json();\n                // Llenar los campos del modal con los datos del usuario\n                document.getElementById('nombreEditar').value = usuario.nombre;\n                document.getElementById('apellidoEditar').value = usuario.apellido;\n                document.getElementById('direccionEditar').value = usuario.direccion;\n                document.getElementById('emailEditar').value = usuario.email;\n                document.getElementById('telefonoEditar').value = usuario.telefono;\n                document.getElementById('rol_idEditar').value = usuario.rol_id;\n                document.getElementById('estatusEditar').value = usuario.estatus;\n    \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditar');\n                imgElement.src = usuario.img ? `/build/img/${usuario.img}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarUsuario').dataset.id = userId;\n    \n                // Abrir el modal manualmente si es necesario\n                $('#usuarioEditarModal').modal('show');\n    \n            } catch (error) {\n                console.error('Error al obtener los datos del usuario:', error);\n            }\n        }\n    });\n    \n    // ---------------    ACTUALIZAR USUARIO     - ----------------\n    document.getElementById('formEditarUsuario').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const userId = document.querySelector('.btnActualizarUsuario').dataset.id;\n    \n        const usuarioActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            apellido: document.getElementById('apellidoEditar').value.trim(),\n            direccion: document.getElementById('direccionEditar').value.trim(),\n            email: document.getElementById('emailEditar').value.trim(),\n            telefono: document.getElementById('telefonoEditar').value.trim(),\n            password: document.getElementById('passwordEditar').value.trim(),\n            password2: document.getElementById('password2Editar').value.trim(),\n            rol_id: document.getElementById('rol_idEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n            img: document.getElementById('logoEditar').files[0]\n        };\n    \n        if (usuarioActualizado.password !== usuarioActualizado.password2) {\n            mostrarAlerta('Error', 'Las contraseñas no coinciden.', 'error');\n            return;\n        }\n\n        if (usuarioActualizado.telefono.length > 10) {\n            mostrarAlerta('Error', 'Telefono no valido', 'error');\n            return;\n        }\n    \n        delete usuarioActualizado.password2; // No enviar password2 al backend\n    \n        try {\n            const datos = new FormData();\n            Object.entries(usuarioActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/usuarios/${userId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar usuario:', error);\n        }\n    });\n\n    //  --------------    CREAR NUEVO USUARIO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const usuarioNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellido: document.getElementById('apellido').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            email: document.getElementById('email').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            password: document.getElementById('password').value.trim(),\n            password2: document.getElementById('password2').value.trim(),\n            rol_id: document.getElementById('rol_id').value.trim(),\n            estatus: document.getElementById('estatus').value.trim(),\n            img: document.getElementById('logo').files[0]\n        };\n\n        if (usuarioNuevo.email === \"\" || usuarioNuevo.nombre === \"\" || usuarioNuevo.direccion === \"\" || usuarioNuevo.password === \"\" || usuarioNuevo.password2 === \"\" || usuarioNuevo.telefono === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (usuarioNuevo.password !== usuarioNuevo.password2) {\n            mostrarAlerta2(\"Las contraseñas no coinciden.\", \"error\");\n            return;\n        }\n\n        if (usuarioNuevo.telefono.length > 10) {\n            mostrarAlerta2('Telefono no valido', 'error');\n            return;\n        }\n\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(usuarioNuevo.email)) {\n            mostrarAlerta2(\"El correo electrónico no tiene un formato válido.\", \"error\");\n            return;\n        }\n\n        delete usuarioNuevo.password2;\n\n        try {\n            const datos = new FormData();\n            Object.entries(usuarioNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/usuarios', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n    \n}","if (window.location.pathname === '/admin/reservaciones') {\n    document.addEventListener('DOMContentLoaded', function () {\n        // Verificar que FullCalendar esté disponible\n        var calendarEl = document.getElementById('calendar');\n        \n        // Inicializar Modal de Bootstrap\n        var modalElement = document.getElementById('modalReservacion');\n        var MyModal = new bootstrap.Modal(modalElement);\n\n        // Inicializar FullCalendar\n        var calendar = new FullCalendar.Calendar(calendarEl, {\n            locale: 'es',  // Establece el idioma a español\n            initialView: 'dayGridMonth',\n            headerToolbar: {\n                left: 'prev,next today',\n                center: 'title',\n                right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n            },\n            buttonText: {\n                today: 'Hoy',\n                prev: 'Anterior',\n                next: 'Siguiente',\n                month: 'Mes',\n                week: 'Semana',\n                day: 'Día',\n                list: 'Lista',\n            },\n            allDayText: 'Todo el día',\n            dateClick: function (info) {\n                var startInput = document.getElementById('start');\n                if (startInput) {\n                    startInput.value = info.dateStr; // Asignar la fecha seleccionada al input\n                } else {\n                    console.error(\"El input con ID 'start' no se encontró.\");\n                }\n                MyModal.show(); // Mostrar el modal\n            }\n        });\n\n        // Renderizar el calendario\n        calendar.render();\n\n        // Funcionalidad para cerrar el modal mediante los botones\n        var closeModalButtons = document.querySelectorAll('[data-close=\"modal\"]'); // Seleccionar botones de cierre\n        closeModalButtons.forEach(function (button) {\n            button.addEventListener('click', function () {\n                MyModal.hide(); // Ocultar el modal\n            });\n        });\n\n        // Cuando en vez de seleccionar por fecha, usas el boton para crear una nueva reservacion\n        let btnNuevaReservacion = document.querySelector('#btnAgregarReservacion');\n        btnNuevaReservacion.addEventListener('click', function() {\n            MyModal.show(); // Mostrar el modal al hacer clic en el botón\n        });\n    });\n}\n"]}