{"version":3,"sources":["Infohotel.js","auth.js","alertas.js","catalogo_productos.js","categorias.js","checkout.js","clientes.js","habitaciones.js","dashboard.js","niveles.js","procesarventadirecta.js","procesarventareserva.js","recepcion.js","recepcionhabitacion.js","registro.js","reservaciones.js","usuarios.js","reservacionesdahs.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","mostrarAlerta","titulo","mensaje","tipo","Swal","fire","icon","title","text","then","$","modal","reload","addEventListener","async","e","preventDefault","hotel","id","dataset","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","error","console","log","urlRedireccion","href","mostrarAlerta2","mensajeResultado","style","display","textContent","className","setTimeout","mostrarAlerta3","willClose","obtenerFechaFormateada","fecha","Date","getFullYear","String","getMonth","padStart","getDate","getHours","getMinutes","getSeconds","btniniciarSesion","event","usuario","email","password","autorizado","dataTable","dataTableInit","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","initDataTable","productos","listarProductos","length","llenarTabla","DataTable","response","tbody","innerHTML","producto","index","row","precio","stock","categoria_producto_id","codigo_barras","proveedor","foto","target","closest","productoId","ok","Error","statusText","src","querySelector","productoActualizado","inputFile","parentNode","replaceChild","cloneNode","getAttribute","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirmed","productoNuevo","estatusDictionary","0","1","categorias","listarCategorias","status","categoria","estatus","estado","capacidad_maxima","tipo_cama","precio_base","servicios_incluidos","categoriaId","categoriaOriginal","categoriaActualizada","cambios","keys","metodo","headers","Content-Type","JSON","stringify","errorData","respuestaUpdate","message","categoriaNueva","URLSearchParams","search","get","inputPenalidad","totalPagarElement","metodoPagoSelect","btnTerminarReservacion","grupoEfectivo","cantidadEfectivoInput","feriaCalculadaInput","totalOriginal","parseFloat","innerText","replace","totalActual","actualizarTotalYMetodoPago","penalidad","isNaN","toLocaleString","minimumFractionDigits","maximumFractionDigits","classList","add","remove","cantidad","feria","alert","clientes","listarClientes","cliente","apellidos","direccion","documento_identidad","clienteOriginal","clientesId","clienteId","clienteActualizado","barChart","ctx","getContext","periodoSelect","cargarDatos","periodo","actualizarGrafica","data","meses","labels","map","item","mes","ganancias","Chart","type","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","beginAtZero","this","habitaciones","listarhabitaciones","habitacion","numero","id_nivel","id_categoria","detalles_personalizados","habitacionId","habitacionOriginal","habitacionActualizada","habitacionNueva","niveles","listarNiveles","nivel","nivelId","nivelOriginal","nivelActualizado","nivelNuevo","inputBuscador","listaSugerencias","tablaVenta","metodoPago","cantidadEfectivo","feriaCalculada","inputTotalPagar","btnTerminarVenta","serviciosVendidos","productosDisponibles","total","renderSugerencias","Array","isArray","li","createElement","agregarProducto","limpiarLista","appendChild","precioUnitario","productoExistente","find","p","push","id_producto","actualizarTabla","servicio","fila","toFixed","agregarEventosEliminar","agregarEventosContador","calcularTotal","querySelectorAll","boton","codigoBarras","eliminarProducto","filter","btnSumar","btnRestar","btn","query","contains","totalRaw","Math","abs","ventas","reservacion_id","producto_id","monto","fecha_pago","tipo_pago","descripcion","idReserva","cuandoPagar","grupoMetodoPago","actualizarEstadoHabitacion","nuevoEstado","id_estado_habitacion","catch","result","undefined","inputCorreoCliente","inputNombreCliente","inputApellidosCliente","inputDocumentoCliente","inputTelefonoCliente","inputDireccionCliente","btnCrearCliente","inputNombreClienteNuevo","inputApellidosClienteNuevo","inputCorreoClienteNuevo","inputTelefonoClienteNuevo","inputDocumentoClienteNuevo","inputDireccionClienteNuevo","clienteNuevo","inputFechaEntrada","inputFechaSalida","inputTipoDescuento","inputDescuento","inputCobroExtra","inputAdelanto","precioHabitacion","inputMetodoPago","inputObservaciones","noches","totalPendiente","descuento","tipoDescuento","cobroExtra","adelanto","buscarClientes","encodeURIComponent","mostrarSugerencias","seleccionarCliente","calcularNoches","fechaEntrada","fechaSalida","calcularTotalPagar","tipoDescuentoSeleccionado","totalConDescuento","actualizarCalculo","input","radio","observaciones","idHabitacion","reserva","fechas","entrada","salida","pago","totalPagar","totalPagarOriginal","metodo_pago","formData","btnCrear","nuevoUsuario","password2","inputCorreo","selectHabitacion","btnSiguiente","btnAtras","btnConfirmar","totalPagarInput","descuentoInput","cobroExtraInput","adelantoInput","timeoutBusqueda","pasoActual","habitacionesDisponibles","habitacionesSeleccionadas","choices","Choices","removeItemButton","placeholder","placeholderValue","searchEnabled","guardarClienteNuevo","progressBar","actualizarBarraProgreso","porcentaje","width","setAttribute","cambiarPaso","nuevoPaso","toggle","cargarHabitaciones","clearChoices","setChoices","disabled","fechaEntradaDate","diferenciaNoches","h","resetearModal","habitacionesSelect","option","selected","inputNombre","inputTelefono","getValue","clearTimeout","valor","clienteFinal","datosReserva","jsonDatosReserva","calendarEl","modalElement","MyModal","bootstrap","Modal","todasHabitaciones","calendar","FullCalendar","Calendar","displayEventTime","locale","initialView","headerToolbar","left","center","right","buttonText","today","prev","next","month","week","day","list","allDayText","events","dateClick","info","startInput","dateStr","show","render","reservacion","evento","ID_reserva","cliente_nombre","start","fecha_entrada","end","fecha_salida","description","estado_descripcion","allDay","color","estado_color","addEvent","modalEditarReservacion","MyModalEditarReserva","reservacionOriginal","totalPriceBase","calculateTotalPrice","fechaEntradaObj","totalPrice","toString","descuentoPorcentaje","checked","on","idEvento","cliente_apellidos","split","cobro_extra","tipo_descuento","porcentajeDescuento","descuento_aplicado","precio_total","ID_estado","precio_pendiente","populateEditForm","habitacionesSeleccionadasIds","responseHabitaciones","habitacionesCompletasSeleccionadas","includes","opciones","clearStore","cargarHabitacionesDisponibles","ID_habitacion","handleEventClick","reservacionId","reservacionActualizada","rolesDictionary","2","3","visible","usuarios","listarUsers","user","rol","rol_id","apellido","usuarioId","userId","usuarioActualizado","usuarioNuevo","test"],"mappings":"AAAA,GAAA,qCAAAA,OAAAC,SAAAC,SAAA,CAEA,MAAAC,EAAAC,SAAAC,eAAA,qBAoCA,SAAAC,cAAAC,EAAAC,EAAAC,GACAC,KAAAC,KAAA,CACAC,KAAAH,EACAI,MAAAN,EACAO,KAAAN,IACAO,KAAA,KACAC,EAAA,UAAAC,MAAA,QACAhB,SAAAiB,WAzCAf,GACAA,EAAAgB,iBAAA,SAAAC,eAAAC,GACAA,EAAAC,iBAGA,MAAAC,EAAA,CACAC,GAAArB,EAAAsB,QAAAD,GACAE,OAAAtB,SAAAC,eAAA,UAAAsB,MAAAC,OACAC,SAAAzB,SAAAC,eAAA,YAAAsB,MAAAC,OACAE,OAAA1B,SAAAC,eAAA,UAAAsB,MAAAC,OACAG,UAAA3B,SAAAC,eAAA,aAAAsB,MAAAC,OACAI,IAAA5B,SAAAC,eAAA,QAAA4B,MAAA,IAGA,IAEA,MAAAC,EAAA,IAAAC,SACAC,OAAAC,QAAAd,GAAAe,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAc,EAAA,8CACAC,QAAAC,MAAAF,EAAA,CACAG,OAAA,OACAC,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MAEA,MAAAuC,GACAC,QAAAC,IAAA,aChCA,GCyDAlD,OAAAM,cAvDA,SAAAC,EAAAC,EAAAC,EAAA0C,EAAA,MACAzC,KAAAC,KAAA,CACAC,KAAAH,EACAI,MAAAN,EACAO,KAAAN,IACAO,KAAA,KACAC,EAAA,UAAAC,MAAA,QACAkC,IACAnD,OAAAC,SAAAmD,KAAAD,MAgDAnD,OAAAqD,eA3CA,SAAA7C,EAAAC,GACA,MAAA6C,EAAAlD,SAAAC,eAAA,qBACAiD,EAAAC,MAAAC,QAAA,QACAF,EAAAG,YAAAjD,EAEA8C,EAAAI,UAAA,gBAAA,UAAAjD,EAAA,SAAA,YAAAA,EAAA,UAAA,QAEAkD,WAAA,KACAL,EAAAC,MAAAC,QAAA,QACA,MAmCAxD,OAAA4D,eAhCA,SAAArD,EAAAC,EAAAC,GACAC,KAAAC,KAAA,CACAC,KAAAH,EACAI,MAAAN,EACAO,KAAAN,EACAqD,UAAA,KAEAF,WAAA,KACA3D,OAAAC,SAAAiB,UACA,QAEAH,KAAA,KACAC,EAAA,UAAAC,MAAA,WAqBAjB,OAAA8D,uBAjBA,WACA,MAAAC,EAAA,IAAAC,KAQA,MAAA,GAPAD,EAAAE,iBACAC,OAAAH,EAAAI,WAAA,GAAAC,SAAA,EAAA,QACAF,OAAAH,EAAAM,WAAAD,SAAA,EAAA,QACAF,OAAAH,EAAAO,YAAAF,SAAA,EAAA,QACAF,OAAAH,EAAAQ,cAAAH,SAAA,EAAA,QACAF,OAAAH,EAAAS,cAAAJ,SAAA,EAAA,QDlDA,WAAApE,OAAAC,SAAAC,SAAA,CACA,MAAAuE,EAAArE,SAAAC,eAAA,oBAEAoE,GACAA,EAAAtD,iBAAA,SAAAC,eAAAsD,GACAA,EAAApD,iBAEA,MAAAqD,EAAA,CACAC,MAAAxE,SAAAC,eAAA,SAAAsB,MAAAC,OACAiD,SAAAzE,SAAAC,eAAA,YAAAsB,MAAAC,QAGA,GAAA,KAAA+C,EAAAC,OAAA,KAAAD,EAAAE,SAKA,IAEA,MAAA3C,EAAA,IAAAC,SACAC,OAAAC,QAAAsC,GAAArC,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAc,EAAA,8BACAC,QAAAC,MAAAF,EAAA,CACAG,OAAA,OACAC,KAAAX,IAIAY,QAAAJ,EAAAK,OACAD,EAAAgC,WACA9E,OAAAC,SAAAmD,KAAA,eAEAC,eAAAP,EAAAtC,QAAAsC,EAAArC,MAGA,MAAAuC,GACAC,QAAAC,IAAAF,QAvBAK,eAAA,oCAAA,YEbA,GAAA,iCAAArD,OAAAC,SAAAC,SAAA,CAEA,IAAA6E,EACAC,GAAA,EAGA,MAAAC,EAAA,CACAC,SAAA,EACAC,WAAA,EACAC,SAAA,CACA3C,IAAA,6DAEA4C,IAAA,mOAGAC,WAAA,CACA,CAAAC,WAAA,EAAAC,QAAA,CAAA,MASApE,eAAAqE,gBACAT,GACAD,EAAAG,UAGA,MAAAQ,QAAAC,kBAEAD,EAAAE,OAAA,GACAC,YAAAH,GAIAX,EAAA/D,EAAA,wBAAA8E,UAAAb,GACAD,GAAA,EAIA5D,eAAAuE,kBACA,IACA,MAAAI,QAAApD,MAAA,kBAEA,aADAoD,EAAAhD,OAEA,MAAAC,GAEA,OADAC,QAAAD,MAAA,kCAAAA,GACA,IAKA,SAAA6C,YAAAH,GAEA,MAAAM,EAAA5F,SAAAC,eAAA,uBACA2F,EAAAC,UAAA,GAGAP,EAAApD,QAAA,CAAA4D,EAAAC,KAEA,MAAAC,EAAA,mDAEAD,EAAA,mCACAD,EAAAxE,wCACAwE,EAAAG,4DACAH,EAAAI,2DACAJ,EAAAK,sBAAA7E,4DACAwE,EAAAM,mEACAN,EAAAO,gEACAP,EAAAQ,wTAKAR,EAAA1E,kXAMA0E,EAAA1E,yKAMAwE,EAAAC,WAAAG,IAlEAX,gBAuEArF,SAAAe,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,sBAAA,CAEA,MACAC,EADAnC,EAAAiC,OAAAC,QAAA,sBACAnF,QAAAD,GAEA,IAEA,MAAAkB,QAAAC,MAAA,kBAAAkE,GACA,IAAAnE,EAAAoE,GACA,MAAA,IAAAC,MAAA,6BAAArE,EAAAsE,YAGA,MAAAd,QAAAxD,EAAAK,OAEA3C,SAAAC,eAAA,gBAAAsB,MAAAuE,EAAAxE,OACAtB,SAAAC,eAAA,gBAAAsB,MAAAuE,EAAAG,OACAjG,SAAAC,eAAA,eAAAsB,MAAAuE,EAAAI,MACAlG,SAAAC,eAAA,sBAAAsB,MAAAuE,EAAAK,sBACAnG,SAAAC,eAAA,uBAAAsB,MAAAuE,EAAAM,cACApG,SAAAC,eAAA,mBAAAsB,MAAAuE,EAAAO,UAGArG,SAAAC,eAAA,cACA4G,IAAAf,EAAAQ,KAAA,cAAAR,EAAAQ,WAAA,yBAGAtG,SAAA8G,cAAA,0BAAAzF,QAAAD,GAAAqF,EAEA,MAAA7D,GACAC,QAAAD,MAAA,2CAAAA,QAMA5C,SAAAC,eAAA,sBAAAc,iBAAA,UAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAAuF,EAAAzG,SAAA8G,cAAA,0BAAAzF,QAAAD,GAEA2F,EAAA,CACAzF,OAAAtB,SAAAC,eAAA,gBAAAsB,MAAAC,OACAyE,OAAAjG,SAAAC,eAAA,gBAAAsB,MAAAC,OACA0E,MAAAlG,SAAAC,eAAA,eAAAsB,MAAAC,OACA2E,sBAAAnG,SAAAC,eAAA,sBAAAsB,MAAAC,OACA4E,cAAApG,SAAAC,eAAA,uBAAAsB,MAAAC,OACA6E,UAAArG,SAAAC,eAAA,mBAAAsB,MAAAC,OACA8E,KAAAtG,SAAAC,eAAA,SAAA4B,MAAA,IAMA,GAAAkF,EAAAzF,QAAAyF,EAAAd,QAAAc,EAAAZ,sBAKA,IACA,MAAArE,EAAA,IAAAC,SACAC,OAAAC,QAAA8E,GAAA7E,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAe,QAAAC,MAAA,kBAAAkE,EAAA,CACAjE,OAAA,OACAC,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACA,MAAA2G,EAAAhH,SAAAC,eAAA,SACA+G,EAAAzF,MAAA,GACAyF,EAAAzF,OACAyF,EAAAC,WAAAC,aAAAF,EAAAG,WAAA,GAAAH,GAGA3B,gBAEA,MAAAzC,GACAC,QAAAD,MAAA,gCAAAA,QAvBA1C,cAAA,QAAA,uBAAA,YA4BAF,SAAAC,eAAA,uBAAAc,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,yBAAA,CACA,MAAAC,EAAAnC,EAAAiC,OAAAC,QAAA,yBAAAY,aAAA,WAYA,UAXA9G,KAAAC,KAAA,CACAE,MAAA,iBACAC,KAAA,oCACAF,KAAA,UACA6G,kBAAA,EACAC,mBAAA,OACAC,kBAAA,UACAC,kBAAA,eACAC,iBAAA,cAGAC,YACA,IACA,MAAArF,EAAA,kBAAAoE,EACAnE,QAAAC,MAAAF,EAAA,CACAG,OAAA,WAGAE,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MAEA,YAAAqC,EAAArC,YACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAAA,QAOA5C,SAAA8G,cAAA,qBACA/F,iBAAA,SAAAC,eAAAC,GACAA,EAAAC,iBAIA,MAAAyG,EAAA,CACArG,OAAAtB,SAAAC,eAAA,UAAAsB,MAAAC,OACAyE,OAAAjG,SAAAC,eAAA,UAAAsB,MAAAC,OACA0E,MAAAlG,SAAAC,eAAA,SAAAsB,MAAAC,OACA2E,sBAAAnG,SAAAC,eAAA,gBAAAsB,MAAAC,OACA4E,cAAApG,SAAAC,eAAA,iBAAAsB,MAAAC,OACA6E,UAAArG,SAAAC,eAAA,aAAAsB,MAAAC,OACA8E,KAAAtG,SAAAC,eAAA,UAAA4B,MAAA,IAMA,GAAA,KAAA8F,EAAArG,QAAA,KAAAqG,EAAA1B,QAAA,KAAA0B,EAAAzB,OAAA,KAAAyB,EAAAxB,uBAAA,KAAAwB,EAAAvB,cAKA,GAAA,IAAAuB,EAAAvB,cAAAZ,OAKA,IACA,MAAA1D,EAAA,IAAAC,SACAC,OAAAC,QAAA0F,GAAAzF,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAe,QAAAC,MAAA,iBAAA,CACAC,OAAA,OACAC,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAA,yBAAAA,QAjBAK,eAAA,sBAAA,cALAA,eAAA,kCAAA,YCvOA,GAAA,oCAAArD,OAAAC,SAAAC,SAAA,CAEA,IAAA6E,EACAC,GAAA,EAEA,MAAAgD,EAAA,CACAC,EAAA,WACAC,EAAA,UAIAjD,EAAA,CACAC,SAAA,EACAC,WAAA,EACAC,SAAA,CACA3C,IAAA,6DAEA4C,IAAA,mOAGAC,WAAA,CACA,CAAAC,WAAA,EAAAC,QAAA,CAAA,MASApE,eAAAqE,gBACAT,GACAD,EAAAG,UAGA,MAAAiD,QAAAC,mBAEAD,EAAAvC,OAAA,GACAC,YAAAsC,GAIApD,EAAA/D,EAAA,yBAAA8E,UAAAb,GACAD,GAAA,EAIA5D,eAAAgH,mBACA,IACA,MAAArC,QAAApD,MAAA,mBAEA,GAAA,MAAAoD,EAAAsC,OACA,MAAA,GAGA,IAAAtC,EAAAe,GACA,MAAA,IAAAC,MAAA,eAAAhB,EAAAsC,QAGA,aAAAtC,EAAAhD,OACA,MAAAC,GAEA,OADAC,QAAAD,MAAA,+BAAAA,GACA,MAwCA,SAAA6C,YAAAsC,GACA,MAAAnC,EAAA5F,SAAAC,eAAA,wBACA2F,EAAAC,UAAA,GAEAkC,EAAA7F,QAAA,CAAAgG,EAAAnC,KACA,MAAAoC,EAAAP,EAAAM,EAAAE,SAAA,cAEApC,EAAA,mDAEAD,EAAA,mCACAmC,EAAA5G,4DACA4G,EAAAG,kDACAH,EAAAI,2CACAJ,EAAAK,6CACAL,EAAAM,qDACAL,sQAKAD,EAAA9G,oXAMA8G,EAAA9G,yKAMAwE,EAAAC,WAAAG,IA3GAX,gBAwCArF,SAAAC,eAAA,wBAAAc,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,0BAAA,CACA,MAAAiC,EAAAnE,EAAAiC,OAAAC,QAAA,0BAAAY,aAAA,WAYA,UAXA9G,KAAAC,KAAA,CACAE,MAAA,iBACAC,KAAA,oCACAF,KAAA,UACA6G,kBAAA,EACAC,mBAAA,OACAC,kBAAA,UACAC,kBAAA,eACAC,iBAAA,cAGAC,YACA,IACA,MAAArF,EAAA,mBAAAoG,EACAnG,QAAAC,MAAAF,EAAA,CACAG,OAAA,WAGAE,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MAEA,YAAAqC,EAAArC,YACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAAA,QA4CA,IAAA8F,EAAA,KAGA1I,SAAAe,iBAAA,SAAAC,eAAAC,GACA,GAAAA,EAAAsF,OAAAC,QAAA,uBAAA,CACA,MACAiC,EADAxH,EAAAsF,OAAAC,QAAA,uBACAnF,QAAAD,GACAsH,EAAA,KAEA,IAGA,MAAArG,EAAA,mBAAAoG,EACAnG,QAAAC,MAAAF,GACA,IAAAC,EAAAoE,GACA,MAAA,IAAAC,MAAA,+BAAArE,EAAAsE,YAEA,MAAAsB,QAAA5F,EAAAK,OACA+F,EAAA,IAAAR,GAGAlI,SAAAC,eAAA,gBAAAsB,MAAA2G,EAAA5G,OACAtB,SAAAC,eAAA,0BAAAsB,MAAA2G,EAAAG,iBACArI,SAAAC,eAAA,mBAAAsB,MAAA2G,EAAAI,UACAtI,SAAAC,eAAA,qBAAAsB,MAAA2G,EAAAK,YACAvI,SAAAC,eAAA,6BAAAsB,MAAA2G,EAAAM,oBACAxI,SAAAC,eAAA,gBAAAsB,MAAA2G,EAAAE,OAGApI,SAAA8G,cAAA,2BAAAzF,QAAAD,GAAAqH,EAEA,MAAA7F,GACAC,QAAAC,IAAA,8CAAAF,QAMA5C,SAAAC,eAAA,uBAAAc,iBAAA,UAAAC,eAAAC,GAEAA,EAAAC,iBAEA,MAAAuH,EAAAzI,SAAA8G,cAAA,2BAAAzF,QAAAD,GAEAuH,EAAA,CACArH,OAAAtB,SAAAC,eAAA,gBAAAsB,MAAAC,OACA6G,iBAAArI,SAAAC,eAAA,0BAAAsB,MAAAC,OACA8G,UAAAtI,SAAAC,eAAA,mBAAAsB,MAAAC,OACA+G,YAAAvI,SAAAC,eAAA,qBAAAsB,MAAAC,OACAgH,oBAAAxI,SAAAC,eAAA,6BAAAsB,MAAAC,OACA4G,OAAApI,SAAAC,eAAA,gBAAAsB,MAAAC,QAGA,IAAAkH,EAGA,OAFA7F,QAAAD,MAAA,uDACA1C,cAAA,QAAA,+CAAA,SAKA,IAAA0I,EAAA,GASA,GARAD,EAAArH,SAAAoH,EAAApH,SAAAsH,EAAAtH,OAAAqH,EAAArH,QACAqH,EAAAN,mBAAAK,EAAAL,mBAAAO,EAAAP,iBAAAM,EAAAN,kBACAM,EAAAL,YAAAI,EAAAJ,YAAAM,EAAAN,UAAAK,EAAAL,WACAK,EAAAJ,cAAAG,EAAAH,cAAAK,EAAAL,YAAAI,EAAAJ,aACAI,EAAAH,sBAAAE,EAAAF,sBAAAI,EAAAJ,oBAAAG,EAAAH,qBACAG,EAAAP,SAAAM,EAAAN,SAAAQ,EAAAR,OAAAO,EAAAP,QAGA,IAAApG,OAAA6G,KAAAD,GAAApD,OAEA,YADAvC,eAAA,4BAAA,SAKA,MAAA6F,EAAA,IAAA9G,OAAA6G,KAAAD,GAAApD,OAAA,MAAA,QACA1D,EAAA,QAAAgH,EAAAH,EAAAC,EAEA,IAEA,MAAAvG,EAAA,mBAAAoG,EACAnG,QAAAC,MAAAF,EAAA,CACAG,OAAAsG,EACAC,QAAA,CACAC,eAAA,oBAEAvG,KAAAwG,KAAAC,UAAApH,KAGA,IAAAQ,EAAAoE,GAAA,CACA,MAAAyC,QAAAC,gBAAAzG,OACA,MAAA,IAAAgE,MAAAwC,EAAA/I,SAAA,mCAGA,MAAAsC,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAA,6BAAAA,GACA1C,cAAA,QAAA0C,EAAAyG,QAAA,aAKArJ,SAAA8G,cAAA,sBACA/F,iBAAA,SAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAAoI,EAAA,CACAhI,OAAAtB,SAAAC,eAAA,UAAAsB,MAAAC,OACA6G,iBAAArI,SAAAC,eAAA,oBAAAsB,MAAAC,OACA8G,UAAAtI,SAAAC,eAAA,aAAAsB,MAAAC,OACA+G,YAAAvI,SAAAC,eAAA,eAAAsB,MAAAC,OACAgH,oBAAAxI,SAAAC,eAAA,uBAAAsB,MAAAC,OACA4G,OAAApI,SAAAC,eAAA,UAAAsB,MAAAC,QAGA,GAAA,KAAA8H,EAAAhI,QAAA,KAAAgI,EAAAjB,kBAAA,KAAAiB,EAAAhB,WAAA,KAAAgB,EAAAf,YAKA,IACA,MAAAzG,EAAA,IAAAC,SACAC,OAAAC,QAAAqH,GAAApH,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAe,QAAAC,MAAA,kBAAA,CACAC,OAAA,OACAC,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAGArF,SAAAC,eAAA,UAAAsB,MAAA,GACAvB,SAAAC,eAAA,oBAAAsB,MAAA,GACAvB,SAAAC,eAAA,aAAAsB,MAAA,GACAvB,SAAAC,eAAA,uBAAAsB,MAAA,GACAvB,SAAAC,eAAA,eAAAsB,MAAA,GACAvB,SAAAC,eAAA,YAAAsB,MAAA,GAEA,MAAAqB,GACAC,QAAAD,MAAA,yBAAAA,QAzBAK,eAAA,kCAAA,YClQA,GAAA,4BAAArD,OAAAC,SAAAC,SAAA,CAEA,IAAAyJ,gBAAA3J,OAAAC,SAAA2J,QACAC,IAAA,MADA,MAIAC,EAAA1J,SAAAC,eAAA,kBACA0J,EAAA3J,SAAAC,eAAA,cACA2J,EAAA5J,SAAAC,eAAA,cACA4J,EAAA7J,SAAAC,eAAA,0BACA6J,EAAA9J,SAAAC,eAAA,iBACA8J,EAAA/J,SAAAC,eAAA,oBACA+J,EAAAhK,SAAAC,eAAA,kBAGAgK,EAAAC,WAAAP,EAAAQ,UAAAC,QAAA,KAAA,KACA,IAAAC,EAAAJ,EAGA,MAAAK,EAAA,KACA,IAAAC,EAAAL,WAAAR,EAAAnI,OACA8I,EAAAJ,EAEAO,MAAAD,KACAF,GAAAE,GAIAZ,EAAAQ,UAAAE,EAAAI,eAAA,QAAA,CACAC,sBAAA,EACAC,sBAAA,IAIAf,EAAAzG,MAAAC,QAAAiH,EAAA,EAAA,QAAA,OAGAA,GAAA,GACAP,EAAAc,UAAAC,IAAA,WAKAjB,EAAA7I,iBAAA,SAAA,KACA,aAAA6I,EAAArI,OAAA8I,EAAA,EACAP,EAAAc,UAAAE,OAAA,WAEAhB,EAAAc,UAAAC,IAAA,UACAd,EAAAxI,MAAA,GACAyI,EAAAzI,MAAA,MAKAwI,EAAAhJ,iBAAA,QAAA,KACA,MAAAgK,EAAAb,WAAAH,EAAAxI,OAEA,IAAAiJ,MAAAO,IAAAA,GAAAV,EAAA,CACA,MAAAW,EAAAD,EAAAV,EACAL,EAAAzI,MAAAyJ,EAAAP,eAAA,QAAA,CACAC,sBAAA,EACAC,sBAAA,SAGAX,EAAAzI,MAAA,KAKAsI,EAAA9I,iBAAA,SAAAC,eAAAC,GACA,GAAAoJ,EAAA,EAAA,CACA,GAAA,KAAAT,EAAArI,MAGA,OAFAN,EAAAC,sBACA+J,MAAA,4CAIA,GAAA,aAAArB,EAAArI,MAAA,CACA,MAAAwJ,EAAAb,WAAAH,EAAAxI,OACA,GAAAiJ,MAAAO,IAAAA,EAAAV,EAGA,OAFApJ,EAAAC,sBACA+J,MAAA,iEAKA,MAAA5I,EAAA,GACAP,EAAA,SACAS,MAAAF,EAAA,CACAG,OAAA,OACAC,KAAAX,UAMAS,MAFA,GAEA,CACAC,OAAA,OACAC,KAHA,QAQA6H,IACAZ,EAAA3I,iBAAA,QAAAuJ,GCxGA,GAAA,oBAAA1K,OAAAC,SAAAC,SAAA,CAEA,IAAA6E,EACAC,GAAA,EAGA,MAAAC,EAAA,CACAC,SAAA,EACAC,WAAA,EACAC,SAAA,CACA3C,IAAA,6DAEA4C,IAAA,mOAGAC,WAAA,CACA,CAAAC,WAAA,EAAAC,QAAA,CAAA,EAAA,MASApE,eAAAqE,gBACAT,GACAD,EAAAG,UAGA,MAAAoG,QAAAC,iBAEAD,EAAA1F,OAAA,GACAC,YAAAyF,GAIAvG,EAAA/D,EAAA,uBAAA8E,UAAAb,GACAD,GAAA,EAIA5D,eAAAmK,iBACA,IACA,MAAAxF,QAAApD,MAAA,iBAEA,GAAA,MAAAoD,EAAAsC,OACA,MAAA,GAGA,IAAAtC,EAAAe,GACA,MAAA,IAAAC,MAAA,eAAAhB,EAAAsC,QAGA,aAAAtC,EAAAhD,OACA,MAAAC,GAEA,OADAC,QAAAD,MAAA,6BAAAA,GACA,MAKA,SAAA6C,YAAAyF,GACA,MAAAtF,EAAA5F,SAAAC,eAAA,sBACA2F,EAAAC,UAAA,GAEAqF,EAAAhJ,QAAA,CAAAkJ,EAAArF,KACA,MAAAC,EAAA,mDAEAD,EAAA,mCACAqF,EAAA9J,wCACA8J,EAAAC,2CACAD,EAAA3J,0CACA2J,EAAA1J,wCACA0J,EAAAE,2CACAF,EAAAG,sRAKAH,EAAAhK,gXAMAgK,EAAAhK,yKAMAwE,EAAAC,WAAAG,IAtEAX,gBA2EA,IAAAmG,EAAA,KAGAxL,SAAAe,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,qBAAA,CACA,MACAiF,EADAnH,EAAAiC,OAAAC,QAAA,qBACAnF,QAAAD,GACAoK,EAAA,GACA,IAEA,MAAAlJ,QAAAC,MAAA,iBAAAkJ,GACA,IAAAnJ,EAAAoE,GACA,MAAA,IAAAC,MAAA,6BAAArE,EAAAsE,YAEA,MAAAwE,QAAA9I,EAAAK,OACA6I,EAAA,IAAAJ,GAGApL,SAAAC,eAAA,UAAAsB,MAAA6J,EAAA9J,OACAtB,SAAAC,eAAA,aAAAsB,MAAA6J,EAAAC,UACArL,SAAAC,eAAA,aAAAsB,MAAA6J,EAAAE,UACAtL,SAAAC,eAAA,UAAAsB,MAAA6J,EAAA1J,OACA1B,SAAAC,eAAA,YAAAsB,MAAA6J,EAAA3J,SACAzB,SAAAC,eAAA,uBAAAsB,MAAA6J,EAAAG,oBAGAvL,SAAA8G,cAAA,yBAAAzF,QAAAD,GAAAqK,EAEA,MAAA7I,GACAC,QAAAD,MAAA,0CAAAA,QAMA5C,SAAAC,eAAA,qBAAAc,iBAAA,UAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAAwK,EAAA1L,SAAA8G,cAAA,yBAAAzF,QAAAD,GAEAuK,EAAA,CACArK,OAAAtB,SAAAC,eAAA,UAAAsB,MAAAC,OACA6J,UAAArL,SAAAC,eAAA,aAAAsB,MAAAC,OACAC,SAAAzB,SAAAC,eAAA,YAAAsB,MAAAC,OACAE,OAAA1B,SAAAC,eAAA,UAAAsB,MAAAC,OACA8J,UAAAtL,SAAAC,eAAA,aAAAsB,MAAAC,OACA+J,oBAAAvL,SAAAC,eAAA,uBAAAsB,MAAAC,QAGA,IAAAgK,EAGA,OAFA3I,QAAAD,MAAA,mDACA1C,cAAA,QAAA,+CAAA,SAKA,IAAA0I,EAAA,GASA,GARA+C,EAAArK,SAAAkK,EAAAlK,SAAAsH,EAAAtH,OAAAqK,EAAArK,QACAqK,EAAAN,YAAAG,EAAAH,YAAAzC,EAAAyC,UAAAM,EAAAN,WACAM,EAAAlK,WAAA+J,EAAA/J,WAAAmH,EAAAnH,SAAAkK,EAAAlK,UACAkK,EAAAjK,SAAA8J,EAAA9J,SAAAkH,EAAAlH,OAAAiK,EAAAjK,QACAiK,EAAAL,YAAAE,EAAAF,YAAA1C,EAAA0C,UAAAK,EAAAL,WACAK,EAAAJ,sBAAAC,EAAAD,sBAAA3C,EAAA2C,oBAAAI,EAAAJ,qBAGA,IAAAvJ,OAAA6G,KAAAD,GAAApD,OAEA,YADAvC,eAAA,4BAAA,SAKA,MAAA6F,EAAA,IAAA9G,OAAA6G,KAAAD,GAAApD,OAAA,MAAA,QACA1D,EAAA,QAAAgH,EAAA6C,EAAA/C,EAEA,IAEA,MAAAQ,QAAA7G,MAAA,iBAAAmJ,EAAA,CACAlJ,OAAAsG,EACAC,QAAA,CACAC,eAAA,oBAEAvG,KAAAwG,KAAAC,UAAApH,KAGA,IAAAsH,EAAA1C,GAAA,CACA,MAAAyC,QAAAC,EAAAzG,OACA,MAAA,IAAAgE,MAAAwC,EAAA/I,SAAA,mCAGA,MAAAsC,QAAA0G,EAAAzG,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAA,+BAAAA,GACA1C,cAAA,QAAA0C,EAAAyG,QAAA,aAKArJ,SAAAC,eAAA,sBAAAc,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,wBAAA,CACA,MAAAkF,EAAApH,EAAAiC,OAAAC,QAAA,wBAAAY,aAAA,WAYA,UAXA9G,KAAAC,KAAA,CACAE,MAAA,iBACAC,KAAA,oCACAF,KAAA,UACA6G,kBAAA,EACAC,mBAAA,OACAC,kBAAA,UACAC,kBAAA,eACAC,iBAAA,cAGAC,YACA,IACA,MAAArF,EAAA,iBAAAqJ,EACApJ,QAAAC,MAAAF,EAAA,CACAG,OAAA,WAGAE,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MAEA,YAAAqC,EAAArC,YACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAAA,QCjOA,GCAA5C,SAAAe,iBAAA,oBAAA,WACA,IACA6K,EADAC,EAAA7L,SAAAC,eAAA,YAAA6L,WAAA,MAEAC,EAAA/L,SAAAC,eAAA,iBAEAe,eAAAgL,EAAAC,GACA,IACA,MAAAtG,QAAApD,MAAA,oCAAA0J,GAGA,GAAA,MAAAtG,EAAAsC,OAEA,YADAiE,EAAA,GAAA,IAIA,MAAAC,QAAAxG,EAAAhD,OAGAyJ,EAAA,CAAA,QAAA,UAAA,QAAA,QAAA,OAAA,QAAA,QAAA,SAAA,aAAA,UAAA,YAAA,aACAC,EAAAF,EAAA3G,OAAA,EAAA2G,EAAAG,IAAAC,GAAAH,EAAAG,EAAAC,IAAA,IAAA,CAAA,aAGAN,EAAAG,EAFAF,EAAA3G,OAAA,EAAA2G,EAAAG,IAAAC,GAAArC,WAAAqC,EAAAE,YAAA,CAAA,IAGA,MAAA7J,GACAC,QAAAD,MAAA,yBAAAA,IAIA,SAAAsJ,EAAAG,EAAAI,GACAb,GACAA,EAAA9G,UAGA8G,EAAA,IAAAc,MAAAb,EAAA,CACAc,KAAA,MACAR,KAAA,CACAE,OAAAA,EACAO,SAAA,CAAA,CACAC,MAAA,YACAV,KAAAM,EACAK,gBAAA,0BACAC,YAAA,wBACAC,YAAA,KAGAC,QAAA,CACAC,YAAA,EACAC,OAAA,CACAC,EAAA,CACAC,aAAA,OAQArB,EAAAD,EAAAxK,OAGAwK,EAAAhL,iBAAA,UAAA,WACAiL,EAAAsB,KAAA/L,aD7DA,sCAAA3B,OAAAC,SAAAC,SAAA,CAEA,IAAA6E,EACAC,GAAA,EAEA,MAAAgD,EAAA,CACAC,EAAA,WACAC,EAAA,UAIAjD,EAAA,CACAC,SAAA,EACAC,WAAA,EACAC,SAAA,CACA3C,IAAA,6DAEA4C,IAAA,mOAGAC,WAAA,CACA,CAAAC,WAAA,EAAAC,QAAA,CAAA,MASApE,eAAAqE,gBACAT,GACAD,EAAAG,UAGA,MAAAyI,QAAAC,qBAEAD,EAAA/H,OAAA,GACAC,YAAA8H,GAIA5I,EAAA/D,EAAA,2BAAA8E,UAAAb,GACAD,GAAA,EAIA5D,eAAAwM,qBACA,IACA,MAAA7H,QAAApD,MAAA,qBAEA,aADAoD,EAAAhD,OAEA,MAAAC,GAEA,OADAC,QAAAD,MAAA,iCAAAA,GACA,IAKA,SAAA6C,YAAA8H,GACA,MAAA3H,EAAA5F,SAAAC,eAAA,0BACA2F,EAAAC,UAAA,GAEA0H,EAAArL,QAAAuL,IACA,MAAAtF,EAAAP,EAAA6F,EAAAtF,UAAA,cAEAnC,EAAA,mDAEAyH,EAAAC,wCACAD,EAAAE,SAAArM,wCACAmM,EAAAG,aAAAtM,wCACAmM,EAAAG,aAAArF,6CACAkF,EAAAG,aAAApF,qDACAiF,EAAAI,6EACA1F,uQAKAsF,EAAArM,sXAMAqM,EAAArM,yKAMAwE,EAAAC,WAAAG,IAhEAX,gBAqEArF,SAAAC,eAAA,0BAAAc,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,2BAAA,CACA,MAAAsH,EAAAxJ,EAAAiC,OAAAC,QAAA,2BAAAY,aAAA,WAYA,UAXA9G,KAAAC,KAAA,CACAE,MAAA,iBACAC,KAAA,oCACAF,KAAA,UACA6G,kBAAA,EACAC,mBAAA,OACAC,kBAAA,UACAC,kBAAA,eACAC,iBAAA,cAGAC,YACA,IACA,MAAArF,EAAA,qBAAAyL,EACAxL,QAAAC,MAAAF,EAAA,CACAG,OAAA,WAGAE,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MAEA,YAAAqC,EAAArC,YACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAAA,QAQA,IAAAmL,EAAA,KAGA/N,SAAAe,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,wBAAA,CACA,MACAsH,EADAxJ,EAAAiC,OAAAC,QAAA,wBACAnF,QAAAD,GACA2M,EAAA,GAEA,IACA,MAAAzL,QAAAC,MAAA,qBAAAuL,GACA,IAAAxL,EAAAoE,GACA,MAAA,IAAAC,MAAA,gCAAArE,EAAAsE,YAEA,MAAA6G,QAAAnL,EAAAK,OACAE,QAAAC,IAAA2K,GAEAM,EAAA,IAAAN,GAGAzN,SAAAC,eAAA,gBAAAsB,MAAAkM,EAAAC,OACA1N,SAAAC,eAAA,kBAAAsB,MAAAkM,EAAAE,SAAAvM,GACApB,SAAAC,eAAA,sBAAAsB,MAAAkM,EAAAG,aAAAxM,GACApB,SAAAC,eAAA,iCAAAsB,MAAAkM,EAAAI,wBACA7N,SAAAC,eAAA,iBAAAsB,MAAAkM,EAAAtF,QAGAnI,SAAA8G,cAAA,4BAAAzF,QAAAD,GAAA0M,EAEA,MAAAlL,GACAC,QAAAD,MAAA,+CAAAA,QAMA5C,SAAAC,eAAA,wBAAAc,iBAAA,UAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAA4M,EAAA9N,SAAA8G,cAAA,4BAAAzF,QAAAD,GAEA4M,EAAA,CACAN,OAAA1N,SAAAC,eAAA,gBAAAsB,MAAAC,OACAmM,SAAA3N,SAAAC,eAAA,kBAAAsB,MAAAC,OACAoM,aAAA5N,SAAAC,eAAA,sBAAAsB,MAAAC,OACAqM,wBAAA7N,SAAAC,eAAA,iCAAAsB,MAAAC,OACA2G,QAAAnI,SAAAC,eAAA,iBAAAsB,MAAAC,QAMA,IAAAuM,EAGA,OAFAlL,QAAAD,MAAA,sDACA1C,cAAA,QAAA,+CAAA,SAKA,IAAA0I,EAAA,GAQA,GAPAoF,EAAAN,SAAAK,EAAAL,SAAA9E,EAAA8E,OAAAM,EAAAN,QACAM,EAAAL,WAAAI,EAAAJ,WAAA/E,EAAA+E,SAAAK,EAAAL,UACAK,EAAAJ,eAAAG,EAAAH,eAAAhF,EAAAgF,aAAAI,EAAAJ,cACAI,EAAAH,0BAAAE,EAAAF,0BAAAjF,EAAAiF,wBAAAG,EAAAH,yBACAG,EAAA7F,UAAA4F,EAAA5F,UAAAS,EAAAT,QAAA6F,EAAA7F,SAGA,IAAAnG,OAAA6G,KAAAD,GAAApD,OAEA,YADAvC,eAAA,4BAAA,SAGA,MAAAnB,EAAAkM,EAEA,IAEA,MAAA5E,QAAA7G,MAAA,qBAAAuL,EAAA,CACAtL,OAAA,QACAuG,QAAA,CACAC,eAAA,oBAEAvG,KAAAwG,KAAAC,UAAApH,KAGA,IAAAsH,EAAA1C,GAAA,CACA,MAAAyC,QAAAC,EAAAzG,OACA,MAAA,IAAAgE,MAAAwC,EAAA/I,SAAA,mCAGA,MAAAsC,QAAA0G,EAAAzG,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAA,kCAAAA,GACA1C,cAAA,QAAA0C,EAAAyG,QAAA,aAKArJ,SAAA8G,cAAA,uBACA/F,iBAAA,SAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAA+M,EAAA,CAEAP,OAAA1N,SAAAC,eAAA,UAAAsB,MAAAC,OACAmM,SAAA3N,SAAAC,eAAA,YAAAsB,MAAAC,OACAoM,aAAA5N,SAAAC,eAAA,gBAAAsB,MAAAC,OACAqM,wBAAA7N,SAAAC,eAAA,2BAAAsB,MAAAC,OACA2G,QAAAnI,SAAAC,eAAA,WAAAsB,MAAAC,QAIA,GAAA,KAAAyM,EAAAN,UAAA,KAAAM,EAAAP,QAAA,KAAAO,EAAAL,aAKA,IACA,MAAA9L,EAAA,IAAAC,SACAC,OAAAC,QAAAgM,GAAA/L,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAe,QAAAC,MAAA,oBAAA,CACAC,OAAA,OACAC,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAGArF,SAAAC,eAAA,UAAAsB,MAAA,GACAvB,SAAAC,eAAA,2BAAAsB,MAAA,GACAvB,SAAAC,eAAA,WAAAsB,MAAA,IAEA,MAAAqB,GACAC,QAAAD,MAAA,yBAAAA,QAtBAK,eAAA,kCAAA,YEtPA,GAAA,iCAAArD,OAAAC,SAAAC,SAAA,CAEA,IAAA6E,EACAC,GAAA,EAEA,MAAAgD,EAAA,CACAC,EAAA,WACAC,EAAA,UAIAjD,EAAA,CACAC,SAAA,EACAC,WAAA,EACAC,SAAA,CACA3C,IAAA,6DAEA4C,IAAA,mOAGAC,WAAA,CACA,CAAAC,WAAA,EAAAC,QAAA,CAAA,MASApE,eAAAqE,gBACAT,GACAD,EAAAG,UAGA,MAAAoJ,QAAAC,gBAEAD,EAAA1I,OAAA,GACAC,YAAAyI,GAIAvJ,EAAA/D,EAAA,sBAAA8E,UAAAb,GACAD,GAAA,EAIA5D,eAAAmN,gBACA,IACA,MAAAxI,QAAApD,MAAA,gBAEA,aADAoD,EAAAhD,OAEA,MAAAC,GAEA,OADAC,QAAAD,MAAA,4BAAAA,GACA,IAKA,SAAA6C,YAAAyI,GACA,MAAAtI,EAAA5F,SAAAC,eAAA,qBACA2F,EAAAC,UAAA,GAEAqI,EAAAhM,QAAA,CAAAkM,EAAArI,KACA,MAAAoC,EAAAP,EAAAwG,EAAAjG,UAAA,cAEAnC,EAAA,mDAEAD,EAAA,mCACAqI,EAAA9M,wCACA8M,EAAAV,4DACAvF,kQAKAiG,EAAAhN,4WAMAgN,EAAAhN,yKAMAwE,EAAAC,WAAAG,IA7DAX,gBAkEArF,SAAAC,eAAA,qBAAAc,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,sBAAA,CACA,MAAA6H,EAAA/J,EAAAiC,OAAAC,QAAA,sBAAAY,aAAA,WAYA,UAXA9G,KAAAC,KAAA,CACAE,MAAA,iBACAC,KAAA,oCACAF,KAAA,UACA6G,kBAAA,EACAC,mBAAA,OACAC,kBAAA,UACAC,kBAAA,eACAC,iBAAA,cAGAC,YACA,IACA,MAAArF,EAAA,gBAAAgM,EACA/L,QAAAC,MAAAF,EAAA,CACAG,OAAA,WAGAE,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MAEA,YAAAqC,EAAArC,YACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAAA,QAOA,IAAA0L,EAAA,KAGAtO,SAAAe,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,mBAAA,CACA,MACA6H,EADA/J,EAAAiC,OAAAC,QAAA,mBACAnF,QAAAD,GACAkN,EAAA,GACA,IAEA,MAAAhM,QAAAC,MAAA,gBAAA8L,GACA,IAAA/L,EAAAoE,GACA,MAAA,IAAAC,MAAA,2BAAArE,EAAAsE,YAEA,MAAAwH,QAAA9L,EAAAK,OACA2L,EAAA,IAAAF,GAGApO,SAAAC,eAAA,gBAAAsB,MAAA6M,EAAA9M,OACAtB,SAAAC,eAAA,gBAAAsB,MAAA6M,EAAAV,OACA1N,SAAAC,eAAA,iBAAAsB,MAAA6M,EAAAjG,QAGAnI,SAAA8G,cAAA,uBAAAzF,QAAAD,GAAAiN,EAEA,MAAAzL,GACAC,QAAAD,MAAA,wCAAAA,QAMA5C,SAAAC,eAAA,mBAAAc,iBAAA,UAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAAmN,EAAArO,SAAA8G,cAAA,uBAAAzF,QAAAD,GAEAmN,EAAA,CACAjN,OAAAtB,SAAAC,eAAA,gBAAAsB,MAAAC,OACAkM,OAAA1N,SAAAC,eAAA,gBAAAsB,MAAAC,OACA2G,QAAAnI,SAAAC,eAAA,iBAAAsB,MAAAC,QAGA,IAAA8M,EAGA,OAFAzL,QAAAD,MAAA,iDACA1C,cAAA,QAAA,+CAAA,SAKA,IAAA0I,EAAA,GAMA,GALA2F,EAAAjN,SAAAgN,EAAAhN,SAAAsH,EAAAtH,OAAAiN,EAAAjN,QACAiN,EAAAb,SAAAY,EAAAZ,SAAA9E,EAAA8E,OAAAa,EAAAb,QACAa,EAAApG,UAAAmG,EAAAnG,UAAAS,EAAAT,QAAAoG,EAAApG,SAGA,IAAAnG,OAAA6G,KAAAD,GAAApD,OAEA,YADAvC,eAAA,4BAAA,SAKA,MAAA6F,EAAA,IAAA9G,OAAA6G,KAAAD,GAAApD,OAAA,MAAA,QACA1D,EAAA,QAAAgH,EAAAyF,EAAA3F,EAEA,IAEA,MAAAQ,QAAA7G,MAAA,gBAAA8L,EAAA,CACA7L,OAAAsG,EACAC,QAAA,CACAC,eAAA,oBAEAvG,KAAAwG,KAAAC,UAAApH,KAGA,IAAAsH,EAAA1C,GAAA,CACA,MAAAyC,QAAAC,EAAAzG,OACA,MAAA,IAAAgE,MAAAwC,EAAA/I,SAAA,mCAGA,MAAAsC,QAAA0G,EAAAzG,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAA,6BAAAA,GACA1C,cAAA,QAAA0C,EAAAyG,QAAA,aAKArJ,SAAA8G,cAAA,kBACA/F,iBAAA,SAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAAsN,EAAA,CACAlN,OAAAtB,SAAAC,eAAA,UAAAsB,MAAAC,OACAkM,OAAA1N,SAAAC,eAAA,UAAAsB,MAAAC,OACA2G,QAAAnI,SAAAC,eAAA,WAAAsB,MAAAC,QAGA,GAAA,KAAAgN,EAAAlN,QAAA,KAAAkN,EAAAd,OAKA,IACA,MAAA5L,EAAA,IAAAC,SACAC,OAAAC,QAAAuM,GAAAtM,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAe,QAAAC,MAAA,eAAA,CACAC,OAAA,OACAC,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAGArF,SAAAC,eAAA,UAAAsB,MAAA,GACAvB,SAAAC,eAAA,UAAAsB,MAAA,GACAvB,SAAAC,eAAA,WAAAsB,MAAA,GAEA,MAAAqB,GACAC,QAAAD,MAAA,yBAAAA,QAtBAK,eAAA,kCAAA,YCtOA,GAAA,sCAAArD,OAAAC,SAAAC,SAAA,CAEA,IAAAyJ,gBAAA3J,OAAAC,SAAA2J,QAAA,MAEAiF,EAAAzO,SAAAC,eAAA,uBACAyO,EAAA1O,SAAAC,eAAA,oBACA0O,EAAA3O,SAAAC,eAAA,uBAGA6J,GADA9J,SAAAC,eAAA,mBACAD,SAAAC,eAAA,kBACA2O,EAAA5O,SAAAC,eAAA,cACA4O,EAAA7O,SAAAC,eAAA,oBACA6O,EAAA9O,SAAAC,eAAA,kBACA8O,EAAA/O,SAAAC,eAAA,mBAEA+O,EAAAhP,SAAAC,eAAA,iBAEA,IAAAgP,EAAA,GACAC,EAAA,GACAC,EAAA,EAoBA,SAAAC,kBAAA9J,GACAoJ,EAAA7I,UAAA,GACAwJ,MAAAC,QAAAhK,IAAA,IAAAA,EAAAE,OAGAF,EAAApD,QAAA4D,IACA,MAAAyJ,EAAAvP,SAAAwP,cAAA,MACAD,EAAA3E,UAAAC,IAAA,kBAAA,0BACA0E,EAAAlM,YAAA,GAAAyC,EAAAM,mBAAAN,EAAAxE,SACAiO,EAAAxO,iBAAA,QAAA,KACA0O,gBAAA3J,GACA4J,eACAjB,EAAAlN,MAAA,KAEAmN,EAAAiB,YAAAJ,KAXAb,EAAA7I,UAAA,+DAcA6I,EAAA9D,UAAAE,OAAA,UAGA,SAAA4E,eACAhB,EAAA7I,UAAA,GACA6I,EAAA9D,UAAAC,IAAA,UAGA,SAAA4E,gBAAA3J,GACA,MAAA8J,EAAA1F,WAAApE,EAAAG,QAGA,IAAA4J,EAAAZ,EAAAa,KAAAC,GAAAA,EAAA3J,gBAAAN,EAAAM,eAEAyJ,GAEAA,EAAA9E,WACA8E,EAAAV,MAAAU,EAAA9E,SAAA6E,GAGAX,EAAAe,KAAA,CACAC,YAAAnK,EAAA1E,GACAgF,cAAAN,EAAAM,cACA9E,OAAAwE,EAAAxE,OACA+E,UAAAP,EAAAO,UACAJ,OAAAiE,WAAApE,EAAAG,QACAK,KAAAR,EAAAQ,KACAyE,SAAA,EACAoE,MAAAS,EACA1J,MAAAJ,EAAAI,QAKAgK,kBAIA,SAAAA,kBAEAvB,EAAA9I,UAAA,GAGAoJ,EAAA/M,QAAAiO,IACA,MAAAC,EAAApQ,SAAAwP,cAAA,MACAY,EAAAvK,UAAA,yBACAsK,EAAA7O,oCACA6O,EAAA9J,gOAGA8J,EAAA/J,6EACA+J,EAAApF,gHACAoF,EAAA/J,kBAAA+J,EAAApF,UAAAoF,EAAAjK,MAAA,WAAA,0FAGAgE,WAAAiG,EAAAlK,QAAAoK,QAAA,iCACAF,EAAAhB,MAAAkB,QAAA,qDACAF,EAAA7J,yHACA6J,EAAA/J,4EAEAuI,EAAAgB,YAAAS,KAIAE,yBACAC,yBACAC,gBAIA,SAAAF,yBACAtQ,SAAAyQ,iBAAA,qBAEAvO,QAAAwO,IACAA,EAAA3P,iBAAA,SAAA,WACA,MAAA4P,EAAArD,KAAAlG,aAAA,WACAwJ,iBAAAD,QAMA,SAAAC,iBAAAD,GAEA1B,EAAAA,EAAA4B,OAAAV,GAAAA,EAAA/J,gBAAAuK,GAGAT,kBAIA,SAAAK,yBACA,MAAAO,EAAA9Q,SAAAyQ,iBAAA,cACAM,EAAA/Q,SAAAyQ,iBAAA,eAGAK,EAAA5O,QAAA8O,IACAA,EAAAjQ,iBAAA,SAAA,WACA,MAAA4P,EAAArD,KAAAlG,aAAA,WACAtB,EAAAmJ,EAAAa,KAAAC,GAAAA,EAAA3J,gBAAAuK,GAEA7K,GAAAA,EAAAiF,SAAAjF,EAAAI,QACAJ,EAAAiF,WACAjF,EAAAqJ,MAAArJ,EAAAiF,SAAAb,WAAApE,EAAAG,SAIAiK,uBAKAa,EAAA7O,QAAA8O,IACAA,EAAAjQ,iBAAA,SAAA,WACA,MAAA4P,EAAArD,KAAAlG,aAAA,WACAtB,EAAAmJ,EAAAa,KAAAC,GAAAA,EAAA3J,gBAAAuK,GAEA7K,GAAAA,EAAAiF,SAAA,IACAjF,EAAAiF,WACAjF,EAAAqJ,MAAArJ,EAAAiF,SAAAb,WAAApE,EAAAG,SAIAiK,uBAKA,SAAAM,gBACArB,EAAA,EAEAF,EAAA/M,QAAAiO,IACAhB,GAAAgB,EAAAhB,QAGAnP,SAAAC,eAAA,mBACAsB,MAAA,GAAA4N,EAAAkB,QAAA,GA3KA5B,EAAA1N,iBAAA,QAAAC,MAAAC,IACA,MAAAgQ,EAAAhQ,EAAAsF,OAAAhF,MAAAC,OACA,GAAAyP,EAAAzL,QAAA,EACA,IACA,MAAAnD,EAAA,yBAAA4O,EACA3O,QAAAC,MAAAF,GACA6M,QAAA5M,EAAAK,OACAyM,kBAAAF,GACA,MAAAtM,GACAC,QAAAD,MAAA,6BAAAA,GACA8L,EAAA7I,UAAA,oEACA6I,EAAA9D,UAAAE,OAAA,eAGA4E,iBAiKA1P,SAAAe,iBAAA,SAAA,SAAAE,GACAwN,EAAAyC,SAAAjQ,EAAAsF,SAAAmI,EAAAwC,SAAAjQ,EAAAsF,SAEAmJ,kBAIAd,EAAA7N,iBAAA,SAAA,KACA,MAAA6N,EAAArN,OACAuI,EAAAc,UAAAC,IAAA,UAEA,MAAA+D,EAAArN,OACAuI,EAAAc,UAAAC,IAAA,UAEA,MAAA+D,EAAArN,OACAuI,EAAAc,UAAAE,OAAA,YAKA+D,EAAA9N,iBAAA,QAAA,KAEA,MAAAoQ,EAAApC,EAAAxN,MAKAyJ,GAJAd,WAAAiH,IAAA,IAEAjH,WAAA2E,EAAAtN,QAAA,GAGAuN,EAAAvN,MAAA6P,KAAAC,IAAArG,KAIAgE,EAAAjO,iBAAA,QAAAC,UAEA,GAAA,IAAAiO,EAAAzJ,OAEA,YADAtF,cAAA,QAAA,wBAAA,WAKA,MAAAoR,EAAArC,EAAA3C,IAAAxG,IAAA,CACAyL,eAAA,EACAC,YAAA1L,EAAAmK,YACAwB,MAAAvH,WAAApE,EAAAiF,SAAAjF,EAAAG,QACAyL,WAAAhO,yBACAiO,UAAA,UACAC,YAAA9L,EAAAxE,OACA8G,OAAA,KAGA9C,EAAA2J,EAAA3C,IAAAxG,IAAA,CACA0L,YAAA1L,EAAAmK,YACAlF,SAAAjF,EAAAiF,YAGAjJ,EAAAmH,KAAAC,UAAA,CACAoI,OAAAA,EACAhM,UAAAA,IAIA,IACA,MAAAhD,QAAAC,MAHA,oCAGA,CACAC,OAAA,OACAuG,QAAA,CACAC,eAAA,oBAEAvG,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,KAAA,8BAEA,MAAAuC,GACAC,QAAAD,MAAAA,MC9QA,GAAA,uCAAAhD,OAAAC,SAAAC,SAAA,CAEA,MACA+R,EADA,IAAAtI,gBAAA3J,OAAAC,SAAA2J,QACAC,IAAA,MAEAgF,EAAAzO,SAAAC,eAAA,uBACAyO,EAAA1O,SAAAC,eAAA,oBACA0O,EAAA3O,SAAAC,eAAA,uBAEA6R,EAAA9R,SAAAC,eAAA,eACA8R,EAAA/R,SAAAC,eAAA,mBACA6J,EAAA9J,SAAAC,eAAA,iBACA2O,EAAA5O,SAAAC,eAAA,cACA4O,EAAA7O,SAAAC,eAAA,oBACA6O,EAAA9O,SAAAC,eAAA,kBACA8O,EAAA/O,SAAAC,eAAA,mBAEA+O,EAAAhP,SAAAC,eAAA,iBAEA,IAAAgP,EAAA,GACAC,EAAA,GACAC,EAAA,EAoBA,SAAAC,kBAAA9J,GACAoJ,EAAA7I,UAAA,GACAwJ,MAAAC,QAAAhK,IAAA,IAAAA,EAAAE,OAGAF,EAAApD,QAAA4D,IACA,MAAAyJ,EAAAvP,SAAAwP,cAAA,MACAD,EAAA3E,UAAAC,IAAA,kBAAA,0BACA0E,EAAAlM,YAAA,GAAAyC,EAAAM,mBAAAN,EAAAxE,SACAiO,EAAAxO,iBAAA,QAAA,KACA0O,gBAAA3J,GACA4J,eACAjB,EAAAlN,MAAA,KAEAmN,EAAAiB,YAAAJ,KAXAb,EAAA7I,UAAA,+DAcA6I,EAAA9D,UAAAE,OAAA,UAGA,SAAA4E,eACAhB,EAAA7I,UAAA,GACA6I,EAAA9D,UAAAC,IAAA,UAGA,SAAA4E,gBAAA3J,GACA,MAAA8J,EAAA1F,WAAApE,EAAAG,QAGA,IAAA4J,EAAAZ,EAAAa,KAAAC,GAAAA,EAAA3J,gBAAAN,EAAAM,eAEAyJ,GAEAA,EAAA9E,WACA8E,EAAAV,MAAAU,EAAA9E,SAAA6E,GAGAX,EAAAe,KAAA,CACAC,YAAAnK,EAAA1E,GACAgF,cAAAN,EAAAM,cACA9E,OAAAwE,EAAAxE,OACA+E,UAAAP,EAAAO,UACAJ,OAAAiE,WAAApE,EAAAG,QACAK,KAAAR,EAAAQ,KACAyE,SAAA,EACAoE,MAAAS,EACA1J,MAAAJ,EAAAI,QAKAgK,kBAIA,SAAAA,kBAEAvB,EAAA9I,UAAA,GAGAoJ,EAAA/M,QAAAiO,IACA,MAAAC,EAAApQ,SAAAwP,cAAA,MACAY,EAAAvK,UAAA,yBACAsK,EAAA7O,oCACA6O,EAAA9J,gOAGA8J,EAAA/J,6EACA+J,EAAApF,gHACAoF,EAAA/J,kBAAA+J,EAAApF,UAAAoF,EAAAjK,MAAA,WAAA,0FAGAgE,WAAAiG,EAAAlK,QAAAoK,QAAA,iCACAF,EAAAhB,MAAAkB,QAAA,qDACAF,EAAA7J,yHACA6J,EAAA/J,4EAEAuI,EAAAgB,YAAAS,KAIAE,yBACAC,yBACAC,gBAIA,SAAAF,yBACAtQ,SAAAyQ,iBAAA,qBAEAvO,QAAAwO,IACAA,EAAA3P,iBAAA,SAAA,WACA,MAAA4P,EAAArD,KAAAlG,aAAA,WACAwJ,iBAAAD,QAMA,SAAAC,iBAAAD,GAEA1B,EAAAA,EAAA4B,OAAAV,GAAAA,EAAA/J,gBAAAuK,GAGAT,kBAIA,SAAAK,yBACA,MAAAO,EAAA9Q,SAAAyQ,iBAAA,cACAM,EAAA/Q,SAAAyQ,iBAAA,eAGAK,EAAA5O,QAAA8O,IACAA,EAAAjQ,iBAAA,SAAA,WACA,MAAA4P,EAAArD,KAAAlG,aAAA,WACAtB,EAAAmJ,EAAAa,KAAAC,GAAAA,EAAA3J,gBAAAuK,GAEA7K,GAAAA,EAAAiF,SAAAjF,EAAAI,QACAJ,EAAAiF,WACAjF,EAAAqJ,MAAArJ,EAAAiF,SAAAb,WAAApE,EAAAG,SAIAiK,uBAKAa,EAAA7O,QAAA8O,IACAA,EAAAjQ,iBAAA,SAAA,WACA,MAAA4P,EAAArD,KAAAlG,aAAA,WACAtB,EAAAmJ,EAAAa,KAAAC,GAAAA,EAAA3J,gBAAAuK,GAEA7K,GAAAA,EAAAiF,SAAA,IACAjF,EAAAiF,WACAjF,EAAAqJ,MAAArJ,EAAAiF,SAAAb,WAAApE,EAAAG,SAIAiK,uBAKA,SAAAM,gBACArB,EAAA,EAEAF,EAAA/M,QAAAiO,IACAhB,GAAAgB,EAAAhB,QAGAnP,SAAAC,eAAA,mBACAsB,MAAA,GAAA4N,EAAAkB,QAAA,GA3KA5B,EAAA1N,iBAAA,QAAAC,MAAAC,IACA,MAAAgQ,EAAAhQ,EAAAsF,OAAAhF,MAAAC,OACA,GAAAyP,EAAAzL,QAAA,EACA,IACA,MAAAnD,EAAA,yBAAA4O,EACA3O,QAAAC,MAAAF,GACA6M,QAAA5M,EAAAK,OACAyM,kBAAAF,GACA,MAAAtM,GACAC,QAAAD,MAAA,6BAAAA,GACA8L,EAAA7I,UAAA,oEACA6I,EAAA9D,UAAAE,OAAA,eAGA4E,iBAiKA1P,SAAAe,iBAAA,SAAA,SAAAE,GACAwN,EAAAyC,SAAAjQ,EAAAsF,SAAAmI,EAAAwC,SAAAjQ,EAAAsF,SAEAmJ,kBAKAoC,EAAA/Q,iBAAA,SAAA,KACA,MAAA+Q,EAAAvQ,OACAwQ,EAAAnH,UAAAE,OAAA,UACAhB,EAAAc,UAAAE,OAAA,YAEAiH,EAAAnH,UAAAC,IAAA,UACAf,EAAAc,UAAAC,IAAA,UACAgE,EAAAtN,MAAA,GACAuN,EAAAvN,MAAA,MAIAqN,EAAA7N,iBAAA,SAAA,KACA,MAAA6N,EAAArN,OACAuI,EAAAc,UAAAC,IAAA,UAEA,MAAA+D,EAAArN,OACAuI,EAAAc,UAAAC,IAAA,UAEA,MAAA+D,EAAArN,OACAuI,EAAAc,UAAAE,OAAA,YAKA+D,EAAA9N,iBAAA,QAAA,KAEA,MAAAoQ,EAAApC,EAAAxN,MAKAyJ,GAJAd,WAAAiH,IAAA,IAEAjH,WAAA2E,EAAAtN,QAAA,GAGAuN,EAAAvN,MAAA6P,KAAAC,IAAArG,KAIAgE,EAAAjO,iBAAA,QAAAC,UAEA,GAAA,IAAAiO,EAAAzJ,OAIA,GAAAsM,EAAAvQ,MAMA,GAAA,MAAAuQ,EAAAvQ,MAAA,CAEA,MAAA+P,EAAArC,EAAA3C,IAAAxG,IAAA,CACAyL,eAAAM,EACAL,YAAA1L,EAAAmK,YACAwB,MAAAvH,WAAApE,EAAAiF,SAAAjF,EAAAG,QACAyL,WAAAhO,yBACAiO,UAAA,UACAC,YAAA9L,EAAAxE,OACA8G,OAAA,KAGA9C,EAAA2J,EAAA3C,IAAAxG,IAAA,CACA0L,YAAA1L,EAAAmK,YACAlF,SAAAjF,EAAAiF,YAGAjJ,EAAAmH,KAAAC,UAAA,CACAoI,OAAAA,EACAhM,UAAAA,IAEAjD,EAAA,oCAEA,IACA,MAAAC,QAAAC,MAAAF,EAAA,CACAG,OAAA,OACAuG,QAAA,CACAC,eAAA,oBAEAvG,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,KAAA,8BAEA,MAAAuC,GACAC,QAAAD,MAAAA,QAEA,CAEA,MAAA0O,EAAArC,EAAA3C,IAAAxG,IAAA,CACAyL,eAAAM,EACAL,YAAA1L,EAAAmK,YACAwB,MAAAvH,WAAApE,EAAAiF,SAAAjF,EAAAG,QACAyL,WAAAhO,yBACAiO,UAAA,UACAC,YAAA9L,EAAAxE,OACA8G,OAAA,KAGA9C,EAAA2J,EAAA3C,IAAAxG,IAAA,CACA0L,YAAA1L,EAAAmK,YACAlF,SAAAjF,EAAAiF,YAGAjJ,EAAAmH,KAAAC,UAAA,CACAoI,OAAAA,EACAhM,UAAAA,IAEAjD,EAAA,oCAEA,IACA,MAAAC,QAAAC,MAAAF,EAAA,CACAG,OAAA,OACAuG,QAAA,CACAC,eAAA,oBAEAvG,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,KAAA,8BAEA,MAAAuC,GACAC,QAAAD,MAAAA,SA/EA1C,cAAA,QAAA,mCAAA,gBAJAA,cAAA,QAAA,wBAAA,aCtPA,GAAA,qBAAAN,OAAAC,SAAAC,SAAA,CA8CA,SAAAkS,2BAAA5Q,EAAA6Q,GACA1P,MAAA,qBAAAnB,EAAA,CACAoB,OAAA,QACAuG,QAAA,CACAC,eAAA,oBAEAvG,KAAAwG,KAAAC,UAAA,CACAgJ,qBAAAD,MAGAtR,KAAAgF,IACA,IAAAA,EAAAe,GACA,MAAA,IAAAC,MAAA,uBAAAhB,EAAAsC,QAEA,OAAAtC,EAAAhD,SAEAhC,KAAAwL,IAEA7L,KAAAC,KAAA,CACAE,MAAA,mCACAD,KAAA,YACAG,KAAA,KACAd,SAAAiB,aAGAqR,MAAAvP,IACAC,QAAAD,MAAA,SAAAA,GACAtC,KAAAC,KAAA,CACAE,MAAA,sBACAC,KAAA,oCACAF,KAAA,YA1EAR,SAAAyQ,iBAAA,qBAEAvO,QAAAuL,IAEA,MAAArM,EAAAqM,EAAArG,aAAA,WACAgB,EAAAqF,EAAArG,aAAA,eAGA,GAAAgB,GAAA,GAAAA,GAAA,GAAAA,GACAqF,EAAA1M,iBAAA,QAAAuD,IACAA,EAAApD,iBAEAZ,KAAAC,KAAA,CACAE,MAAA,uBACAD,KAAA,UACA6G,kBAAA,EACAC,mBAAA,UACAC,kBAAA,OACAC,kBAAA,mBACA7G,KAAAyR,IACA,GAAAA,EAAA1K,YAAA,CACA,IAAAuK,EAEA,GAAA7J,EACA6J,EAAA,EACA,GAAA7J,EACA6J,EAAA,EACA,GAAA7J,IACA6J,EAAA,QAGAI,IAAAJ,EAEAD,2BAAA5Q,EAAA6Q,GAEApP,QAAAD,MAAA,+CCrCA,GAAA,gCAAAhD,OAAAC,SAAAC,SAAA,CAGA,MAAA4O,EAAA1O,SAAAC,eAAA,oBACAqS,EAAAtS,SAAAC,eAAA,UACAsS,EAAAvS,SAAAC,eAAA,UACAuS,EAAAxS,SAAAC,eAAA,aACAwS,EAAAzS,SAAAC,eAAA,aACAyS,EAAA1S,SAAAC,eAAA,YACA0S,EAAA3S,SAAAC,eAAA,aAGA2S,EAAA5S,SAAA8G,cAAA,oBACA+L,EAAA7S,SAAAC,eAAA,sBACA6S,EAAA9S,SAAAC,eAAA,yBACA8S,EAAA/S,SAAAC,eAAA,sBACA+S,EAAAhT,SAAAC,eAAA,wBACAgT,EAAAjT,SAAAC,eAAA,mCACAiT,EAAAlT,SAAAC,eAAA,yBAEA,IAAAkT,EAAA,GAEA,MAAAC,EAAApT,SAAAC,eAAA,gBACAoT,EAAArT,SAAAC,eAAA,eACAqT,EAAAtT,SAAAyQ,iBAAA,+BACA8C,EAAAvT,SAAAC,eAAA,aACAuT,EAAAxT,SAAAC,eAAA,cACAwT,EAAAzT,SAAAC,eAAA,YACA8O,EAAA/O,SAAAC,eAAA,cACAyT,EAAAxJ,WAAAlK,SAAAC,eAAA,qBAAAoD,YAAA7B,SAAA,EACAmS,EAAA3T,SAAAC,eAAA,cACA2T,EAAA5T,SAAAC,eAAA,iBAEA,IAAA4T,EAAA,EACA5J,EAAA4J,EAAAH,EACAI,EAAA7J,EACA8J,EAAA,EACAC,EAAA,GACAC,EAAA,EACAC,EAAA,EAGAlT,eAAAmT,eAAAzS,GACA,GAAAA,EAAA8D,OAAA,EACAkJ,EAAA9D,UAAAC,IAAA,eAIA,IACA,MAAAlF,QAAApD,MAAA,wBAAA6R,mBAAA1S,IAEA,IAAAiE,EAAAe,GACA,MAAA,IAAAC,MAAA,eAAAhB,EAAAsC,QAGA,MAAAiD,QAAAvF,EAAAhD,OACA0R,mBAAAnJ,GACA,MAAAtI,GACAC,QAAAD,MAAA,6BAAAA,GACA8L,EAAA9D,UAAAC,IAAA,WAKA,SAAAwJ,mBAAAnJ,GACAwD,EAAA7I,UAAA,GAEA,IAAAqF,EAAA1F,QAKAkJ,EAAA9D,UAAAE,OAAA,UAEAI,EAAAhJ,QAAAkJ,IACA,MAAAmB,EAAAvM,SAAAwP,cAAA,MACAjD,EAAA3B,UAAAC,IAAA,kBAAA,0BACA0B,EAAAlJ,YAAA+H,EAAA1J,OACA6K,EAAAlL,QAAAD,GAAAgK,EAAAhK,GACAmL,EAAAxL,iBAAA,QAAA,IAAAuT,mBAAAlJ,IACAsD,EAAAiB,YAAApD,MAZAmC,EAAA9D,UAAAC,IAAA,UAiBA,SAAAyJ,mBAAAlJ,GACAkH,EAAA/Q,MAAA6J,EAAA1J,OACA6Q,EAAAhR,MAAA6J,EAAA9J,OACAkR,EAAAjR,MAAA6J,EAAAC,UACAoH,EAAAlR,MAAA6J,EAAAG,oBACAmH,EAAAnR,MAAA6J,EAAA3J,SACAkR,EAAApR,MAAA6J,EAAAE,UAEAoD,EAAA9D,UAAAC,IAAA,UA6CA,SAAA0J,iBACA,MAAAC,EAAA,IAAA5Q,KAAAwP,EAAA7R,OACAkT,EAAA,IAAA7Q,KAAAyP,EAAA9R,OAGAsS,EADArJ,MAAAgK,IAAAhK,MAAAiK,IAAAA,GAAAD,EACA,GAEAC,EAAAD,GAAA,MAIA,SAAAE,qBACAzK,EAAA4J,EAAAH,EAEAK,EAAA7J,WAAAqJ,EAAAhS,QAAA,EACA0S,EAAA/J,WAAAsJ,EAAAjS,QAAA,EACA2S,EAAAhK,WAAAuJ,EAAAlS,QAAA,EAEA,MAAAoT,EAAA3U,SAAA8G,cAAA,uCACAkN,EAAAW,EAAAA,EAAApT,MAAA,GAEA,IAAAqT,EAAA3K,EACA,eAAA+J,EACAY,GAAA3K,GAAA8J,EAAA,KACA,UAAAC,IACAY,GAAAb,GAGAD,EAAAc,EAAAX,EAAAC,EACAnF,EAAAxN,MAAAuS,EAAAzD,QAAA,GAGA,SAAAwE,oBACAN,iBACAG,qBA3EApC,EAAAvR,iBAAA,QAAAE,IACAkT,eAAAlT,EAAAsF,OAAAhF,SAIAvB,SAAAe,iBAAA,QAAAE,IACAqR,EAAApB,SAAAjQ,EAAAsF,SAAAmI,EAAAwC,SAAAjQ,EAAAsF,SACAmI,EAAA9D,UAAAC,IAAA,YAKA+H,EAAA7R,iBAAA,QAAAuD,IACAA,EAAApD,iBAEAiS,EAAA,CACA7R,OAAAuR,EAAAtR,MAAAC,OACA6J,UAAAyH,EAAAvR,MAAAC,OACAE,OAAAqR,EAAAxR,MAAAC,OACAC,SAAAuR,EAAAzR,MAAAC,OACA+J,oBAAA0H,EAAA1R,MAAAC,OACA8J,UAAA4H,EAAA3R,MAAAC,QAIA2R,EAAA7R,QAAA6R,EAAA9H,WAAA8H,EAAA1R,UAMA8Q,EAAAhR,MAAA4R,EAAA7R,OAAA,IAAA6R,EAAA9H,UACAiH,EAAA/Q,MAAA4R,EAAAzR,QAAA,GACA+Q,EAAAlR,MAAA4R,EAAA5H,qBAAA,GACAmH,EAAAnR,MAAA4R,EAAA1R,SACAkR,EAAApR,MAAA4R,EAAA7H,WAAA,GAEApL,cAAA,mBAAA,6BAAA,SAXA+C,eAAA,sEAAA,WAoDA,CAAAmQ,EAAAC,EAAAE,EAAAC,EAAAC,GAAAvR,QAAA4S,IACAA,EAAA/T,iBAAA,QAAA8T,qBAGAvB,EAAApR,QAAA6S,IACAA,EAAAhU,iBAAA,SAAA8T,qBAIAA,oBAGA,MAAAjG,EAAA+E,EAAApS,MACAyT,EAAApB,EAAArS,MAAAC,OACAxB,SAAAC,eAAA,sBAAAc,iBAAA,QAAAC,MAAAC,IAKA,GAHAA,EAAAC,kBAGAqR,EAAAhR,MAAAC,SAAAgR,EAAAjR,MAAAC,SAAAkR,EAAAnR,MAAAC,OAEA,YADAtB,cAAA,2BAAA,mDAAA,WAIA,MACA+U,EADA,IAAA1L,gBAAA3J,OAAAC,SAAA2J,QACAC,IAAA,MAEAyL,EAAA,CACA9J,QAAA,CACA1J,OAAA4Q,EAAA/Q,MAAAC,OACAF,OAAAiR,EAAAhR,MAAAC,OACA6J,UAAAmH,EAAAjR,MAAAC,OACA+J,oBAAAkH,EAAAlR,MAAAC,OACAC,SAAAiR,EAAAnR,MAAAC,OACA8J,UAAAqH,EAAApR,MAAAC,QAEA2T,OAAA,CACAC,QAAAhC,EAAA7R,MAAA,YACA8T,OAAAhC,EAAA9R,MAAA,aAEAgM,aAAA,CAAA0H,GACAK,KAAA,CACAC,WAAArL,WAAA4J,GACA0B,mBAAAtL,WAAAD,GACA8J,UAAA7J,WAAA6J,GACAC,cAAAA,EACAC,WAAA/J,WAAA+J,GACAC,SAAAhK,WAAAgK,GACAuB,YAAA7G,GAEAoG,cAAAA,GAIAU,EAAA,IAAA3T,SACA2T,EAAAtT,OAAA,UAAA6G,KAAAC,UAAAgM,IAGA,IACA,MAAA5S,QAAAC,MAAA,qBAAA,CACAC,OAAA,OACAC,KAAAiT,IAGA,IAAApT,EAAAoE,GAAA,MAAA,IAAAC,MAAA,sCAEA,MAAAjE,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACA,MAAAuC,GACAC,QAAAD,MAAA,SAAAA,GACA1C,cAAA,QAAA,+BAAA,YCrPA,GAAA,cAAAN,OAAAC,SAAAC,SAAA,CAEA,MAAA6V,EAAA3V,SAAAC,eAAA,gBAEA0V,GACAA,EAAA5U,iBAAA,SAAAC,eAAAsD,GAEAA,EAAApD,iBAEA,MAAA0U,EAAA,CACAtU,OAAAtB,SAAAC,eAAA,UAAAsB,MAAAC,OACA6J,UAAArL,SAAAC,eAAA,aAAAsB,MAAAC,OACAgD,MAAAxE,SAAAC,eAAA,SAAAsB,MAAAC,OACAiD,SAAAzE,SAAAC,eAAA,YAAAsB,MAAAC,OACAqU,UAAA7V,SAAAC,eAAA,aAAAsB,MAAAC,OACAC,SAAAzB,SAAAC,eAAA,YAAAsB,MAAAC,OACA8J,UAAAtL,SAAAC,eAAA,aAAAsB,MAAAC,QAGA,GAAA,KAAAoU,EAAApR,OAAA,KAAAoR,EAAAtU,QAAA,KAAAsU,EAAAtK,WAAA,KAAAsK,EAAAnR,UAAA,KAAAmR,EAAAC,WAAA,KAAAD,EAAAnU,SAKA,GAAAmU,EAAAnR,WAAAmR,EAAAC,UAAA,QAMAD,EAAAC,UAEA,IAEA,MAAA/T,EAAA,IAAAC,SACAC,OAAAC,QAAA2T,GAAA1T,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAc,EAAA,iCACAC,QAAAC,MAAAF,EAAA,CACAG,OAAA,OACAC,KAAAX,IAIAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MAEA,MAAAuC,GACAC,QAAAC,IAAA,yBAAAF,SAtBAK,eAAA,+BAAA,cALAA,eAAA,kCAAA,YCpBA,GAAA,yBAAArD,OAAAC,SAAAC,SAAA,CAEA,MAAAgW,EAAA9V,SAAAC,eAAA,eACAyO,EAAA1O,SAAAC,eAAA,qBACAuU,EAAAxU,SAAAC,eAAA,gBACAwU,EAAAzU,SAAAC,eAAA,eACA8V,EAAA/V,SAAAC,eAAA,cACA+V,EAAAhW,SAAAC,eAAA,gBACAgW,EAAAjW,SAAAC,eAAA,YACAiW,EAAAlW,SAAAC,eAAA,gBACAkW,EAAAnW,SAAAC,eAAA,cACAmW,EAAApW,SAAAC,eAAA,aACAoW,EAAArW,SAAAC,eAAA,cACAqW,EAAAtW,SAAAC,eAAA,YAGA,IAAAsW,EACApD,EAAA,GACAqD,EAAA,EACAC,EAAA,GACAC,EAAA,GAGA,MAAAC,EAAA,IAAAC,QAAAb,EAAA,CACAc,kBAAA,EACAC,aAAA,EACAC,iBAAA,oCACAC,eAAA,IAIAhW,eAAAmT,eAAAzS,GACA,IACA,MAAAiE,QAAApD,MAAA,wBAAA6R,mBAAA1S,IACA,aAAAiE,EAAAhD,OACA,MAAAC,GAEA,OADAC,QAAAD,MAAA,6BAAAA,GACA,IAKA,SAAAyR,mBAAAnJ,GACAwD,EAAA7I,UAAA,GACA,IAAAqF,EAAA1F,QAIAkJ,EAAA9D,UAAAE,OAAA,UACAI,EAAAhJ,QAAAkJ,IACA,MAAAmB,EAAAvM,SAAAwP,cAAA,MACAjD,EAAA3B,UAAAC,IAAA,kBAAA,0BACA0B,EAAAlJ,YAAA+H,EAAA1J,OACA6K,EAAAlL,QAAAD,GAAAgK,EAAAhK,GACAmL,EAAAxL,iBAAA,QAAA,IAAAuT,mBAAAlJ,IACAsD,EAAAiB,YAAApD,MAVAmC,EAAA9D,UAAAC,IAAA,UAeA,SAAAyJ,mBAAAlJ,GACA0K,EAAAvU,MAAA6J,EAAA1J,OACA1B,SAAAC,eAAA,UAAAsB,MAAA6J,EAAA9J,OACAtB,SAAAC,eAAA,aAAAsB,MAAA6J,EAAAC,UACArL,SAAAC,eAAA,uBAAAsB,MAAA6J,EAAAG,oBACAvL,SAAAC,eAAA,YAAAsB,MAAA6J,EAAA3J,SACAzB,SAAAC,eAAA,aAAAsB,MAAA6J,EAAAE,UACAoD,EAAA9D,UAAAC,IAAA,UAIA,SAAAoM,sBACA9D,EAAA,CACAzR,OAAAoU,EAAAvU,MAAAC,OACAF,OAAAtB,SAAAC,eAAA,UAAAsB,MAAAC,OACA6J,UAAArL,SAAAC,eAAA,aAAAsB,MAAAC,OACA+J,oBAAAvL,SAAAC,eAAA,uBAAAsB,MAAAC,OACAC,SAAAzB,SAAAC,eAAA,YAAAsB,MAAAC,OACA8J,UAAAtL,SAAAC,eAAA,aAAAsB,MAAAC,QAKA,MAAA0V,EAAAlX,SAAAC,eAAA,eAGA,SAAAkX,wBAAAC,GACAF,EAAA/T,MAAAkU,MAAAD,EAAA,IACAF,EAAAI,aAAA,gBAAAF,GACAF,EAAA7T,YAAA+T,EAAA,IAqCA,SAAAG,YAAAC,GAEAxX,SAAAC,eAAA,OAAAuW,GAAA5L,UAAAC,IAAA,UACA7K,SAAAC,eAAA,OAAAuX,GAAA5M,UAAAE,OAAA,UAEA0L,EAAAgB,EAGAvB,EAAArL,UAAA6M,OAAA,SAAA,IAAAjB,GAGA,IAAAA,GACAR,EAAA3S,YAAA,YACA6S,EAAAtL,UAAAE,OAAA,UACAkL,EAAApL,UAAAC,IAAA,YAEAmL,EAAA3S,YAAA,YACA6S,EAAAtL,UAAAC,IAAA,UACAmL,EAAApL,UAAAE,OAAA,WAMA9J,eAAA0W,qBACA,GAAAlD,EAAAjT,OAAAkT,EAAAlT,MACA,IACA,MAAAoE,QAAApD,MAAA,iCAAAiS,EAAAjT,SAAAkT,EAAAlT,SAGA,GAFAkV,QAAA9Q,EAAAhD,OACAgU,EAAAgB,eACA,IAAAlB,EAAAjR,OAEA,YADAmR,EAAAiB,WAAA,CAAA,CAAArW,MAAA,GAAAsL,MAAA,kCAAAgL,UAAA,KAGAlB,EAAAiB,WAAAnB,EAAAnK,IAAAmB,IAAA,CACAlM,MAAAkM,EAAArM,GACAyL,MAAA,cAAAY,EAAAC,YAAAD,EAAAG,aAAAtM,2BAAAmM,EAAAG,aAAAvF,gCAAAoF,EAAAG,aAAArF,sBAEA,MAAA3F,GACAC,QAAAD,MAAA,iCAAAA,IAsCA,SAAA8R,qBACA,IAAAvF,EAAA,EAGA,MAAA2I,EAAA,IAAAlU,KAAA4Q,EAAAjT,OAEAwW,GADA,IAAAnU,KAAA6Q,EAAAlT,OACAuW,GAAA,MAEA,GAAAC,GAAA,EAEA,YADA9M,MAAA,0DAKAyL,EAAAxU,QAAA4L,IACA,MAAAL,EAAAgJ,EAAA3G,KAAAkI,GAAAA,EAAA5W,KAAA0M,GACAL,IACA0B,GAAAjF,WAAAuD,EAAAG,aAAArF,aAAAwP,KAKAvC,mBAAArG,EAGA,MAAA4E,EAAA7J,WAAAkM,EAAA7U,QAAA,EACAyS,EAAAhU,SAAA8G,cAAA,uCACA9G,SAAA8G,cAAA,uCAAAvF,MACA,QAIA4N,GADA,eAAA6E,EACA7E,EAAA4E,EAAA,IAEAA,EAIA,MAAAE,EAAA/J,WAAAmM,EAAA9U,QAAA,EACA4N,GAAA8E,EAGA9E,EAAAA,EAAA,EAAA,EAAAA,EAGA,MAAA+E,EAAAhK,WAAAoM,EAAA/U,QAAA,EAGA4N,GAAA+E,EAGA/E,EAAAA,EAAA,EAAA,EAAAA,EAGAgH,EAAA5U,MAAA4N,EAAAkB,QAAA,GA2HA,SAAA4H,gBAEAjY,SAAAC,eAAA,UAAAsB,MAAA,GACAvB,SAAAC,eAAA,aAAAsB,MAAA,GACAvB,SAAAC,eAAA,uBAAAsB,MAAA,GACAvB,SAAAC,eAAA,YAAAsB,MAAA,GACAvB,SAAAC,eAAA,aAAAsB,MAAA,GACAvB,SAAAC,eAAA,iBAAAsB,MAAA,GACAwU,EAAAxU,MAAA,GACAiT,EAAAjT,MAAA,GACAkT,EAAAlT,MAAA,GACA4U,EAAA5U,MAAA,GACA+U,EAAA/U,MAAA,GAGA6U,EAAA7U,MAAA,GACA8U,EAAA9U,MAAA,GAGAoV,EAAAgB,eAGA,MAAAO,EAAAlY,SAAAC,eAAA,oBACA,GAAAiY,EACA,IAAA,IAAAC,KAAAD,EAAAjL,QACAkL,EAAAC,UAAA,EAKAtC,EAAAvU,MAAA,GAGAiV,EAAA,EAGAxW,SAAAC,eAAA,SAAA2K,UAAAE,OAAA,UACA9K,SAAAC,eAAA,SAAA2K,UAAAC,IAAA,UACA7K,SAAAC,eAAA,SAAA2K,UAAAC,IAAA,UACA7K,SAAAC,eAAA,gBAAA2K,UAAAC,IAAA,UAGAoL,EAAArL,UAAAC,IAAA,UACAmL,EAAApL,UAAAE,OAAA,UA1UAkL,EAAAjV,iBAAA,QAAA,KACA,OAAAyV,GACA,KAAA,EACAxW,SAAAC,eAAA,UAAAsB,MAAAC,QACAyV,sBAEA,MAAAoB,EAAArY,SAAAC,eAAA,UAAAsB,MAAAC,OACA8W,EAAAtY,SAAAC,eAAA,YAAAsB,MAAAC,OAEA,IAAA6W,IAAAC,EAEA,YADApY,cAAA,sBAAA,kEAAA,WAGAqX,YAAA,GACAJ,wBAAA,IACA,MACA,KAAA,EAEA,GADAT,EAAAC,EAAA4B,UAAA,GACA,IAAA7B,EAAAlR,OAEA,YADAtF,cAAA,6BAAA,wCAAA,WAGAqX,YAAA,GAEA7C,qBACAsB,EAAApL,UAAAC,IAAA,UACAqL,EAAAtL,UAAAE,OAAA,UACAqM,wBAAA,QAkDA3C,EAAAzT,iBAAA,SAAA2W,oBACAjD,EAAA1T,iBAAA,SAAA2W,oBAIAzB,EAAAlV,iBAAA,QAAA,KACAyV,EAAA,GACAe,YAAAf,EAAA,KAMAV,EAAA/U,iBAAA,QAAA,KACAyX,aAAAjC,GACA,MAAAkC,EAAA3C,EAAAvU,MAAAC,OACAiX,EAAAjT,OAAA,EACAkJ,EAAA9D,UAAAC,IAAA,UAGA0L,EAAAhT,WAAAvC,UACAqT,yBAAAF,eAAAsE,KACA,OAKAzY,SAAAe,iBAAA,QAAAE,IACA6U,EAAA5E,SAAAjQ,EAAAsF,SAAAmI,EAAAwC,SAAAjQ,EAAAsF,SACAmI,EAAA9D,UAAAC,IAAA,YA6DAqL,EAAAnV,iBAAA,QAAAC,UAEA,IAAAmO,EAAA,EACAuH,EAAAxU,QAAA4L,IACA,MAAAL,EAAAgJ,EAAA3G,KAAAkI,GAAAA,EAAA5W,KAAA0M,GACAL,IACA0B,GAAAjF,WAAAuD,EAAAG,aAAArF,gBAKA,MAAAwL,EAAA7J,WAAAkM,EAAA7U,QAAA,EACAyS,EAAAhU,SAAA8G,cAAA,uCAAAvF,MAEA4N,GADA,eAAA6E,EACA7E,EAAA4E,EAAA,IAEAA,EAIA,MAAAE,EAAA/J,WAAAmM,EAAA9U,QAAA,EACA4N,GAAA8E,EAGA,MAAAC,EAAAhK,WAAAlK,SAAAC,eAAA,YAAAsB,QAAA,EAGA4N,GAAA+E,EAUA,IAAAwE,EAAA,GAIAA,EAFAvF,EAAAzR,OAEAyR,EAGA,CACAzR,OAAAoU,EAAAvU,MACAD,OAAAtB,SAAAC,eAAA,UAAAsB,MACA8J,UAAArL,SAAAC,eAAA,aAAAsB,MACAgK,oBAAAvL,SAAAC,eAAA,uBAAAsB,MACAE,SAAAzB,SAAAC,eAAA,YAAAsB,MACA+J,UAAAtL,SAAAC,eAAA,aAAAsB,OAKA,MACAO,EAAA,IAAAC,SAEA+R,EAAA9T,SAAAC,eAAA,cAAAsB,MAGAoX,EAAA,CACAvN,QAAA,CACA1J,OAAAgX,EAAAhX,OACAJ,OAAAoX,EAAApX,OACA+J,UAAAqN,EAAArN,UACAE,oBAAAmN,EAAAnN,oBACA9J,SAAAiX,EAAAjX,SACA6J,UAAAoN,EAAApN,WAEA6J,OAAA,CACAC,QAAAZ,EAAAjT,MAAA,YACA8T,OAAAZ,EAAAlT,MAAA,aAEAgM,aAAAmJ,EACApB,KAAA,CACAC,WAAAzB,EACA0B,mBAAAA,mBAAAnF,QAAA,GACA0D,UAAA,eAAAC,EAAAwB,mBAAAzB,EAAA,IAAAA,EACAC,cAAAA,EACAC,WAAAA,EACAC,SAAAA,EAAA7D,QAAA,IAEA2E,cAAAhV,SAAAC,eAAA,iBAAAsB,MAAAC,OACAiU,YAAAzV,SAAAC,eAAA,cAAAsB,OAMAqX,EAAA3P,KAAAC,UAAAyP,GAGA7W,EAAAM,OAAA,UAAAwW,GAGA,IACA,MAAAtW,QAAAC,MA1CA,qBA0CA,CACAC,OAAA,OACAC,KAAAX,IAGA,IAAAQ,EAAAoE,GACA,MAAA,IAAAC,MAAA,sCAGA,MAAAjE,QAAAJ,EAAAK,OAGAa,eAAAd,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACA,MAAAuC,GACAC,QAAAD,MAAA,yBAAAA,GAEA1C,cAAA,QAAA,4CAAA,YAIAkW,EAAArV,iBAAA,QAAA2T,oBACA2B,EAAAtV,iBAAA,QAAA2T,oBACA4B,EAAAvV,iBAAA,QAAA2T,oBC3XA,GCAA,yBAAA9U,OAAAC,SAAAC,UACAE,SAAAe,iBAAA,oBAAA,WACA,IAAA8X,EAAA7Y,SAAAC,eAAA,YACA6Y,EAAA9Y,SAAAC,eAAA,oBACA8Y,EAAA,IAAAC,UAAAC,MAAAH,GAEA,IAAAI,EAAA,GAEA,IAAAC,EAAA,IAAAC,aAAAC,SAAAR,EAAA,CACAS,kBAAA,EACAC,OAAA,KACAC,YAAA,eACAC,cAAA,CACAC,KAAA,kBACAC,OAAA,QACAC,MAAA,kDAEAC,WAAA,CACAC,MAAA,MACAC,KAAA,WACAC,KAAA,YACAC,MAAA,MACAC,KAAA,SACAC,IAAA,MACAC,KAAA,SAEAC,WAAA,cACAC,OAAA,GACAC,UAqBA,SAAAC,GACA,IAAAC,EAAAza,SAAAC,eAAA,SACAwa,EACAA,EAAAlZ,MAAAiZ,EAAAE,QAEA7X,QAAAD,MAAA,2CAIA+T,GACAA,EAAAgB,eAGAoB,EAAA4B,UA9BAxB,EAAAyB,SAmCA5a,SAAA8G,cAAA,0BACA/F,iBAAA,SAAA,WACAgY,EAAA4B,UAMApY,MAAA,2CACA5B,KAAAgF,GAAAA,EAAAhD,QACAhC,KAAAwL,IACAA,EAAAjK,QAAA2Y,IACA,MAAAC,EAAA,CACA1Z,GAAAyZ,EAAAE,WACAta,MAAA,GAAAoa,EAAAtN,kBAAAsN,EAAAG,iBACAC,MAAAJ,EAAAK,cACAC,IAAAN,EAAAO,aACAC,YAAAR,EAAAS,mBACAC,QAAA,EACAC,MAAAX,EAAAY,cAEAtC,EAAAuC,SAAAZ,OAGA3I,MAAAvP,GAAAC,QAAAD,MAAA,sCAAAA,IAtDA,MAAA+Y,EAAA3b,SAAAC,eAAA,eACA2b,EAAA,IAAA5C,UAAAC,MAAA0C,GACA,IAAAE,EACAlF,EAAA,KACAmF,EAAA,EA4LA,SAAAC,IACA,MAAArF,EAAAC,EAAA4B,UAAA,GACA/D,EAAAxU,SAAAC,eAAA,sBAAAsB,MACAkT,EAAAzU,SAAAC,eAAA,qBAAAsB,MAEA,IAAAiT,IAAAC,GAAA,IAAAiC,EAAAlR,OACA,OAIA,MAAAwW,EAAA,IAAApY,KAAA4Q,GAGAX,GAFA,IAAAjQ,KAAA6Q,GACAuH,GACA,MAEA,IAAAC,EAAA,EAGAvF,EAAAxU,QAAAd,IACA,MAAAqM,EAAAyL,EAAApJ,KAAAkI,GAAAA,EAAA5W,GAAA8a,aAAA9a,GACAqM,IACAwO,GAAAxO,EAAAG,aAAArF,YAAAsL,KAGAiI,EAAAG,EAIA,MAAA/H,EAAAhK,WAAAlK,SAAAC,eAAA,kBAAAsB,QAAA,EACA0S,EAAA/J,WAAAlK,SAAAC,eAAA,oBAAAsB,QAAA,EAEAwS,EAAA7J,WAAAlK,SAAAC,eAAA,mBAAAsB,QAAA,EACA4a,EAAAnc,SAAAC,eAAA,6BAAAmc,QAIAH,GADAE,EACAF,GAAAlI,EAAA,KAEAA,EAIAkI,GAAAhI,EACAgI,GAAA/H,EAGArR,QAAAC,IAAA,kBAAAmZ,EAAA5L,QAAA,UACArQ,SAAAC,eAAA,oBACAsB,MAAA0a,EAAA5L,QAAA,GAzOA8I,EAAAkD,GAAA,cAAArb,eAAAwZ,SAmDAxZ,eAAAwZ,EAAA3Z,GACA,MACAyb,EADA9B,EAAAlW,MACAlD,GAEA,IACA,MAAAkB,QAAAC,MAAA,sBAAA+Z,GACA,IAAAha,EAAAoE,GACA,MAAA,IAAAC,MAAA,oCAAArE,EAAAsE,YAEA,MAAAiU,QAAAvY,EAAAK,OACAkZ,EAAA,IAAAhB,GAYA,SAAAA,GACA7a,SAAAC,eAAA,iBAAAsB,MAAAsZ,EAAAE,WACA/a,SAAAC,eAAA,gBAAAsB,MAAAsZ,EAAAG,eACAhb,SAAAC,eAAA,qBAAAsB,MAAAsZ,EAAAnZ,OACA1B,SAAAC,eAAA,mBAAAsB,MAAAsZ,EAAA0B,kBACAvc,SAAAC,eAAA,6BAAAsB,MAAAsZ,EAAAtP,oBACAvL,SAAAC,eAAA,kBAAAsB,MAAAsZ,EAAApZ,SACAzB,SAAAC,eAAA,mBAAAsB,MAAAsZ,EAAAvP,UACAtL,SAAAC,eAAA,uBAAAsB,MAAAsZ,EAAA7F,cAEA,IAAAR,EAAAqG,EAAAK,cAAAsB,MAAA,KAAA,GACA/H,EAAAoG,EAAAO,aAAAoB,MAAA,KAAA,GAOA,GANAxc,SAAAC,eAAA,sBAAAsB,MAAAiT,EACAxU,SAAAC,eAAA,qBAAAsB,MAAAkT,EAEAzU,SAAAC,eAAA,kBAAAsB,MAAAsZ,EAAA3G,SACAlU,SAAAC,eAAA,oBAAAsB,MAAAsZ,EAAA4B,YAEA,eAAA5B,EAAA6B,eAAA,CACA,IAAAC,EAAA9B,EAAA+B,mBAAA/B,EAAAgC,aAAA,IACA7c,SAAAC,eAAA,mBAAAsB,MAAAob,EAAAtM,QAAA,GACArQ,SAAAC,eAAA,6BAAAmc,SAAA,EACApc,SAAAC,eAAA,wBAAAmc,SAAA,OAEApc,SAAAC,eAAA,mBAAAsB,MAAAsZ,EAAA+B,mBACA5c,SAAAC,eAAA,wBAAAmc,SAAA,EACApc,SAAAC,eAAA,6BAAAmc,SAAA,EAGApc,SAAAC,eAAA,oBAAAsB,MAAAsZ,EAAApF,YACAzV,SAAAC,eAAA,iBAAAsB,MAAAsZ,EAAAiC,UACA9c,SAAAC,eAAA,oBAAAsB,MAAAsZ,EAAAkC,iBA1CAC,CAAAnC,SA8CA7Z,eAAAwT,EAAAC,EAAAwI,GACA,MAAAlH,EAAA/V,SAAAC,eAAA,oBAEA,IACA,MAAA0F,QAAApD,MAAA,iCAAAiS,KAAAC,KACA,IAAAgC,QAAA9Q,EAAAhD,OAEA,MAAA+T,EAAAuG,EAAAA,EAAAT,MAAA,KAAAlQ,IAAAlL,GAAAA,EAAAI,QAAA,GAEA0b,QAAA3a,MAAA,qBACA2W,QAAAgE,EAAAva,OAEA,MAAAwa,EAAAjE,EAAArI,OAAApD,GAAAiJ,EAAA0G,SAAA3P,EAAArM,GAAA8a,aACAzF,EAAAA,EAAA5F,OAAAmH,IAAAtB,EAAA0G,SAAApF,EAAA5W,GAAA8a,aAGAvF,IACAA,EAAA,IAAAC,QAAAb,EAAA,CACAc,kBAAA,EACAC,aAAA,EACAC,iBAAA,oCACAC,eAAA,KAKAL,EAAAgB,eAEA,IAAA0F,EAAA,GAGAF,EAAAjb,QAAAuL,IACA4P,EAAArN,KAAA,CACAzO,MAAAkM,EAAArM,GACAyL,MAAA,cAAAY,EAAAC,YAAAD,EAAAG,aAAAtM,2BAAAmM,EAAAG,aAAAvF,gCAAAoF,EAAAG,aAAArF,kBACA6P,UAAA,MAKA3B,EAAAvU,QAAAuL,IACA4P,EAAArN,KAAA,CACAzO,MAAAkM,EAAArM,GACAyL,MAAA,cAAAY,EAAAC,YAAAD,EAAAG,aAAAtM,2BAAAmM,EAAAG,aAAAvF,gCAAAoF,EAAAG,aAAArF,sBAIAoO,EAAA2G,aAGA3G,EAAAiB,WAAAyF,GAGAtB,IAGA/b,SAAAC,eAAA,oBAAAc,iBAAA,UAAA,WACA4V,EAAA4B,UAAA,GAEAwD,OAIA/b,SAAAC,eAAA,sBAAAc,iBAAA,UAAA,WACAgb,OAGA/b,SAAAC,eAAA,qBAAAc,iBAAA,UAAA,WACAgb,OAGA,MAAAnZ,GACAC,QAAAD,MAAA,6CAAAA,IArHA2a,CAAA1C,EAAAK,cAAAsB,MAAA,KAAA,GAAA3B,EAAAO,aAAAoB,MAAA,KAAA,GAAA3B,EAAA2C,eAEA3c,EAAA8Z,OAEA,MAAA/X,GACAC,QAAAD,MAAA,gDAAAA,IAnEA6a,CAAAjD,EAAAoB,MA8OA5b,SAAAC,eAAA,sBAAAc,iBAAA,SAAAgb,GACA/b,SAAAC,eAAA,qBAAAc,iBAAA,SAAAgb,GACA/b,SAAAC,eAAA,kBAAAc,iBAAA,QAAAgb,GACA/b,SAAAC,eAAA,oBAAAc,iBAAA,QAAAgb,GACA/b,SAAAC,eAAA,mBAAAc,iBAAA,QAAAgb,GACA/b,SAAAC,eAAA,6BAAAc,iBAAA,SAAAgb,GACA/b,SAAAC,eAAA,wBAAAc,iBAAA,SAAAgb,GAMA/b,SAAAC,eAAA,aAAAc,iBAAA,SAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAAwc,EAAA1d,SAAAC,eAAA,iBAAAsB,MAEAoc,EAAA,CACAvS,QAAA,CACA1J,OAAA1B,SAAAC,eAAA,qBAAAsB,MAAAC,OACAF,OAAAtB,SAAAC,eAAA,gBAAAsB,MAAAC,OACA6J,UAAArL,SAAAC,eAAA,mBAAAsB,MAAAC,OACA+J,oBAAAvL,SAAAC,eAAA,6BAAAsB,MAAAC,OACAC,SAAAzB,SAAAC,eAAA,kBAAAsB,MAAAC,OACA8J,UAAAtL,SAAAC,eAAA,mBAAAsB,MAAAC,QAEA2T,OAAA,CACAC,QAAApV,SAAAC,eAAA,sBAAAsB,MAAAC,OAAA,YACA6T,OAAArV,SAAAC,eAAA,qBAAAsB,MAAAC,OAAA,aAEA+L,aAAAoJ,EAAA4B,UAAA,GACAjD,KAAA,CACAC,WAAArL,WAAAlK,SAAAC,eAAA,oBAAAsB,MAAAC,SAAA,EACAgU,mBAAAtL,WAAA4R,GAAA,GAAAzL,QAAA,GACA0D,UAAA/T,SAAAC,eAAA,6BAAAmc,SACAN,GAAA,IAAA5R,WAAAlK,SAAAC,eAAA,mBAAAsB,MAAAC,SAAA,GAAA,IACA0I,WAAAlK,SAAAC,eAAA,mBAAAsB,MAAAC,SAAA,EACAwS,cAAAhU,SAAAC,eAAA,6BAAAmc,QAAA,aAAA,QACAnI,WAAA/J,WAAAlK,SAAAC,eAAA,oBAAAsB,MAAAC,SAAA,EACA0S,SAAAhK,WAAAlK,SAAAC,eAAA,kBAAAsB,MAAAC,SAAA,GAEAwT,cAAAhV,SAAAC,eAAA,uBAAAsB,MAAAC,OACAiU,YAAAzV,SAAAC,eAAA,oBAAAsB,MAAAC,OACAsb,UAAA9c,SAAAC,eAAA,iBAAAsB,OAMA,IAEAvB,SAAAC,eAAA,kBAAA2K,UAAAE,OAAA,UAEA,MAAA1B,QAAA7G,MAAA,sBAAAmb,EAAA,CACAlb,OAAA,QACAuG,QAAA,CACAC,eAAA,oBAEAvG,KAAAwG,KAAAC,UAAAyU,KAMA,GAFA3d,SAAAC,eAAA,kBAAA2K,UAAAC,IAAA,WAEAzB,EAAA1C,GAAA,CACA,MAAAyC,QAAAC,EAAAzG,OACA,MAAA,IAAAgE,MAAAwC,EAAA/I,SAAA,mCAGA,MAAAsC,QAAA0G,EAAAzG,OACAa,eAAAd,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MAGAO,EAAA,gBAAAC,MAAA,QAEA,MAAA+B,GACAC,QAAAD,MAAA,sCAAAA,GACA1C,cAAA,QAAA0C,EAAAyG,QAAA,gBDxWA,oBAAAzJ,OAAAC,SAAAC,SAAA,CAEA,IAAA6E,EACAC,GAAA,EAGA,MAAAgZ,EAAA,CACA9V,EAAA,gBACA+V,EAAA,UACAC,EAAA,YAGAlW,EAAA,CACAC,EAAA,WACAC,EAAA,UAIAjD,EAAA,CACAC,SAAA,EACAC,WAAA,EACAC,SAAA,CACA3C,IAAA,6DAEA4C,IAAA,mOAGAC,WAAA,CACA,CAAAC,WAAA,EAAAC,QAAA,CAAA,EAAA,IACA,CAAA2Y,SAAA,EAAA3Y,QAAA,CAAA,MAQApE,eAAAqE,gBACAT,GACAD,EAAAG,UAGA,MAAAkZ,QAAAC,cAEAD,EAAAxY,OAAA,GACAC,YAAAuY,GAIArZ,EAAA/D,EAAA,oBAAA8E,UAAAb,GACAD,GAAA,EAIA5D,eAAAid,cACA,IACA,MAAAtY,QAAApD,MAAA,iBAEA,aADAoD,EAAAhD,OAEA,MAAAC,GAEA,OADAC,QAAAD,MAAA,6BAAAA,GACA,IAKA,SAAA6C,YAAAuY,GACA,MAAApY,EAAA5F,SAAAC,eAAA,mBACA2F,EAAAC,UAAA,GAEAmY,EAAA9b,QAAA,CAAAgc,EAAAnY,KACA,MAAAoY,EAAAP,EAAAM,EAAAE,SAAA,cACAjW,EAAAP,EAAAsW,EAAA/V,UAAA,cAEAnC,EAAA,mDAEAD,EAAA,wDACAmY,EAAAtc,qFACAsc,EAAA5c,wCACA4c,EAAAG,0CACAH,EAAA5S,2CACA4S,EAAA1Z,uCACA0Z,EAAAzc,8IAEA0c,uDACAhW,oQAKA+V,EAAA9c,gXAMA8c,EAAA9c,yKAMAwE,EAAAC,WAAAG,IApEAX,gBAyEArF,SAAAC,eAAA,mBAAAc,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,wBAAA,CACA,MAAA8X,EAAAha,EAAAiC,OAAAC,QAAA,wBAAAY,aAAA,WAYA,UAXA9G,KAAAC,KAAA,CACAE,MAAA,iBACAC,KAAA,oCACAF,KAAA,UACA6G,kBAAA,EACAC,mBAAA,OACAC,kBAAA,UACAC,kBAAA,eACAC,iBAAA,cAGAC,YACA,IACA,MAAArF,EAAA,iBAAAic,EACAhc,QAAAC,MAAAF,EAAA,CACAG,OAAA,WAGAE,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MAEA,YAAAqC,EAAArC,YACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAAA,QAOA5C,SAAAe,iBAAA,SAAAC,eAAAsD,GACA,GAAAA,EAAAiC,OAAAC,QAAA,qBAAA,CACA,MACA+X,EADAja,EAAAiC,OAAAC,QAAA,qBACAnF,QAAAD,GAEA,IAEA,MAAAkB,QAAAC,MAAA,iBAAAgc,GACA,IAAAjc,EAAAoE,GACA,MAAA,IAAAC,MAAA,6BAAArE,EAAAsE,YAGA,MAAArC,QAAAjC,EAAAK,OAEA3C,SAAAC,eAAA,gBAAAsB,MAAAgD,EAAAjD,OACAtB,SAAAC,eAAA,kBAAAsB,MAAAgD,EAAA8Z,SACAre,SAAAC,eAAA,mBAAAsB,MAAAgD,EAAA+G,UACAtL,SAAAC,eAAA,eAAAsB,MAAAgD,EAAAC,MACAxE,SAAAC,eAAA,kBAAAsB,MAAAgD,EAAA9C,SACAzB,SAAAC,eAAA,gBAAAsB,MAAAgD,EAAA6Z,OACApe,SAAAC,eAAA,iBAAAsB,MAAAgD,EAAA4D,QAGAnI,SAAAC,eAAA,aACA4G,IAAAtC,EAAA3C,IAAA,cAAA2C,EAAA3C,UAAA,yBAGA5B,SAAA8G,cAAA,yBAAAzF,QAAAD,GAAAmd,EAGA3d,EAAA,uBAAAC,MAAA,QAEA,MAAA+B,GACAC,QAAAD,MAAA,0CAAAA,QAMA5C,SAAAC,eAAA,qBAAAc,iBAAA,UAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAAqd,EAAAve,SAAA8G,cAAA,yBAAAzF,QAAAD,GAEAod,EAAA,CACAld,OAAAtB,SAAAC,eAAA,gBAAAsB,MAAAC,OACA6c,SAAAre,SAAAC,eAAA,kBAAAsB,MAAAC,OACA8J,UAAAtL,SAAAC,eAAA,mBAAAsB,MAAAC,OACAgD,MAAAxE,SAAAC,eAAA,eAAAsB,MAAAC,OACAC,SAAAzB,SAAAC,eAAA,kBAAAsB,MAAAC,OACAiD,SAAAzE,SAAAC,eAAA,kBAAAsB,MAAAC,OACAqU,UAAA7V,SAAAC,eAAA,mBAAAsB,MAAAC,OACA4c,OAAApe,SAAAC,eAAA,gBAAAsB,MAAAC,OACA2G,QAAAnI,SAAAC,eAAA,iBAAAsB,MAAAC,OACAI,IAAA5B,SAAAC,eAAA,cAAA4B,MAAA,IAGA,GAAA2c,EAAA/Z,WAAA+Z,EAAA3I,UAKA,GAAA2I,EAAA/c,SAAA+D,OAAA,GACAtF,cAAA,QAAA,qBAAA,aADA,QAKAse,EAAA3I,UAEA,IACA,MAAA/T,EAAA,IAAAC,SACAC,OAAAC,QAAAuc,GAAAtc,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAe,QAAAC,MAAA,iBAAAgc,EAAA,CACA/b,OAAA,OACAC,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAA,+BAAAA,SAxBA1C,cAAA,QAAA,gCAAA,YA6BAF,SAAA8G,cAAA,oBACA/F,iBAAA,SAAAC,eAAAC,GACAA,EAAAC,iBAEA,MAAAud,EAAA,CACAnd,OAAAtB,SAAAC,eAAA,UAAAsB,MAAAC,OACA6c,SAAAre,SAAAC,eAAA,YAAAsB,MAAAC,OACA8J,UAAAtL,SAAAC,eAAA,aAAAsB,MAAAC,OACAgD,MAAAxE,SAAAC,eAAA,SAAAsB,MAAAC,OACAC,SAAAzB,SAAAC,eAAA,YAAAsB,MAAAC,OACAiD,SAAAzE,SAAAC,eAAA,YAAAsB,MAAAC,OACAqU,UAAA7V,SAAAC,eAAA,aAAAsB,MAAAC,OACA4c,OAAApe,SAAAC,eAAA,UAAAsB,MAAAC,OACA2G,QAAAnI,SAAAC,eAAA,WAAAsB,MAAAC,OACAI,IAAA5B,SAAAC,eAAA,QAAA4B,MAAA,IAGA,GAAA,KAAA4c,EAAAja,OAAA,KAAAia,EAAAnd,QAAA,KAAAmd,EAAAnT,WAAA,KAAAmT,EAAAha,UAAA,KAAAga,EAAA5I,WAAA,KAAA4I,EAAAhd,SAEA,YADAwB,eAAA,kCAAA,SAIA,GAAAwb,EAAAha,WAAAga,EAAA5I,UAEA,YADA5S,eAAA,gCAAA,SAIA,GAAAwb,EAAAhd,SAAA+D,OAAA,GAEA,YADAvC,eAAA,qBAAA,SAKA,GADA,6BACAyb,KAAAD,EAAAja,OAAA,QAKAia,EAAA5I,UAEA,IACA,MAAA/T,EAAA,IAAAC,SACAC,OAAAC,QAAAwc,GAAAvc,QAAA,EAAAC,EAAAZ,KAAAO,EAAAM,OAAAD,EAAAZ,IACA,MAAAe,QAAAC,MAAA,gBAAA,CACAC,OAAA,OACAC,KAAAX,IAGAY,QAAAJ,EAAAK,OACAzC,cAAAwC,EAAAvC,OAAAuC,EAAAtC,QAAAsC,EAAArC,MACAgF,gBAEA,MAAAzC,GACAC,QAAAD,MAAA,yBAAAA,SAnBAK,eAAA,oDAAA","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                id: btnActualizarInfo.dataset.id, \n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = '/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                                \n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide');\n            location.reload(); // Recarga la página automáticamente\n        });\n    }        \n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n}","// src/js/alertas.js\n(function() {\n    function mostrarAlerta(titulo, mensaje, tipo, urlRedireccion = null) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); \n            if (urlRedireccion) {\n                window.location.href = urlRedireccion;\n            }\n        });\n    }    \n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block';\n        mensajeResultado.textContent = mensaje;\n\n        mensajeResultado.className = `alert alert-${tipo === 'error' ? 'danger' : tipo === 'success' ? 'success' : 'info'}`;\n\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n\n    function mostrarAlerta3(titulo, mensaje, tipo) {\n            Swal.fire({\n                icon: tipo,\n                title: titulo,\n                text: mensaje,\n                willClose: () => {\n                    // Al cerrar la alerta, recargar la página después de un pequeño retraso\n                    setTimeout(() => {\n                        window.location.reload();\n                    }, 1000); // Ajusta los milisegundos según tu preferencia\n                }\n            }).then(() => {\n                $('.modal').modal('hide'); \n            });\n    }\n\n    function obtenerFechaFormateada() {\n        const fecha = new Date();\n        const year = fecha.getFullYear();\n        const month = String(fecha.getMonth() + 1).padStart(2, '0'); // +1 porque enero es 0\n        const day = String(fecha.getDate()).padStart(2, '0');\n        const hours = String(fecha.getHours()).padStart(2, '0');\n        const minutes = String(fecha.getMinutes()).padStart(2, '0');\n        const seconds = String(fecha.getSeconds()).padStart(2, '0');\n    \n        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    }\n    \n\n    // Hacerlas accesibles globalmente\n    window.mostrarAlerta = mostrarAlerta;\n    window.mostrarAlerta2 = mostrarAlerta2;\n    window.mostrarAlerta3 = mostrarAlerta3;\n    window.obtenerFechaFormateada = obtenerFechaFormateada;\n})();\n","if(window.location.pathname === '/admin/puntodeventa/catalogo'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const productos = await listarProductos(); // Esperamos los datos antes de inicializar DataTable\n\n        if (productos.length > 0) {\n            llenarTabla(productos);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_productos').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarProductos() {\n        try {\n            const response = await fetch('/api/productos');\n            const productos = await response.json();\n            return productos;\n        } catch (error) {\n            console.error('Error al obtener los productos:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(productos) {\n\n        const tbody = document.getElementById('tableBody_productos');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n        //console.log(productos);\n\n        productos.forEach((producto, index) => {\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${producto.nombre}</td>\n                    <td>${producto.precio}</td>\n                    <td class=\"text-center\">${producto.stock}</td>\n                    <td class=\"text-center\">${producto.categoria_producto_id.nombre}</td>\n                    <td class=\"text-center\">${producto.codigo_barras}</td>\n                    <td class=\"text-center\">${producto.proveedor}</td>\n                    <td><img src=\"/build/img/${producto.foto}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarProducto\" \n                            data-id=\"${producto.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarProducto\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarProducto\" data-id=\"${producto.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarProducto')) {\n            \n            const boton = event.target.closest('.btnEditarProducto');\n            const productoId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/productos/${productoId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const producto = await respuesta.json();\n                // Llenar los campos del modal con los datos del producto\n                document.getElementById('nombreEditar').value = producto.nombre;\n                document.getElementById('precioEditar').value = producto.precio;\n                document.getElementById('stockEditar').value = producto.stock;\n                document.getElementById('categoria_idEditar').value = producto.categoria_producto_id;\n                document.getElementById('codigo_barrasEditar').value = producto.codigo_barras;\n                document.getElementById('proveedorEditar').value = producto.proveedor;\n                \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditarP');\n                imgElement.src = producto.foto ? `/build/img/${producto.foto}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarProducto').dataset.id = productoId;\n        \n            } catch (error) {\n                console.error('Error al obtener los datos del producto:', error);\n            }\n        }\n    });\n\n    // ---------------    ACTUALIZAR PRODUCTO     -----------------\n    document.getElementById('formEditarProducto').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const productoId = document.querySelector('.btnActualizarProducto').dataset.id;\n    \n        const productoActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            precio: document.getElementById('precioEditar').value.trim(),\n            stock: document.getElementById('stockEditar').value.trim(),\n            categoria_producto_id: document.getElementById('categoria_idEditar').value.trim(),\n            codigo_barras: document.getElementById('codigo_barrasEditar').value.trim(),\n            proveedor: document.getElementById('proveedorEditar').value.trim(),\n            foto: document.getElementById('fotoP').files[0]\n        };\n\n        //console.log(productoActualizado);\n        //  return;\n    \n        if (!productoActualizado.nombre || !productoActualizado.precio || !productoActualizado.categoria_producto_id) {\n            mostrarAlerta('Error', 'No pueden ir vacios.', 'error');\n            return;\n        }\n\n        try {\n            const datos = new FormData();\n            Object.entries(productoActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/productos/${productoId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            const inputFile = document.getElementById('fotoP');\n            inputFile.value = ''; // Intenta resetear primero\n            if (inputFile.value) { \n                inputFile.parentNode.replaceChild(inputFile.cloneNode(true), inputFile);\n            }\n\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar producto:', error);\n        }\n    });\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_productos').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarProducto')) {\n            const productoId = event.target.closest('.btn-eliminarProducto').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/productos/${productoId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    //  --------------    CREAR NUEVO PRODUCTO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirProducto');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n        // alert('click');\n        // return;\n\n        const productoNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            precio: document.getElementById('precio').value.trim(),\n            stock: document.getElementById('stock').value.trim(),\n            categoria_producto_id: document.getElementById('categoria_id').value.trim(),\n            codigo_barras: document.getElementById('codigo_barras').value.trim(),\n            proveedor: document.getElementById('proveedor').value.trim(),\n            foto: document.getElementById('fotoPN').files[0]\n        };\n\n        // console.log(productoNuevo);\n        // return;\n\n        if (productoNuevo.nombre === \"\" || productoNuevo.precio === \"\" || productoNuevo.stock === \"\" || productoNuevo.categoria_producto_id === \"\" || productoNuevo.codigo_barras === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (productoNuevo.codigo_barras.length != 12) {\n            mostrarAlerta2('Codigo UPC INvalido', 'error');\n            return;\n        }\n\n        try {\n            const datos = new FormData();\n            Object.entries(productoNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/productos', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if(window.location.pathname === '/admin/configuracion/categorias'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const categorias = await listarCategorias(); // Esperamos los datos antes de inicializar DataTable\n\n        if (categorias.length > 0) {\n            llenarTabla(categorias);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_categorias').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarCategorias() {\n        try {\n            const response = await fetch('/api/categorias');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener categorías:', error);\n            return null;\n        }\n    }\n    \n    // Delegación de eventos para eliminación de categorias\n    document.getElementById('tableBody_categorias').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCategoria')) {\n            const categoriaId = event.target.closest('.btn-eliminarCategoria').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/categorias/${categoriaId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(categorias) {\n        const tbody = document.getElementById('tableBody_categorias');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        categorias.forEach((categoria, index) => {\n            const estatus = estatusDictionary[categoria.estado] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${categoria.nombre}</td>\n                    <td class=\"text-center\">${categoria.capacidad_maxima}</td>\n                    <td>${categoria.tipo_cama}</td>\n                    <td>${categoria.precio_base}</td>\n                    <td>${categoria.servicios_incluidos}</td>\n                    <td>${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCategoria\" \n                            data-id=\"${categoria.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCategoria\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCategoria\" data-id=\"${categoria.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar la categoria original\n    let categoriaOriginal = null;\n\n    // ---------------------------    LLENAR MODAL PARA ACTUALIZAR    ------------------------------\n    document.addEventListener('click', async function (e) {\n        if(e.target.closest('.btnEditarCategoria')) { //boton editar que abre modal\n            const boton = e.target.closest('.btnEditarCategoria');\n            const categoriaId = boton.dataset.id;\n            categoriaOriginal = null;\n\n            try {\n                \n                // Obtener datos de la categoria desde la API\n                const url = `/api/categorias/${categoriaId}`;\n                const respuesta = await fetch(url);\n                if(!respuesta.ok){\n                    throw new Error(`Error al obtener categoria: ${respuesta.statusText}`);\n                }\n                const categoria = await respuesta.json();\n                categoriaOriginal = { ...categoria }; // Guarda en la variable global\n\n                // Llenar campos del modal con los datos de la categoria\n                document.getElementById('nombreEditar').value = categoria.nombre;\n                document.getElementById('capacidad_maximaEditar').value = categoria.capacidad_maxima;\n                document.getElementById('tipo_camaEditar').value = categoria.tipo_cama;\n                document.getElementById('precio_baseEditar').value = categoria.precio_base;\n                document.getElementById('servicios_incluidosEditar').value = categoria.servicios_incluidos;\n                document.getElementById('estadoEditar').value = categoria.estado;\n\n                // Guardar el ID de la categoria en el botón de actualización\n                document.querySelector('.btnActualizarCategoria').dataset.id = categoriaId;\n\n            } catch (error) {\n                console.log('Error al obtener los datos de la categoria:', error);\n            }\n        }\n    });\n\n    // ------------------------     ACTUALIZAR CATEGORIA    ------------------------\n    document.getElementById('formEditarCategoria').addEventListener('submit', async function (e) {\n\n        e.preventDefault();\n\n        const categoriaId = document.querySelector('.btnActualizarCategoria').dataset.id;\n\n        const categoriaActualizada = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maximaEditar').value.trim(),\n            tipo_cama: document.getElementById('tipo_camaEditar').value.trim(),\n            precio_base: document.getElementById('precio_baseEditar').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidosEditar').value.trim(),\n            estado: document.getElementById('estadoEditar').value.trim()\n        }\n\n        if (!categoriaOriginal) {\n            console.error('Error: No hay datos originales de la categoria');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        //Comparar con los datos originales\n        let cambios = {};\n        if (categoriaActualizada.nombre !== categoriaOriginal.nombre) cambios.nombre = categoriaActualizada.nombre;\n        if (categoriaActualizada.capacidad_maxima !== categoriaOriginal.capacidad_maxima) cambios.capacidad_maxima = categoriaActualizada.capacidad_maxima;\n        if (categoriaActualizada.tipo_cama !== categoriaOriginal.tipo_cama) cambios.tipo_cama = categoriaActualizada.tipo_cama;\n        if (categoriaActualizada.precio_base !== categoriaOriginal.precio_base) cambios.precio_base = categoriaActualizada.precio_base;\n        if (categoriaActualizada.servicios_incluidos !== categoriaOriginal.servicios_incluidos) cambios.servicios_incluidos = categoriaActualizada.servicios_incluidos;\n        if (categoriaActualizada.estado !== categoriaOriginal.estado) cambios.estado = categoriaActualizada.estado;\n\n        // Si no hay cambios, no se envia la peticion\n        if(Object.keys(cambios).length === 0){\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si es PUT O PATCH\n        const metodo = Object.keys(cambios).length === 6 ? 'PUT' : 'PATCH';\n        const datos = metodo === 'PUT' ? categoriaActualizada : cambios;\n\n        try {\n            // Enviar la actualizacion al servidor\n            const url = `/api/categorias/${categoriaId}`;\n            const respuesta = await fetch(url, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if(!respuesta.ok){\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n            \n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirCategoria = document.querySelector('.btnSubirCategoria');\n    botonSubirCategoria.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const categoriaNueva = {\n            nombre: document.getElementById('nombre').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maxima').value.trim(),\n            tipo_cama: document.getElementById('tipo_cama').value.trim(),\n            precio_base: document.getElementById('precio_base').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidos').value.trim(),\n            estado: document.getElementById('estado').value.trim()\n        };\n\n        if (categoriaNueva.nombre === \"\" || categoriaNueva.capacidad_maxima === \"\" || categoriaNueva.tipo_cama === \"\" || categoriaNueva.precio_base === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(categoriaNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/categorias', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('capacidad_maxima').value = '';\n            document.getElementById('tipo_cama').value = '';\n            document.getElementById('servicios_incluidos').value = '';\n            document.getElementById('precio_base').value = '';\n            document.getElementById('estatado').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if (window.location.pathname === '/admin/salidas/checkout') {\n\n    const params = new URLSearchParams(window.location.search);\n    const idReserva = params.get(\"id\");\n\n    // Elementos del DOM\n    const inputPenalidad = document.getElementById('inputPenalidad');\n    const totalPagarElement = document.getElementById('totalPagar');\n    const metodoPagoSelect = document.getElementById('metodoPago');\n    const btnTerminarReservacion = document.getElementById('btnTerminarReservacion');\n    const grupoEfectivo = document.getElementById('grupoEfectivo');\n    const cantidadEfectivoInput = document.getElementById('cantidadEfectivo');\n    const feriaCalculadaInput = document.getElementById('feriaCalculada');\n\n    // Obtener y guardar el total original\n    const totalOriginal = parseFloat(totalPagarElement.innerText.replace(/,/g, ''));\n    let totalActual = totalOriginal; // se actualizará dinámicamente\n\n    // Función para actualizar el total y mostrar u ocultar el select\n    const actualizarTotalYMetodoPago = () => {\n        let penalidad = parseFloat(inputPenalidad.value);\n        totalActual = totalOriginal;\n\n        if (!isNaN(penalidad)) {\n            totalActual += penalidad;\n        }\n\n        // Actualiza el texto del total\n        totalPagarElement.innerText = totalActual.toLocaleString('es-MX', {\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2\n        });\n\n        // Mostrar u ocultar el <select>\n        metodoPagoSelect.style.display = (totalActual > 0) ? 'block' : 'none';\n\n        // Ocultar la sección de efectivo si el total es 0 o menos\n        if (totalActual <= 0) {\n            grupoEfectivo.classList.add('d-none');\n        }\n    };\n\n    // Mostrar u ocultar sección de efectivo según método de pago\n    metodoPagoSelect.addEventListener('change', () => {\n        if (metodoPagoSelect.value === 'efectivo' && totalActual > 0) {\n            grupoEfectivo.classList.remove('d-none');\n        } else {\n            grupoEfectivo.classList.add('d-none');\n            cantidadEfectivoInput.value = '';\n            feriaCalculadaInput.value = '';\n        }\n    });\n\n    // Calcular feria (cambio) al ingresar la cantidad pagada\n    cantidadEfectivoInput.addEventListener('input', () => {\n        const cantidad = parseFloat(cantidadEfectivoInput.value);\n\n        if (!isNaN(cantidad) && cantidad >= totalActual) {\n            const feria = cantidad - totalActual;\n            feriaCalculadaInput.value = feria.toLocaleString('es-MX', {\n                minimumFractionDigits: 2,\n                maximumFractionDigits: 2\n            });\n        } else {\n            feriaCalculadaInput.value = '';\n        }\n    });\n\n    // Validación al hacer clic en \"Terminar reservación\"\n    btnTerminarReservacion.addEventListener('click', async function (e) {\n        if (totalActual > 0) {\n            if (metodoPagoSelect.value === '') {\n                e.preventDefault();\n                alert('Por favor, selecciona un método de pago.');\n                return;\n            }\n\n            if (metodoPagoSelect.value === 'efectivo') {\n                const cantidad = parseFloat(cantidadEfectivoInput.value);\n                if (isNaN(cantidad) || cantidad < totalActual) {\n                    e.preventDefault();\n                    alert('La cantidad en efectivo es insuficiente para cubrir el total.');\n                    return;\n                }\n            }\n            //Enviar datos al servidor, terminar reservacion y liquidar deudas\n            const url = '';\n            const datos = '';\n            const respuesta = await fetch(url,{\n                method : 'POST',\n                body : datos\n            })\n        }\n        // Si el total es 0, todo está bien sin método de pago, ENVIAR AL SERVIDOR QUE YA ACABO LA RESERVACION\n        const url = '';\n            const datos = '';\n            const respuesta = await fetch(url,{\n                method : 'POST',\n                body : datos\n            })\n    });\n\n    // Ejecutar al cargar\n    actualizarTotalYMetodoPago();\n    inputPenalidad.addEventListener('input', actualizarTotalYMetodoPago);\n}\n","if(window.location.pathname === '/admin/clientes'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [6,7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const clientes = await listarClientes(); // Esperamos los datos antes de inicializar DataTable\n\n        if (clientes.length > 0) {\n            llenarTabla(clientes);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_clientes').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarClientes() {\n        try {\n            const response = await fetch('/api/clientes');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener clientes:', error);\n            return null;\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(clientes) {\n        const tbody = document.getElementById('tableBody_clientes');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        clientes.forEach((cliente, index) => {\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${cliente.nombre}</td>\n                    <td>${cliente.apellidos}</td>\n                    <td>${cliente.telefono}</td>\n                    <td>${cliente.correo}</td>\n                    <td>${cliente.direccion}</td>\n                    <td>${cliente.documento_identidad}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCliente\" \n                            data-id=\"${cliente.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCliente\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCliente\" data-id=\"${cliente.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar el nivel original\n    let clienteOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarCliente')) {\n            const boton = event.target.closest('.btnEditarCliente');\n            const clientesId = boton.dataset.id;\n            clienteOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/clientes/${clientesId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener cliente: ${respuesta.statusText}`);\n                }\n                const cliente = await respuesta.json();\n                clienteOriginal = { ...cliente }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del cliente\n                document.getElementById('nombre').value = cliente.nombre;\n                document.getElementById('apellidos').value = cliente.apellidos;\n                document.getElementById('direccion').value = cliente.direccion;\n                document.getElementById('correo').value = cliente.correo;\n                document.getElementById('telefono').value = cliente.telefono;\n                document.getElementById('documento_identidad').value = cliente.documento_identidad;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarCliente').dataset.id = clientesId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del cliente:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR CLIENTE -----------------\n    document.getElementById('formEditarCliente').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const clienteId = document.querySelector('.btnActualizarCliente').dataset.id;\n\n        const clienteActualizado = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellidos: document.getElementById('apellidos').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            correo: document.getElementById('correo').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            documento_identidad: document.getElementById('documento_identidad').value.trim()\n        };\n\n        if (!clienteOriginal) {\n            console.error('Error: No hay datos originales del cliente');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (clienteActualizado.nombre !== clienteOriginal.nombre) cambios.nombre = clienteActualizado.nombre;\n        if (clienteActualizado.apellidos !== clienteOriginal.apellidos) cambios.apellidos = clienteActualizado.apellidos;\n        if (clienteActualizado.telefono !== clienteOriginal.telefono) cambios.telefono = clienteActualizado.telefono;\n        if (clienteActualizado.correo !== clienteOriginal.correo) cambios.correo = clienteActualizado.correo;\n        if (clienteActualizado.direccion !== clienteOriginal.direccion) cambios.direccion = clienteActualizado.direccion;\n        if (clienteActualizado.documento_identidad !== clienteOriginal.documento_identidad) cambios.documento_identidad = clienteActualizado.documento_identidad;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 6 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? clienteActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/clientes/${clienteId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar cliente:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    // Delegación de eventos para eliminación de clientes\n    document.getElementById('tableBody_clientes').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCliente')) {\n            const clienteId = event.target.closest('.btn-eliminarCliente').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/clientes/${clienteId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n}","if(window.location.pathname === '/admin/configuracion/habitaciones'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const habitaciones = await listarhabitaciones(); // Esperamos los datos antes de inicializar DataTable\n\n        if (habitaciones.length > 0) {\n            llenarTabla(habitaciones);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_habitaciones').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarhabitaciones() {\n        try {\n            const response = await fetch('/api/habitaciones');\n            const habitaciones = await response.json();\n            return habitaciones;\n        } catch (error) {\n            console.error('Error al obtener habitaciones:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(habitaciones) {\n        const tbody = document.getElementById('tableBody_habitaciones');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        habitaciones.forEach((habitacion) => {\n            const estatus = estatusDictionary[habitacion.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${habitacion.numero}</td>\n                    <td>${habitacion.id_nivel.nombre}</td>\n                    <td>${habitacion.id_categoria.nombre}</td>\n                    <td>${habitacion.id_categoria.precio_base}</td>\n                    <td>${habitacion.id_categoria.servicios_incluidos}</td>\n                    <td>${habitacion.detalles_personalizados}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarHabitacion\" \n                            data-id=\"${habitacion.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarHabitacion\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarHabitacion\" data-id=\"${habitacion.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_habitaciones').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarHabitacion')) {\n            const habitacionId = event.target.closest('.btn-eliminarHabitacion').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/habitaciones/${habitacionId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n\n    // Variable global para almacenar el habitacion original\n    let habitacionOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarHabitacion')) {\n            const boton = event.target.closest('.btnEditarHabitacion');\n            const habitacionId = boton.dataset.id;\n            habitacionOriginal = '';\n    \n            try {\n                const respuesta = await fetch(`/api/habitaciones/${habitacionId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener habitación: ${respuesta.statusText}`);\n                }\n                const habitacion = await respuesta.json();\n                console.log(habitacion);\n    \n                habitacionOriginal = { ...habitacion }; // Guardar en variable global\n    \n                // Llenar los campos del modal con los datos de la habitación\n                document.getElementById('numeroEditar').value = habitacion.numero;\n                document.getElementById('id_nivelEditar').value = habitacion.id_nivel.id; // Aquí se asigna el ID del habitacion\n                document.getElementById('id_categoriaEditar').value = habitacion.id_categoria.id; // Aquí el ID de la categoría\n                document.getElementById('detalles_personalizadosEditar').value = habitacion.detalles_personalizados;\n                document.getElementById('estatusEditar').value = habitacion.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarHabitacion').dataset.id = habitacionId;\n    \n            } catch (error) {\n                console.error('Error al obtener los datos de la habitación:', error);\n            }\n        }\n    });\n    \n    // --------------- ACTUALIZAR HABITACION -----------------\n    document.getElementById('formEditarHabitacion').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const habitacionId = document.querySelector('.btnActualizarHabitacion').dataset.id;\n\n        const habitacionActualizada = {\n            numero: document.getElementById('numeroEditar').value.trim(),\n            id_nivel: document.getElementById('id_nivelEditar').value.trim(),\n            id_categoria: document.getElementById('id_categoriaEditar').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizadosEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim()\n        };\n\n        // console.log(habitacionActualizada);\n        // return;\n\n        if (!habitacionOriginal) {\n            console.error('Error: No hay datos originales del habitacion');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (habitacionActualizada.numero !== habitacionOriginal.numero) cambios.numero = habitacionActualizada.numero;\n        if (habitacionActualizada.id_nivel !== habitacionOriginal.id_nivel) cambios.id_nivel = habitacionActualizada.id_nivel;\n        if (habitacionActualizada.id_categoria !== habitacionOriginal.id_categoria) cambios.id_categoria = habitacionActualizada.id_categoria;\n        if (habitacionActualizada.detalles_personalizados !== habitacionOriginal.detalles_personalizados) cambios.detalles_personalizados = habitacionActualizada.detalles_personalizados;\n        if (habitacionActualizada.estatus !== habitacionOriginal.estatus) cambios.estatus = habitacionActualizada.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n        const datos = habitacionActualizada;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/habitaciones/${habitacionId}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar habitacion:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------     CREAR NUEVa HABITACION     ----------------\n    const botonSubirHabitacion = document.querySelector('.btnSubirHabitacion');\n    botonSubirHabitacion.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const habitacionNueva = {\n\n            numero: document.getElementById('numero').value.trim(),\n            id_nivel: document.getElementById('id_nivel').value.trim(),\n            id_categoria: document.getElementById('id_categoria').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizados').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        \n        };\n\n        if (habitacionNueva.id_nivel === \"\" || habitacionNueva.numero === \"\" || habitacionNueva.id_categoria === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(habitacionNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/habitaciones', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario después de crear una habitación\n            document.getElementById('numero').value = '';\n            document.getElementById('detalles_personalizados').value = '';\n            document.getElementById('estatus').value = '1';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n\n}\n","document.addEventListener(\"DOMContentLoaded\", function() {\n    var ctx = document.getElementById('barChart').getContext('2d');\n    var barChart;\n    var periodoSelect = document.getElementById('periodoSelect');\n\n    async function cargarDatos(periodo) {\n        try {\n            const response = await fetch(`/api/ganancias?anio=2025&periodo=${periodo}`);\n    \n            // Si el servidor responde con un 204 No Content, devolvemos un array vacío\n            if (response.status === 204) {\n                actualizarGrafica([], []);\n                return;\n            }\n    \n            const data = await response.json();\n    \n            // Procesar los datos de la API\n            const meses = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"];\n            const labels = data.length > 0 ? data.map(item => meses[item.mes - 1]) : [\"Sin datos\"];\n            const ganancias = data.length > 0 ? data.map(item => parseFloat(item.ganancias)) : [0];\n    \n            actualizarGrafica(labels, ganancias);\n        } catch (error) {\n            console.error(\"Error al cargar datos:\", error);\n        }\n    }\n    \n    function actualizarGrafica(labels, ganancias) {\n        if (barChart) {\n            barChart.destroy();\n        }\n    \n        barChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Ganancias',\n                    data: ganancias,\n                    backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n    \n    // Cargar datos iniciales\n    cargarDatos(periodoSelect.value);\n\n    // Cambiar los datos cuando el usuario seleccione otro período\n    periodoSelect.addEventListener(\"change\", function() {\n        cargarDatos(this.value);\n    });\n});\n","if(window.location.pathname === '/admin/configuracion/niveles'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const niveles = await listarNiveles(); // Esperamos los datos antes de inicializar DataTable\n\n        if (niveles.length > 0) {\n            llenarTabla(niveles);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_niveles').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarNiveles() {\n        try {\n            const response = await fetch('/api/niveles');\n            const niveles = await response.json();\n            return niveles;\n        } catch (error) {\n            console.error('Error al obtener niveles:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(niveles) {\n        const tbody = document.getElementById('tableBody_niveles');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        niveles.forEach((nivel, index) => {\n            const estatus = estatusDictionary[nivel.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${nivel.nombre}</td>\n                    <td>${nivel.numero}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarNivel\" \n                            data-id=\"${nivel.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarNivel\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarNivel\" data-id=\"${nivel.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_niveles').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarNivel')) {\n            const nivelId = event.target.closest('.btn-eliminarNivel').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/niveles/${nivelId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n    \n    // Variable global para almacenar el nivel original\n    let nivelOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarNivel')) {\n            const boton = event.target.closest('.btnEditarNivel');\n            const nivelId = boton.dataset.id;\n            nivelOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/niveles/${nivelId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener nivel: ${respuesta.statusText}`);\n                }\n                const nivel = await respuesta.json();\n                nivelOriginal = { ...nivel }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del nivel\n                document.getElementById('nombreEditar').value = nivel.nombre;\n                document.getElementById('numeroEditar').value = nivel.numero;\n                document.getElementById('estatusEditar').value = nivel.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarNivel').dataset.id = nivelId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del nivel:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR NIVEL -----------------\n    document.getElementById('formEditarNivel').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const nivelId = document.querySelector('.btnActualizarNivel').dataset.id;\n\n        const nivelActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            numero: document.getElementById('numeroEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n        };\n\n        if (!nivelOriginal) {\n            console.error('Error: No hay datos originales del nivel');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (nivelActualizado.nombre !== nivelOriginal.nombre) cambios.nombre = nivelActualizado.nombre;\n        if (nivelActualizado.numero !== nivelOriginal.numero) cambios.numero = nivelActualizado.numero;\n        if (nivelActualizado.estatus !== nivelOriginal.estatus) cambios.estatus = nivelActualizado.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 3 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? nivelActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/niveles/${nivelId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n    \n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirNivel = document.querySelector('.btnSubirNivel');\n    botonSubirNivel.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const nivelNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            numero: document.getElementById('numero').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        };\n\n        if (nivelNuevo.nombre === \"\" || nivelNuevo.numero === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(nivelNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/niveles', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('numero').value = '';\n            document.getElementById('estatus').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if (window.location.pathname === '/admin/puntodeventa/venta/directa') {\n\n    const params = new URLSearchParams(window.location.search);\n    \n    const inputBuscador = document.getElementById('inputBuscarProducto');\n    const listaSugerencias = document.getElementById('listaSugerencias');\n    const tablaVenta = document.getElementById('tablaVentaProductos');\n\n    const grupoMetodoPago = document.getElementById('grupoMetodoPago');\n    const grupoEfectivo = document.getElementById('grupoEfectivo');\n    const metodoPago = document.getElementById('metodoPago');\n    const cantidadEfectivo = document.getElementById('cantidadEfectivo');\n    const feriaCalculada = document.getElementById('feriaCalculada');\n    const inputTotalPagar = document.getElementById('totalPagarVenta');\n\n    const btnTerminarVenta = document.getElementById('terminarVenta');\n\n    let serviciosVendidos = [];\n    let productosDisponibles = []; // Para guardar los productos obtenidos de la búsqueda\n    let total = 0;\n\n    inputBuscador.addEventListener('input', async (e) => {\n        const query = e.target.value.trim();\n        if (query.length >= 3) {\n            try {\n                const url = `/api/productos/codigo/${query}`;\n                const respuesta = await fetch(url);\n                productosDisponibles = await respuesta.json(); // Guardamos los productos disponibles\n                renderSugerencias(productosDisponibles);\n            } catch (error) {\n                console.error('Error al buscar productos:', error);\n                listaSugerencias.innerHTML = '<li class=\"list-group-item text-danger\">Error en la búsqueda</li>';\n                listaSugerencias.classList.remove('d-none');\n            }\n        } else {\n            limpiarLista();\n        }\n    });\n\n    function renderSugerencias(productos) {\n        listaSugerencias.innerHTML = '';\n        if (!Array.isArray(productos) || productos.length === 0) {\n            listaSugerencias.innerHTML = '<li class=\"list-group-item\">No se encontraron productos</li>';\n        } else {\n            productos.forEach(producto => {\n                const li = document.createElement('li');\n                li.classList.add('list-group-item', 'list-group-item-action');\n                li.textContent = `${producto.codigo_barras} - ${producto.nombre}`;\n                li.addEventListener('click', () => {\n                    agregarProducto(producto);  // Le pasamos el objeto completo del producto\n                    limpiarLista();\n                    inputBuscador.value = '';\n                });\n                listaSugerencias.appendChild(li);\n            });\n        }\n        listaSugerencias.classList.remove('d-none');\n    }\n\n    function limpiarLista() {\n        listaSugerencias.innerHTML = '';\n        listaSugerencias.classList.add('d-none');\n    }\n\n    function agregarProducto(producto) {\n        const precioUnitario = parseFloat(producto.precio);\n    \n        // Verificar si el producto ya está en la lista de serviciosVendidos\n        let productoExistente = serviciosVendidos.find(p => p.codigo_barras === producto.codigo_barras);\n    \n        if (productoExistente) {\n            // Si el producto ya existe, incrementamos la cantidad\n            productoExistente.cantidad++;\n            productoExistente.total = productoExistente.cantidad * precioUnitario;\n        } else {\n            // Si el producto no existe, lo agregamos a la lista\n            serviciosVendidos.push({\n                id_producto: producto.id,\n                codigo_barras: producto.codigo_barras,\n                nombre: producto.nombre,  // Agregamos el nombre del producto\n                proveedor: producto.proveedor,  // Agregamos el proveedor\n                precio: parseFloat(producto.precio),  // Precio unitario\n                foto: producto.foto,  // Foto del producto\n                cantidad: 1,\n                total: precioUnitario,\n                stock: producto.stock  // Agregar stock al producto\n            });\n        }\n    \n        // Actualizamos la tabla con los productos\n        actualizarTabla();\n    }\n    \n    // Función para actualizar la tabla\n    function actualizarTabla() {\n        // Limpiar la tabla antes de actualizarla\n        tablaVenta.innerHTML = '';\n    \n        // Recorrer todos los productos vendidos\n        serviciosVendidos.forEach(servicio => {\n            const fila = document.createElement('tr');\n            fila.innerHTML = `\n                <td>${servicio.nombre}</td>\n                <td>${servicio.proveedor}</td>\n                <td>\n                    <div class=\"d-flex justify-content-center align-items-center gap-2\">\n                        <button class=\"btn btn-sm btn-outline-secondary btn-restar\" data-id=\"${servicio.codigo_barras}\">-</button>\n                        <span class=\"cantidad\">${servicio.cantidad}</span>\n                        <button class=\"btn btn-sm btn-outline-secondary btn-sumar\" data-id=\"${servicio.codigo_barras}\" ${servicio.cantidad >= servicio.stock ? 'disabled' : ''}>+</button>\n                    </div>\n                </td>\n                <td>$${parseFloat(servicio.precio).toFixed(2)}</td>\n                <td>$${servicio.total.toFixed(2)}</td>\n                <td><img src=\"/build/img/${servicio.foto}.png\" alt=\"Foto\" width=\"50\" height=\"50\"></td>\n                <td><button class=\"btn btn-danger btn-sm\" data-id=\"${servicio.codigo_barras}\" id=\"eliminarProducto\">Eliminar</button></td>\n            `;\n            tablaVenta.appendChild(fila);\n        });\n        //console.log(serviciosVendidos);\n        // Agregar los eventos de eliminar, sumar y restar después de que la tabla haya sido actualizada\n        agregarEventosEliminar();\n        agregarEventosContador();\n        calcularTotal();\n    }\n    \n    // Función para agregar eventos de eliminación\n    function agregarEventosEliminar() {\n        const botonesEliminar = document.querySelectorAll('#eliminarProducto');\n    \n        botonesEliminar.forEach(boton => {\n            boton.addEventListener('click', function () {\n                const codigoBarras = this.getAttribute('data-id');\n                eliminarProducto(codigoBarras);\n            });\n        });\n    }\n    \n    // Función para eliminar un producto de serviciosVendidos\n    function eliminarProducto(codigoBarras) {\n        // Filtrar el producto que queremos eliminar\n        serviciosVendidos = serviciosVendidos.filter(servicio => servicio.codigo_barras !== codigoBarras);\n    \n        // Volver a actualizar la tabla\n        actualizarTabla();\n    }\n    \n    // Función para agregar eventos de incremento (+) y decremento (-)\n    function agregarEventosContador() {\n        const btnSumar = document.querySelectorAll('.btn-sumar');\n        const btnRestar = document.querySelectorAll('.btn-restar');\n    \n        // Evento de Sumar\n        btnSumar.forEach(btn => {\n            btn.addEventListener('click', function () {\n                const codigoBarras = this.getAttribute('data-id');\n                const producto = serviciosVendidos.find(p => p.codigo_barras === codigoBarras);\n    \n                if (producto && producto.cantidad < producto.stock) {\n                    producto.cantidad++;\n                    producto.total = producto.cantidad * parseFloat(producto.precio);\n                }\n    \n                // Actualizamos la tabla con los productos\n                actualizarTabla();\n            });\n        });\n    \n        // Evento de Restar\n        btnRestar.forEach(btn => {\n            btn.addEventListener('click', function () {\n                const codigoBarras = this.getAttribute('data-id');\n                const producto = serviciosVendidos.find(p => p.codigo_barras === codigoBarras);\n    \n                if (producto && producto.cantidad > 1) {\n                    producto.cantidad--;\n                    producto.total = producto.cantidad * parseFloat(producto.precio);\n                }\n    \n                // Actualizamos la tabla con los productos\n                actualizarTabla();\n            });\n        });\n    }\n\n    function calcularTotal() {\n        total = 0; // Reiniciar el total antes de empezar a sumar\n    \n        serviciosVendidos.forEach(servicio => {\n            total += servicio.total;\n        });\n    \n        const inputTotalPagar = document.getElementById('totalPagarVenta');\n        inputTotalPagar.value = `${total.toFixed(2)}`;\n    }    \n            \n    // Cerrar la lista si hace clic fuera\n    document.addEventListener('click', function (e) {\n        const isClickInside = inputBuscador.contains(e.target) || listaSugerencias.contains(e.target);\n        if (!isClickInside) {\n            limpiarLista();\n        }\n    });\n\n    metodoPago.addEventListener('change', () => {\n        if( metodoPago.value === '2'){\n            grupoEfectivo.classList.add('d-none')\n        }\n        if( metodoPago.value === '3'){\n            grupoEfectivo.classList.add('d-none')\n        }\n        if( metodoPago.value === '1'){\n            grupoEfectivo.classList.remove('d-none');\n        }\n    })\n\n    // Calcular feria cuando se ingresa efectivo\n    cantidadEfectivo.addEventListener('input', () => {\n        // Eliminar cualquier carácter que no sea número o punto decimal\n        const totalRaw = inputTotalPagar.value;\n        const total = parseFloat(totalRaw) || 0;\n        //console.log(total);\n        const efectivo = parseFloat(cantidadEfectivo.value) || 0;\n        //console.log(efectivo);\n        const feria = total - efectivo;\n        feriaCalculada.value = Math.abs(feria);\n    });\n    \n    //enviar datos de la venta al servidor\n    btnTerminarVenta.addEventListener('click',async () => {\n\n        if (serviciosVendidos.length === 0) {\n            mostrarAlerta('Opps.', 'El carrito está vacío', 'warning');\n            return;\n        }\n                \n        //arreglo de objetos\n                const ventas = serviciosVendidos.map(producto => ({\n                    reservacion_id: 0,\n                    producto_id: producto.id_producto,\n                    monto: parseFloat(producto.cantidad * producto.precio),\n                    fecha_pago: obtenerFechaFormateada(),\n                    tipo_pago: 'Publico',\n                    descripcion: producto.nombre,\n                    estado: 1\n                }));\n                \n                const productos = serviciosVendidos.map(producto => ({\n                    producto_id: producto.id_producto,\n                    cantidad: producto.cantidad\n                }));\n                \n                const datos = JSON.stringify({\n                    ventas,     // ← Arreglo de objetos\n                    productos   // ← Arreglo de objetos\n                });                \n                const url = '/api/productos/reservacion/vender';\n\n                try {\n                    const respuesta = await fetch(url, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: datos\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo, '/admin/puntodeventa/vender');\n\n                } catch (error) {\n                    console.error(error);\n                }\n        \n    })\n}\n","if (window.location.pathname === '/admin/puntodeventa/vender/reserva') {\n\n    const params = new URLSearchParams(window.location.search);\n    const idReserva = params.get(\"id\");\n\n    const inputBuscador = document.getElementById('inputBuscarProducto');\n    const listaSugerencias = document.getElementById('listaSugerencias');\n    const tablaVenta = document.getElementById('tablaVentaProductos');\n\n    const cuandoPagar = document.getElementById('cuandoPagar');\n    const grupoMetodoPago = document.getElementById('grupoMetodoPago');\n    const grupoEfectivo = document.getElementById('grupoEfectivo');\n    const metodoPago = document.getElementById('metodoPago');\n    const cantidadEfectivo = document.getElementById('cantidadEfectivo');\n    const feriaCalculada = document.getElementById('feriaCalculada');\n    const inputTotalPagar = document.getElementById('totalPagarVenta');\n\n    const btnTerminarVenta = document.getElementById('terminarVenta');\n\n    let serviciosVendidos = [];\n    let productosDisponibles = []; // Para guardar los productos obtenidos de la búsqueda\n    let total = 0;\n\n    inputBuscador.addEventListener('input', async (e) => {\n        const query = e.target.value.trim();\n        if (query.length >= 3) {\n            try {\n                const url = `/api/productos/codigo/${query}`;\n                const respuesta = await fetch(url);\n                productosDisponibles = await respuesta.json(); // Guardamos los productos disponibles\n                renderSugerencias(productosDisponibles);\n            } catch (error) {\n                console.error('Error al buscar productos:', error);\n                listaSugerencias.innerHTML = '<li class=\"list-group-item text-danger\">Error en la búsqueda</li>';\n                listaSugerencias.classList.remove('d-none');\n            }\n        } else {\n            limpiarLista();\n        }\n    });\n\n    function renderSugerencias(productos) {\n        listaSugerencias.innerHTML = '';\n        if (!Array.isArray(productos) || productos.length === 0) {\n            listaSugerencias.innerHTML = '<li class=\"list-group-item\">No se encontraron productos</li>';\n        } else {\n            productos.forEach(producto => {\n                const li = document.createElement('li');\n                li.classList.add('list-group-item', 'list-group-item-action');\n                li.textContent = `${producto.codigo_barras} - ${producto.nombre}`;\n                li.addEventListener('click', () => {\n                    agregarProducto(producto);  // Le pasamos el objeto completo del producto\n                    limpiarLista();\n                    inputBuscador.value = '';\n                });\n                listaSugerencias.appendChild(li);\n            });\n        }\n        listaSugerencias.classList.remove('d-none');\n    }\n\n    function limpiarLista() {\n        listaSugerencias.innerHTML = '';\n        listaSugerencias.classList.add('d-none');\n    }\n\n    function agregarProducto(producto) {\n        const precioUnitario = parseFloat(producto.precio);\n    \n        // Verificar si el producto ya está en la lista de serviciosVendidos\n        let productoExistente = serviciosVendidos.find(p => p.codigo_barras === producto.codigo_barras);\n    \n        if (productoExistente) {\n            // Si el producto ya existe, incrementamos la cantidad\n            productoExistente.cantidad++;\n            productoExistente.total = productoExistente.cantidad * precioUnitario;\n        } else {\n            // Si el producto no existe, lo agregamos a la lista\n            serviciosVendidos.push({\n                id_producto: producto.id,\n                codigo_barras: producto.codigo_barras,\n                nombre: producto.nombre,  // Agregamos el nombre del producto\n                proveedor: producto.proveedor,  // Agregamos el proveedor\n                precio: parseFloat(producto.precio),  // Precio unitario\n                foto: producto.foto,  // Foto del producto\n                cantidad: 1,\n                total: precioUnitario,\n                stock: producto.stock  // Agregar stock al producto\n            });\n        }\n    \n        // Actualizamos la tabla con los productos\n        actualizarTabla();\n    }\n    \n    // Función para actualizar la tabla\n    function actualizarTabla() {\n        // Limpiar la tabla antes de actualizarla\n        tablaVenta.innerHTML = '';\n    \n        // Recorrer todos los productos vendidos\n        serviciosVendidos.forEach(servicio => {\n            const fila = document.createElement('tr');\n            fila.innerHTML = `\n                <td>${servicio.nombre}</td>\n                <td>${servicio.proveedor}</td>\n                <td>\n                    <div class=\"d-flex justify-content-center align-items-center gap-2\">\n                        <button class=\"btn btn-sm btn-outline-secondary btn-restar\" data-id=\"${servicio.codigo_barras}\">-</button>\n                        <span class=\"cantidad\">${servicio.cantidad}</span>\n                        <button class=\"btn btn-sm btn-outline-secondary btn-sumar\" data-id=\"${servicio.codigo_barras}\" ${servicio.cantidad >= servicio.stock ? 'disabled' : ''}>+</button>\n                    </div>\n                </td>\n                <td>$${parseFloat(servicio.precio).toFixed(2)}</td>\n                <td>$${servicio.total.toFixed(2)}</td>\n                <td><img src=\"/build/img/${servicio.foto}.png\" alt=\"Foto\" width=\"50\" height=\"50\"></td>\n                <td><button class=\"btn btn-danger btn-sm\" data-id=\"${servicio.codigo_barras}\" id=\"eliminarProducto\">Eliminar</button></td>\n            `;\n            tablaVenta.appendChild(fila);\n        });\n        //console.log(serviciosVendidos);\n        // Agregar los eventos de eliminar, sumar y restar después de que la tabla haya sido actualizada\n        agregarEventosEliminar();\n        agregarEventosContador();\n        calcularTotal();\n    }\n    \n    // Función para agregar eventos de eliminación\n    function agregarEventosEliminar() {\n        const botonesEliminar = document.querySelectorAll('#eliminarProducto');\n    \n        botonesEliminar.forEach(boton => {\n            boton.addEventListener('click', function () {\n                const codigoBarras = this.getAttribute('data-id');\n                eliminarProducto(codigoBarras);\n            });\n        });\n    }\n    \n    // Función para eliminar un producto de serviciosVendidos\n    function eliminarProducto(codigoBarras) {\n        // Filtrar el producto que queremos eliminar\n        serviciosVendidos = serviciosVendidos.filter(servicio => servicio.codigo_barras !== codigoBarras);\n    \n        // Volver a actualizar la tabla\n        actualizarTabla();\n    }\n    \n    // Función para agregar eventos de incremento (+) y decremento (-)\n    function agregarEventosContador() {\n        const btnSumar = document.querySelectorAll('.btn-sumar');\n        const btnRestar = document.querySelectorAll('.btn-restar');\n    \n        // Evento de Sumar\n        btnSumar.forEach(btn => {\n            btn.addEventListener('click', function () {\n                const codigoBarras = this.getAttribute('data-id');\n                const producto = serviciosVendidos.find(p => p.codigo_barras === codigoBarras);\n    \n                if (producto && producto.cantidad < producto.stock) {\n                    producto.cantidad++;\n                    producto.total = producto.cantidad * parseFloat(producto.precio);\n                }\n    \n                // Actualizamos la tabla con los productos\n                actualizarTabla();\n            });\n        });\n    \n        // Evento de Restar\n        btnRestar.forEach(btn => {\n            btn.addEventListener('click', function () {\n                const codigoBarras = this.getAttribute('data-id');\n                const producto = serviciosVendidos.find(p => p.codigo_barras === codigoBarras);\n    \n                if (producto && producto.cantidad > 1) {\n                    producto.cantidad--;\n                    producto.total = producto.cantidad * parseFloat(producto.precio);\n                }\n    \n                // Actualizamos la tabla con los productos\n                actualizarTabla();\n            });\n        });\n    }\n\n    function calcularTotal() {\n        total = 0; // Reiniciar el total antes de empezar a sumar\n    \n        serviciosVendidos.forEach(servicio => {\n            total += servicio.total;\n        });\n    \n        const inputTotalPagar = document.getElementById('totalPagarVenta');\n        inputTotalPagar.value = `${total.toFixed(2)}`;\n    }    \n            \n    // Cerrar la lista si hace clic fuera\n    document.addEventListener('click', function (e) {\n        const isClickInside = inputBuscador.contains(e.target) || listaSugerencias.contains(e.target);\n        if (!isClickInside) {\n            limpiarLista();\n        }\n    });\n\n    // Mostrar u ocultar método de pago y efectivo\n    cuandoPagar.addEventListener('change', () => {\n        if (cuandoPagar.value === '1') {\n            grupoMetodoPago.classList.remove('d-none');//mostrar\n            grupoEfectivo.classList.remove('d-none');\n        } else {\n            grupoMetodoPago.classList.add('d-none');\n            grupoEfectivo.classList.add('d-none');\n            cantidadEfectivo.value = '';\n            feriaCalculada.value = '';\n        }\n    });\n\n    metodoPago.addEventListener('change', () => {\n        if( metodoPago.value === '2'){\n            grupoEfectivo.classList.add('d-none')\n        }\n        if( metodoPago.value === '3'){\n            grupoEfectivo.classList.add('d-none')\n        }\n        if( metodoPago.value === '1'){\n            grupoEfectivo.classList.remove('d-none');\n        }\n    })\n\n    // Calcular feria cuando se ingresa efectivo\n    cantidadEfectivo.addEventListener('input', () => {\n        // Eliminar cualquier carácter que no sea número o punto decimal\n        const totalRaw = inputTotalPagar.value;\n        const total = parseFloat(totalRaw) || 0;\n        //console.log(total);\n        const efectivo = parseFloat(cantidadEfectivo.value) || 0;\n        //console.log(efectivo);\n        const feria = total - efectivo;\n        feriaCalculada.value = Math.abs(feria);\n    });\n    \n    //enviar datos de la venta al servidor\n    btnTerminarVenta.addEventListener('click',async () => {\n\n        if (serviciosVendidos.length === 0) {\n            mostrarAlerta('Opps.', 'El carrito está vacío', 'warning');\n            return;\n        }        \n        if(!cuandoPagar.value){\n            mostrarAlerta('Opps.', 'Falta seleccionar metodo de pago', 'warning');\n            return;\n        }\n\n        //SI SE PAGA EN EL MOMENTO\n        if(cuandoPagar.value === '1'){\n                //arreglo de objetos\n                const ventas = serviciosVendidos.map(producto => ({\n                    reservacion_id: idReserva,\n                    producto_id: producto.id_producto,\n                    monto: parseFloat(producto.cantidad * producto.precio),\n                    fecha_pago: obtenerFechaFormateada(),\n                    tipo_pago: 'Huésped',\n                    descripcion: producto.nombre,\n                    estado: 1\n                }));\n                \n                const productos = serviciosVendidos.map(producto => ({\n                    producto_id: producto.id_producto,\n                    cantidad: producto.cantidad\n                }));\n                \n                const datos = JSON.stringify({\n                    ventas,     // ← Arreglo de objetos\n                    productos   // ← Arreglo de objetos\n                });                \n                const url = '/api/productos/reservacion/vender';\n\n                try {\n                    const respuesta = await fetch(url, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: datos\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo, '/admin/puntodeventa/vender');\n\n                } catch (error) {\n                    console.error(error);\n                }\n        } else{ //si se paga despues\n                \n                const ventas = serviciosVendidos.map(producto => ({\n                    reservacion_id: idReserva,\n                    producto_id: producto.id_producto,\n                    monto: parseFloat(producto.cantidad * producto.precio),\n                    fecha_pago: obtenerFechaFormateada(),\n                    tipo_pago: 'Huésped',\n                    descripcion: producto.nombre,\n                    estado: 0\n                }));\n\n                const productos = serviciosVendidos.map(producto => ({\n                    producto_id: producto.id_producto,\n                    cantidad: producto.cantidad\n                }));\n\n                const datos = JSON.stringify({\n                    ventas,     // ← Arreglo de objetos\n                    productos   // ← Arreglo de objetos\n                });                \n                const url = '/api/productos/reservacion/vender';\n\n                try {\n                    const respuesta = await fetch(url, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: datos\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo, '/admin/puntodeventa/vender');\n\n                } catch (error) {\n                    console.error(error);\n                }\n        }\n    })\n}\n","if (window.location.pathname === '/admin/recepcion') {\n    // Seleccionar todos los enlaces con la clase \"small-box-footer\"\n    const habitaciones = document.querySelectorAll('.small-box-footer');\n\n    habitaciones.forEach(habitacion => {\n        // Obtener los valores de los atributos data\n        const id = habitacion.getAttribute('data-id');\n        const estado = habitacion.getAttribute('data-estado');\n\n        // Si la habitación está en estado 3 o 6, mostrar alerta al hacer clic\n        if (estado == 3 || estado == 6 || estado == 8) {\n            habitacion.addEventListener('click', (event) => {\n                event.preventDefault(); // Evita la redirección por defecto\n                \n                Swal.fire({\n                    title: \"¿Limpieza Terminada?\",\n                    icon: \"warning\",\n                    showCancelButton: true,\n                    confirmButtonColor: \"#3085d6\",\n                    cancelButtonColor: \"#d33\",\n                    confirmButtonText: \"Sí, confirmar!\"\n                }).then((result) => {\n                    if (result.isConfirmed) {\n                        let nuevoEstado; // Declarar variable correctamente\n                        \n                        if (estado == 3) {\n                            nuevoEstado = 2;\n                        } else if (estado == 6) {\n                            nuevoEstado = 1;\n                        } else if( estado == 8){\n                            nuevoEstado = 5;\n                        }\n\n                        if (nuevoEstado !== undefined) {\n                            // Llamar a la función para actualizar el estado\n                            actualizarEstadoHabitacion(id, nuevoEstado);\n                        } else {\n                            console.error(\"Error: nuevoEstado no está definido.\");\n                        }\n                    }\n                });\n            });\n        }\n    });\n\n    // Función para actualizar el estado de la habitación mediante PATCH\n    function actualizarEstadoHabitacion(id, nuevoEstado) {\n        fetch(`/api/habitaciones/${id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                id_estado_habitacion: nuevoEstado\n            })\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(`HTTP error! Status: ${response.status}`);\n            }\n            return response.json();\n        })\n        .then(data => {\n            //console.log(\"Respuesta del servidor:\", data);\n            Swal.fire({\n                title: \"Habitación nuevamente disponible\",\n                icon: \"success\"\n            }).then(() => {\n                location.reload(); // Recargar la página para reflejar cambios\n            });\n        })\n        .catch(error => {\n            console.error(\"Error:\", error);\n            Swal.fire({\n                title: \"Error al actualizar\",\n                text: \"No se pudo cambiar la habitación.\",\n                icon: \"error\"\n            });\n        });\n    }\n}","if (window.location.pathname === \"/admin/recepcion/habitacion\") {\n\n    // Elementos del DOM\n    const listaSugerencias = document.getElementById(\"sugerenciaCorreo\");\n    const inputCorreoCliente = document.getElementById(\"correo\");\n    const inputNombreCliente = document.getElementById(\"nombre\");\n    const inputApellidosCliente = document.getElementById(\"apellidos\");\n    const inputDocumentoCliente = document.getElementById(\"documento\");\n    const inputTelefonoCliente = document.getElementById(\"telefono\");\n    const inputDireccionCliente = document.getElementById(\"direccion\");\n\n    //Modal para crear cliente si es nuevo\n    const btnCrearCliente = document.querySelector(\".btnCrearCliente\");\n    const inputNombreClienteNuevo = document.getElementById(\"nombreNuevoCliente\");\n    const inputApellidosClienteNuevo = document.getElementById(\"apellidosNuevoCliente\");\n    const inputCorreoClienteNuevo = document.getElementById(\"correoNuevoCliente\");\n    const inputTelefonoClienteNuevo = document.getElementById(\"telefonoNuevoCliente\");\n    const inputDocumentoClienteNuevo = document.getElementById(\"documento_identidadNuevoCliente\");\n    const inputDireccionClienteNuevo = document.getElementById(\"direccionNuevoCliente\");\n\n    let clienteNuevo = '';\n\n    const inputFechaEntrada = document.getElementById(\"fechaEntrada\");\n    const inputFechaSalida = document.getElementById(\"fechaSalida\");\n    const inputTipoDescuento = document.querySelectorAll(\"input[name='tipoDescuento']\");\n    const inputDescuento = document.getElementById(\"descuento\");\n    const inputCobroExtra = document.getElementById(\"cobroExtra\");\n    const inputAdelanto = document.getElementById(\"adelanto\");\n    const inputTotalPagar = document.getElementById(\"totalPagar\");\n    const precioHabitacion = parseFloat(document.getElementById(\"precio_habitacion\").textContent.trim()) || 0;\n    const inputMetodoPago = document.getElementById(\"metodoPago\");\n    const inputObservaciones = document.getElementById(\"observaciones\");\n    \n    let noches = 1;\n    let totalOriginal = noches * precioHabitacion;\n    let totalPendiente = totalOriginal;\n    let descuento = 0;\n    let tipoDescuento = '';\n    let cobroExtra = 0;\n    let adelanto = 0;\n\n    // Función para buscar clientes por correo en la API\n    async function buscarClientes(correo) {\n        if (correo.length < 3) {\n            listaSugerencias.classList.add(\"d-none\");\n            return;\n        }\n\n        try {\n            const response = await fetch(`/api/clientes/correo/${encodeURIComponent(correo)}`);\n\n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n\n            const clientes = await response.json();\n            mostrarSugerencias(clientes);\n        } catch (error) {\n            console.error(\"Error al obtener clientes:\", error);\n            listaSugerencias.classList.add(\"d-none\");\n        }\n    }\n\n    // Función para mostrar sugerencias de clientes en la lista desplegable\n    function mostrarSugerencias(clientes) {\n        listaSugerencias.innerHTML = \"\";\n\n        if (clientes.length === 0) {\n            listaSugerencias.classList.add(\"d-none\");\n            return;\n        }\n\n        listaSugerencias.classList.remove(\"d-none\");\n\n        clientes.forEach((cliente) => {\n            const item = document.createElement(\"li\");\n            item.classList.add(\"list-group-item\", \"list-group-item-action\");\n            item.textContent = cliente.correo;\n            item.dataset.id = cliente.id;\n            item.addEventListener(\"click\", () => seleccionarCliente(cliente));\n            listaSugerencias.appendChild(item);\n        });\n    }\n\n    // Función para llenar los campos con la información del cliente seleccionado\n    function seleccionarCliente(cliente) {\n        inputCorreoCliente.value = cliente.correo;\n        inputNombreCliente.value = cliente.nombre;\n        inputApellidosCliente.value = cliente.apellidos;\n        inputDocumentoCliente.value = cliente.documento_identidad;\n        inputTelefonoCliente.value = cliente.telefono;\n        inputDireccionCliente.value = cliente.direccion;\n\n        listaSugerencias.classList.add(\"d-none\");\n    }\n\n    // Evento para buscar clientes cuando el usuario escribe en el input\n    inputCorreoCliente.addEventListener(\"input\", (e) => {\n        buscarClientes(e.target.value);\n    });\n\n    // Ocultar sugerencias si el usuario hace clic fuera\n    document.addEventListener(\"click\", (e) => {\n        if (!inputCorreoCliente.contains(e.target) && !listaSugerencias.contains(e.target)) {\n            listaSugerencias.classList.add(\"d-none\");\n        }\n    });\n\n    //Crear cliente nuevo si no esta registrado y llenar la reserva con sus datos\n    btnCrearCliente.addEventListener(\"click\", (event) =>{\n        event.preventDefault();\n\n        clienteNuevo = {\n            nombre: inputNombreClienteNuevo.value.trim(),\n            apellidos: inputApellidosClienteNuevo.value.trim(),\n            correo: inputCorreoClienteNuevo.value.trim(),\n            telefono: inputTelefonoClienteNuevo.value.trim(),\n            documento_identidad: inputDocumentoClienteNuevo.value.trim(), // Tenías un error en \"identad\"\n            direccion: inputDireccionClienteNuevo.value.trim()\n        };\n\n        //Validar los datos del cliente nuevo\n        if(!clienteNuevo.nombre || !clienteNuevo.apellidos || !clienteNuevo.telefono){\n            mostrarAlerta2('Datos Incompletos: El nombre, apellidos y telefono son obligatorios', 'error')\n            return;\n        }\n\n        // Llenar los inputs principales con los datos del nuevo cliente\n        inputNombreCliente.value = clienteNuevo.nombre + \" \" + clienteNuevo.apellidos;\n        inputCorreoCliente.value = clienteNuevo.correo ?? '';\n        inputDocumentoCliente.value = clienteNuevo.documento_identidad ?? '';\n        inputTelefonoCliente.value = clienteNuevo.telefono;\n        inputDireccionCliente.value = clienteNuevo.direccion ?? '';\n        \n        mostrarAlerta('Huesped Agregado','Datos capturados con exito','info');\n    })\n\n    /////////////////////////////\n    function calcularNoches() {\n        const fechaEntrada = new Date(inputFechaEntrada.value);\n        const fechaSalida = new Date(inputFechaSalida.value);\n    \n        if (isNaN(fechaEntrada) || isNaN(fechaSalida) || fechaSalida <= fechaEntrada) {\n            noches = 1;\n        } else {\n            noches = (fechaSalida - fechaEntrada) / (1000 * 60 * 60 * 24);\n        }\n    }\n    \n    function calcularTotalPagar() {\n        totalOriginal = noches * precioHabitacion;\n        \n        descuento = parseFloat(inputDescuento.value) || 0;\n        cobroExtra = parseFloat(inputCobroExtra.value) || 0;\n        adelanto = parseFloat(inputAdelanto.value) || 0;\n        \n        const tipoDescuentoSeleccionado = document.querySelector(\"input[name='tipoDescuento']:checked\");\n        tipoDescuento = tipoDescuentoSeleccionado ? tipoDescuentoSeleccionado.value : '';\n        \n        let totalConDescuento = totalOriginal;\n        if (tipoDescuento === \"PORCENTAJE\") {\n            totalConDescuento -= totalOriginal * (descuento / 100);\n        } else if (tipoDescuento === \"MONTO\") {\n            totalConDescuento -= descuento;\n        }\n        \n        totalPendiente = totalConDescuento + cobroExtra - adelanto;\n        inputTotalPagar.value = totalPendiente.toFixed(2);\n    }\n    \n    function actualizarCalculo() {\n        calcularNoches();\n        calcularTotalPagar();\n    }\n    \n    [inputFechaEntrada, inputFechaSalida, inputDescuento, inputCobroExtra, inputAdelanto].forEach(input => {\n        input.addEventListener(\"input\", actualizarCalculo);\n    });\n    \n    inputTipoDescuento.forEach(radio => {\n        radio.addEventListener(\"change\", actualizarCalculo);\n    });\n    \n    // Calcular total inicial al cargar la página\n    actualizarCalculo();\n\n    //Obtener datos y enviar datos de la reserva de la habitacion al servidor\n    const metodoPago = inputMetodoPago.value;\n    const observaciones = inputObservaciones.value.trim();\n    document.getElementById(\"reservarHabitacion\").addEventListener('click', async (e) => {\n        \n        e.preventDefault();\n        \n        //mostrar alertas o alerta si faltan datos\n        if(!inputNombreCliente.value.trim() || !inputApellidosCliente.value.trim() || !inputTelefonoCliente.value.trim()){\n            mostrarAlerta('Faltan datos del Huesped', 'El nombre, apellidos y telefono son obligatorios', 'warning');\n            return;\n        }\n\n        const params = new URLSearchParams(window.location.search);\n        const idHabitacion = params.get(\"id\");\n\n        const reserva = {\n            cliente: {\n                correo : inputCorreoCliente.value.trim(),\n                nombre : inputNombreCliente.value.trim(),\n                apellidos : inputApellidosCliente.value.trim(),\n                documento_identidad : inputDocumentoCliente.value.trim(),\n                telefono : inputTelefonoCliente.value.trim(),\n                direccion : inputDireccionCliente.value.trim()\n            },\n            fechas : {\n                entrada: `${inputFechaEntrada.value} 14:00:00`,\n                salida: `${inputFechaSalida.value} 12:00:00`\n            },\n            habitaciones: [idHabitacion],\n            pago: {\n                totalPagar: parseFloat(totalPendiente),\n                totalPagarOriginal: parseFloat(totalOriginal),\n                descuento: parseFloat(descuento),\n                tipoDescuento: tipoDescuento,\n                cobroExtra: parseFloat(cobroExtra),\n                adelanto: parseFloat(adelanto),\n                metodo_pago: metodoPago // METODO de PAGO va aquí si el backend lo espera dentro de pago\n            },\n            observaciones: observaciones\n        };\n        \n        // ✅ NO sobreescribas el FormData\n        const formData = new FormData();\n        formData.append('reserva', JSON.stringify(reserva));\n        \n        // ✅ Enviar correctamente el FormData\n        try {\n            const respuesta = await fetch('/api/reservaciones', {\n                method: 'POST',\n                body: formData\n            });\n        \n            if (!respuesta.ok) throw new Error('Error en la respuesta del servidor');\n        \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n        } catch (error) {\n            console.error('Error:', error);\n            mostrarAlerta('Error', 'No se pudo enviar la reserva', 'error');\n        }        \n    })\n}\n","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    // function mostrarAlerta(titulo, mensaje, tipo) {\n    //     Swal.fire({\n    //         icon: tipo,\n    //         title: titulo,\n    //         text: mensaje,\n    //     }).then(() => {\n    //         $('.modal').modal('hide'); // Cierra todos los modales activos\n    //     });\n    // }    \n\n    // function mostrarAlerta2(mensaje, tipo) {\n    //     const mensajeResultado = document.getElementById('mensaje-resultado');\n    //     mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n    //     mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n    //     // Cambiar el color de fondo del contenedor según el tipo de mensaje\n    //     if (tipo === 'error') {\n    //         mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n    //     } else if (tipo === 'success') {\n    //         mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n    //     } else {\n    //         mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n    //     }\n    \n    //     // Opcional: Ocultar el mensaje después de 5 segundos\n    //     setTimeout(() => {\n    //         mensajeResultado.style.display = 'none';\n    //     }, 5000);\n    // }\n    \n}\n","if(window.location.pathname === '/admin/reservaciones'){\n    // Elementos del DOM\n    const inputCorreo = document.getElementById('searchEmail');\n    const listaSugerencias = document.getElementById('sugerenciasCorreo');\n    const fechaEntrada = document.getElementById(\"fechaEntrada\");\n    const fechaSalida = document.getElementById(\"fechaSalida\");\n    const selectHabitacion = document.getElementById(\"habitacion\");\n    const btnSiguiente = document.getElementById('btnSiguiente');\n    const btnAtras = document.getElementById('btnAtras');\n    const btnConfirmar = document.getElementById('btnConfirmar'); // Asegúrate de tener este botón en el modal\n    const totalPagarInput = document.getElementById(\"totalPagar\");\n    const descuentoInput = document.getElementById(\"descuento\");\n    const cobroExtraInput = document.getElementById(\"cobroExtra\");\n    const adelantoInput = document.getElementById(\"adelanto\");\n\n    // Variables de control\n    let timeoutBusqueda;\n    let clienteNuevo = {};  \n    let pasoActual = 1;\n    let habitacionesDisponibles = []; // Definir la variable global para las habitaciones\n    let habitacionesSeleccionadas = [];\n\n    // Inicializar Choices.js para la selección de habitaciones\n    const choices = new Choices(selectHabitacion, {\n        removeItemButton: true,\n        placeholder: true,\n        placeholderValue: \"Seleccione una o más habitaciones\",\n        searchEnabled: false,\n    });\n\n    // Función para buscar clientes por correo en la API\n    async function buscarClientes(correo) {\n        try {\n            const response = await fetch(`/api/clientes/correo/${encodeURIComponent(correo)}`);\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error al obtener clientes:\", error);\n            return [];\n        }\n    }\n\n    // Función para mostrar sugerencias de clientes en la lista desplegable\n    function mostrarSugerencias(clientes) {\n        listaSugerencias.innerHTML = '';\n        if (clientes.length === 0) {\n            listaSugerencias.classList.add('d-none');\n            return;\n        }\n        listaSugerencias.classList.remove('d-none');\n        clientes.forEach(cliente => {\n            const item = document.createElement('li');\n            item.classList.add('list-group-item', 'list-group-item-action');\n            item.textContent = cliente.correo;\n            item.dataset.id = cliente.id;\n            item.addEventListener('click', () => seleccionarCliente(cliente));\n            listaSugerencias.appendChild(item);\n        });\n    }\n\n    // Función para llenar los campos con la información del cliente seleccionado\n    function seleccionarCliente(cliente) {\n        inputCorreo.value = cliente.correo;\n        document.getElementById('nombre').value = cliente.nombre;\n        document.getElementById('apellidos').value = cliente.apellidos;\n        document.getElementById('documento_identidad').value = cliente.documento_identidad;\n        document.getElementById('telefono').value = cliente.telefono;\n        document.getElementById('direccion').value = cliente.direccion;\n        listaSugerencias.classList.add('d-none');\n    }\n\n    // Función para guardar los datos de un nuevo cliente ingresado\n    function guardarClienteNuevo() {\n        clienteNuevo = {\n            correo: inputCorreo.value.trim(),\n            nombre: document.getElementById('nombre').value.trim(),\n            apellidos: document.getElementById('apellidos').value.trim(),\n            documento_identidad: document.getElementById('documento_identidad').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            direccion: document.getElementById('direccion').value.trim()\n        };\n    }\n\n        // Variables para la barra de progreso\n        const progressBar = document.getElementById('progressBar');\n\n        // Función para actualizar la barra de progreso\n        function actualizarBarraProgreso(porcentaje) {\n            progressBar.style.width = `${porcentaje}%`;\n            progressBar.setAttribute('aria-valuenow', porcentaje);\n            progressBar.textContent = `${porcentaje}%`;\n        }\n    \n        // Modificar la lógica de los pasos\n        btnSiguiente.addEventListener('click', () => {\n            switch (pasoActual) {\n                case 1:\n                    if (!document.getElementById('nombre').value.trim()) {\n                        guardarClienteNuevo();\n                    }\n                    const inputNombre = document.getElementById('nombre').value.trim();\n                    const inputTelefono = document.getElementById('telefono').value.trim();\n    \n                    if (!inputNombre || !inputTelefono) {\n                        mostrarAlerta('Campos Obligatorios', 'El nombre y el teléfono son obligatorios para crear reservación', 'warning');\n                        return;\n                    }\n                    cambiarPaso(2);\n                    actualizarBarraProgreso(66);  // Actualizar barra a 66% en el paso 2\n                    break;\n                case 2:\n                    habitacionesSeleccionadas = choices.getValue(true);\n                    if (habitacionesSeleccionadas.length === 0) {\n                        mostrarAlerta('No selecciono habitaciones','Por favor, seleccione una habitación.','warning');\n                        return;\n                    }\n                    cambiarPaso(3);\n                    // Calcular el total cuando llegues al paso 3\n                    calcularTotalPagar();  // Llamada aquí para calcular el total automáticamente\n                    btnSiguiente.classList.add('d-none'); // Ocultar el botón de Siguiente en el paso 3\n                    btnConfirmar.classList.remove('d-none'); // Mostrar el botón de Confirmar en el paso 3\n                    actualizarBarraProgreso(100);  // Actualizar barra a 100% en el paso 3\n                    break;\n            }\n        });\n    \n        // Función para cambiar de paso\n        function cambiarPaso(nuevoPaso) {\n            // Ocultar el paso actual y mostrar el nuevo paso\n            document.getElementById(`step${pasoActual}`).classList.add('d-none');\n            document.getElementById(`step${nuevoPaso}`).classList.remove('d-none');\n    \n            pasoActual = nuevoPaso;\n    \n            // Mostrar u ocultar el botón de \"Atras\" dependiendo del paso actual\n            btnAtras.classList.toggle('d-none', pasoActual === 1);\n    \n            // Actualizar el texto y la visibilidad de los botones\n            if (pasoActual === 3) {\n                btnSiguiente.textContent = \"Registrar\";  // En el paso 3 se muestra \"Registrar\"\n                btnConfirmar.classList.remove('d-none');\n                btnSiguiente.classList.add('d-none');\n            } else {\n                btnSiguiente.textContent = \"Siguiente\";  // En los otros pasos se muestra \"Siguiente\"\n                btnConfirmar.classList.add('d-none');\n                btnSiguiente.classList.remove('d-none');\n            }\n        }\n    /**\n     * Carga habitaciones disponibles según las fechas seleccionadas\n     */\n    async function cargarHabitaciones() {\n        if (!fechaEntrada.value || !fechaSalida.value) return;\n        try {\n            const response = await fetch(`/api/habitaciones/disponibles/${fechaEntrada.value}/${fechaSalida.value}`);\n            habitacionesDisponibles = await response.json();  // Guardar habitaciones disponibles\n            choices.clearChoices();\n            if (habitacionesDisponibles.length === 0) {\n                choices.setChoices([{ value: \"\", label: \"No hay habitaciones disponibles\", disabled: true }]);\n                return;\n            }\n            choices.setChoices(habitacionesDisponibles.map(habitacion => ({\n                value: habitacion.id,\n                label: `Habitación ${habitacion.numero} | ${habitacion.id_categoria.nombre} | Capacidad max. ${habitacion.id_categoria.capacidad_maxima} personas | $${habitacion.id_categoria.precio_base} MXN`\n            })));\n        } catch (error) {\n            console.error(\"Error al obtener habitaciones:\", error);\n        }\n    }\n\n    // Evento para detectar cambios en las fechas y cargar habitacione\n    fechaEntrada.addEventListener(\"change\", cargarHabitaciones);\n    fechaSalida.addEventListener(\"change\", cargarHabitaciones);\n\n    //Maneja el retroceso de pasos en el modal\n     \n    btnAtras.addEventListener('click', () => {\n        if (pasoActual > 1) {\n            cambiarPaso(pasoActual - 1);\n        }\n    });\n\n    // Maneja la búsqueda de clientes por correo con retraso\n    \n    inputCorreo.addEventListener('input', () => {\n        clearTimeout(timeoutBusqueda);\n        const valor = inputCorreo.value.trim();\n        if (valor.length < 3) {\n            listaSugerencias.classList.add('d-none');\n            return;\n        }\n        timeoutBusqueda = setTimeout(async () => {\n            mostrarSugerencias(await buscarClientes(valor));\n        }, 300);\n    });\n\n    // Oculta las sugerencias si se hace clic fuera del input\n     \n    document.addEventListener('click', (e) => {\n        if (!inputCorreo.contains(e.target) && !listaSugerencias.contains(e.target)) {\n            listaSugerencias.classList.add('d-none');\n        }\n    });\n    // Función para calcular el total a pagar\n    function calcularTotalPagar() {\n        let total = 0;\n\n        // Obtener la diferencia de noches entre las fechas de entrada y salida\n        const fechaEntradaDate = new Date(fechaEntrada.value);\n        const fechaSalidaDate = new Date(fechaSalida.value);\n        const diferenciaNoches = (fechaSalidaDate - fechaEntradaDate) / (1000 * 60 * 60 * 24);  // Calculamos la diferencia en días\n\n        if (diferenciaNoches <= 0) {\n            alert(\"La fecha de salida debe ser posterior a la de entrada.\");\n            return;\n        }\n\n        // Sumar los precios base de las habitaciones seleccionadas, multiplicados por las noches\n        habitacionesSeleccionadas.forEach(habitacionId => {\n            const habitacion = habitacionesDisponibles.find(h => h.id === habitacionId);  // Buscar la habitación en las disponibles\n            if (habitacion) {\n                total += parseFloat(habitacion.id_categoria.precio_base) * diferenciaNoches;  // Multiplicar por la cantidad de noches\n            }\n        });\n\n        // Guardamos el total de las habitaciones seleccionadas antes de aplicar ningún descuento o cobro extra\n        totalPagarOriginal = total;  // Aquí almacenamos el precio total sin descuentos ni cobros extras\n\n        // Obtener el descuento ingresado\n        const descuento = parseFloat(descuentoInput.value) || 0;  // Si no se ingresa un valor, el descuento será 0\n        const tipoDescuento = document.querySelector('input[name=\"tipoDescuento\"]:checked') ? \n                              document.querySelector('input[name=\"tipoDescuento\"]:checked').value : \n                              'monto';  // Si no está seleccionado, por defecto es 'monto'\n\n        // Aplicar el descuento\n        if (tipoDescuento === 'PORCENTAJE') {\n            total -= (total * descuento) / 100;  // Descuento en porcentaje\n        } else {\n            total -= descuento;  // Descuento en monto fijo\n        }\n\n        // Aplicar cobro extra\n        const cobroExtra = parseFloat(cobroExtraInput.value) || 0;  // Si no se ingresa un valor, el cobro extra será 0\n        total += cobroExtra;  // Sumar el cobro extra\n\n        // Asegurarse de que el total no sea negativo después de aplicar el descuento y el cobro extra\n        total = total < 0 ? 0 : total;\n\n        // Obtener el adelanto\n        const adelanto = parseFloat(adelantoInput.value) || 0;\n\n        // Restar el adelanto del total\n        total -= adelanto;  // Descontamos el adelanto del total\n\n        // Asegurarse de que el total no sea negativo\n        total = total < 0 ? 0 : total;\n\n        // Actualizar el total en el campo correspondiente\n        totalPagarInput.value = total.toFixed(2);  // Mostrar el total con 2 decimales\n    }\n        // Evento de Confirmar en el paso 3 del modal:\n        btnConfirmar.addEventListener('click', async () => {\n            // Primero, obtendremos todos los valores actualizados\n            let total = 0;\n            habitacionesSeleccionadas.forEach(habitacionId => {\n                const habitacion = habitacionesDisponibles.find(h => h.id === habitacionId);  // Buscar en habitacionesDisponibles\n                if (habitacion) {\n                    total += parseFloat(habitacion.id_categoria.precio_base);\n                }\n            });\n    \n            // Obtener el descuento\n            const descuento = parseFloat(descuentoInput.value) || 0;\n            const tipoDescuento = document.querySelector('input[name=\"tipoDescuento\"]:checked').value;\n            if (tipoDescuento === 'PORCENTAJE') {\n                total -= (total * descuento) / 100; // Se resta el porcentaje del total\n            } else {\n                total -= descuento; // Si es un monto, simplemente lo restamos\n            }\n    \n            // Aplicar cobro extra\n            const cobroExtra = parseFloat(cobroExtraInput.value) || 0;\n            total += cobroExtra;\n    \n            // Obtener el adelanto ingresado en el formulario\n            const adelanto = parseFloat(document.getElementById('adelanto').value) || 0;  // Si no se ingresa un valor, por defecto será 0\n    \n            // Restar el adelanto\n            total -= adelanto;  // Restar el adelanto del total\n    \n            // Asegurarse de que el total no sea negativo\n            //total = total < 0 ? 0 : total;\n            //console.log(total); este totak esta de mas y los calculos al dar confirmar\n    \n            // Actualizar el total en el campo correspondiente\n            //totalPagarInput.value = total.toFixed(2);\n    \n            // Obtener el cliente\n            let clienteFinal = {};\n    \n            if (clienteNuevo.correo) {\n                // Si el cliente es nuevo, usamos los datos que se ingresaron\n                clienteFinal = clienteNuevo;\n            } else {\n                // Si el cliente ya existía y fue seleccionado, usamos sus datos\n                clienteFinal = {\n                    correo: inputCorreo.value,\n                    nombre: document.getElementById('nombre').value,\n                    apellidos: document.getElementById('apellidos').value,\n                    documento_identidad: document.getElementById('documento_identidad').value,\n                    telefono: document.getElementById('telefono').value,\n                    direccion: document.getElementById('direccion').value\n                };\n            }\n    \n            // Enviar los datos al servidor\n            const url = '/api/reservaciones';  // URL de la API de reservaciones\n            const datos = new FormData();\n            \n            const totalPendiente = document.getElementById('totalPagar').value;\n            //console.log(totalPendiente);\n            // Crear la estructura de datos\n            const datosReserva = {\n                cliente: {\n                    correo: clienteFinal.correo,\n                    nombre: clienteFinal.nombre,\n                    apellidos: clienteFinal.apellidos,\n                    documento_identidad: clienteFinal.documento_identidad,\n                    telefono: clienteFinal.telefono,\n                    direccion: clienteFinal.direccion\n                },\n                fechas: {\n                    entrada: `${fechaEntrada.value} 14:00:00`, // Agregar manualmente la hora de entrada\n                    salida: `${fechaSalida.value} 12:00:00`   // Agregar manualmente la hora de salida\n                },\n                habitaciones: habitacionesSeleccionadas,  // Array de habitaciones seleccionadas\n                pago: {\n                    totalPagar: totalPendiente,\n                    totalPagarOriginal: totalPagarOriginal.toFixed(2),\n                    descuento: tipoDescuento === 'PORCENTAJE' ? (totalPagarOriginal * descuento) / 100 : descuento,\n                    tipoDescuento: tipoDescuento,\n                    cobroExtra: cobroExtra,\n                    adelanto: adelanto.toFixed(2)\n                },\n                observaciones: document.getElementById('observaciones').value.trim(),\n                metodo_pago: document.getElementById('metodoPago').value\n            };\n            \n            // console.log(datosReserva);\n            // return;\n            // Convertirlo a JSON para enviar al servidor\n            const jsonDatosReserva = JSON.stringify(datosReserva);\n    \n            // Enviar el JSON usando FormData (si es necesario)\n            datos.append('reserva', jsonDatosReserva);\n    \n            // Realizar la solicitud fetch\n            try {\n                const respuesta = await fetch(url, {\n                    method: 'POST',\n                    body: datos\n                });\n    \n                if (!respuesta.ok) {\n                    throw new Error('Error en la respuesta del servidor');\n                }\n    \n                const resultado = await respuesta.json();\n    \n                // Mostrar alerta con los resultados\n                mostrarAlerta3(resultado.titulo, resultado.mensaje, resultado.tipo);\n            } catch (error) {\n                console.error('Error en la solicitud:', error);\n            // Puedes agregar aquí un mensaje de error al usuario si es necesario\n            mostrarAlerta('Error', 'Hubo un problema al procesar la solicitud', 'error');\n            }\n    });\n    // Agregar listeners para actualizar en tiempo real el total cuando haya cambios\n    descuentoInput.addEventListener('input', calcularTotalPagar);\n    cobroExtraInput.addEventListener('input', calcularTotalPagar);\n    adelantoInput.addEventListener('input', calcularTotalPagar);\n    function resetearModal() {\n        // Limpiar todos los campos del formulario en el modal\n        document.getElementById('nombre').value = '';\n        document.getElementById('apellidos').value = '';\n        document.getElementById('documento_identidad').value = '';\n        document.getElementById('telefono').value = '';\n        document.getElementById('direccion').value = '';\n        document.getElementById('observaciones').value = '';\n        selectHabitacion.value = '';  // Limpiar la selección de habitación\n        fechaEntrada.value = '';  // Limpiar la fecha de entrada\n        fechaSalida.value = '';  // Limpiar la fecha de salida\n        totalPagarInput.value = '';  // Limpiar el total a pagar\n        adelantoInput.value = ''; // Limpiar el adelanto\n\n        // Limpiar los campos específicos de descuento y cobro extra\n        descuentoInput.value = '';  // Limpiar descuento\n        cobroExtraInput.value = '';  // Limpiar cobro extra\n\n        // Limpiar las habitaciones seleccionadas\n        choices.clearChoices();  // Esto debería limpiar las opciones seleccionadas del selector de habitaciones\n        \n        // Limpiar la selección de las habitaciones en el select (si existe el elemento selectHabitacion)\n        const habitacionesSelect = document.getElementById('selectHabitacion');\n        if (habitacionesSelect) {\n            for (let option of habitacionesSelect.options) {\n                option.selected = false;  // Deseleccionar todas las opciones\n            }\n        }\n\n        // Limpiar el campo de correo\n        inputCorreo.value = '';  // Limpiar correo\n\n        // Resetear el paso actual al step 1\n        pasoActual = 1;\n\n        // Mostrar solo el paso 1, ocultando los demás\n        document.getElementById('step1').classList.remove('d-none');\n        document.getElementById('step2').classList.add('d-none');\n        document.getElementById('step3').classList.add('d-none');\n        document.getElementById('btnConfirmar').classList.add('d-none');\n\n        // Resetear la visibilidad de los botones\n        btnAtras.classList.add('d-none');  // Ocultar el botón \"Previo\"\n        btnSiguiente.classList.remove('d-none');  // Mostrar el botón \"Siguiente\"\n    }\n}","if (window.location.pathname === '/admin/usuarios') {\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td><img src=\"/build/img/${user.img}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>${user.telefono}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña en opciones de la tabla -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarUsuario\" \n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuarioEditarModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de usuarios\n    document.getElementById('tableBody_users').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarUsuario')) {\n            const usuarioId = event.target.closest('.btn-eliminarUsuario').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/usuarios/${usuarioId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarUsuario')) {\n            const boton = event.target.closest('.btnEditarUsuario');\n            const userId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/usuarios/${userId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const usuario = await respuesta.json();\n                // Llenar los campos del modal con los datos del usuario\n                document.getElementById('nombreEditar').value = usuario.nombre;\n                document.getElementById('apellidoEditar').value = usuario.apellido;\n                document.getElementById('direccionEditar').value = usuario.direccion;\n                document.getElementById('emailEditar').value = usuario.email;\n                document.getElementById('telefonoEditar').value = usuario.telefono;\n                document.getElementById('rol_idEditar').value = usuario.rol_id;\n                document.getElementById('estatusEditar').value = usuario.estatus;\n    \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditar');\n                imgElement.src = usuario.img ? `/build/img/${usuario.img}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarUsuario').dataset.id = userId;\n    \n                // Abrir el modal manualmente si es necesario\n                $('#usuarioEditarModal').modal('show');\n    \n            } catch (error) {\n                console.error('Error al obtener los datos del usuario:', error);\n            }\n        }\n    });\n    \n    // ---------------    ACTUALIZAR USUARIO     - ----------------\n    document.getElementById('formEditarUsuario').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const userId = document.querySelector('.btnActualizarUsuario').dataset.id;\n    \n        const usuarioActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            apellido: document.getElementById('apellidoEditar').value.trim(),\n            direccion: document.getElementById('direccionEditar').value.trim(),\n            email: document.getElementById('emailEditar').value.trim(),\n            telefono: document.getElementById('telefonoEditar').value.trim(),\n            password: document.getElementById('passwordEditar').value.trim(),\n            password2: document.getElementById('password2Editar').value.trim(),\n            rol_id: document.getElementById('rol_idEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n            img: document.getElementById('logoEditar').files[0]\n        };\n    \n        if (usuarioActualizado.password !== usuarioActualizado.password2) {\n            mostrarAlerta('Error', 'Las contraseñas no coinciden.', 'error');\n            return;\n        }\n\n        if (usuarioActualizado.telefono.length > 10) {\n            mostrarAlerta('Error', 'Telefono no valido', 'error');\n            return;\n        }\n    \n        delete usuarioActualizado.password2; // No enviar password2 al backend\n    \n        try {\n            const datos = new FormData();\n            Object.entries(usuarioActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/usuarios/${userId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar usuario:', error);\n        }\n    });\n\n    //  --------------    CREAR NUEVO USUARIO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const usuarioNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellido: document.getElementById('apellido').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            email: document.getElementById('email').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            password: document.getElementById('password').value.trim(),\n            password2: document.getElementById('password2').value.trim(),\n            rol_id: document.getElementById('rol_id').value.trim(),\n            estatus: document.getElementById('estatus').value.trim(),\n            img: document.getElementById('logo').files[0]\n        };\n\n        if (usuarioNuevo.email === \"\" || usuarioNuevo.nombre === \"\" || usuarioNuevo.direccion === \"\" || usuarioNuevo.password === \"\" || usuarioNuevo.password2 === \"\" || usuarioNuevo.telefono === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (usuarioNuevo.password !== usuarioNuevo.password2) {\n            mostrarAlerta2(\"Las contraseñas no coinciden.\", \"error\");\n            return;\n        }\n\n        if (usuarioNuevo.telefono.length > 10) {\n            mostrarAlerta2('Telefono no valido', 'error');\n            return;\n        }\n\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(usuarioNuevo.email)) {\n            mostrarAlerta2(\"El correo electrónico no tiene un formato válido.\", \"error\");\n            return;\n        }\n\n        delete usuarioNuevo.password2;\n\n        try {\n            const datos = new FormData();\n            Object.entries(usuarioNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/usuarios', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n    \n}","if (window.location.pathname === '/admin/reservaciones') {\n    document.addEventListener('DOMContentLoaded', function () {\n        var calendarEl = document.getElementById('calendar');\n        var modalElement = document.getElementById('modalReservacion');\n        var MyModal = new bootstrap.Modal(modalElement);\n        // Definir todasHabitaciones globalmente\n        let todasHabitaciones = [];\n        // Configuración del calendario\n        var calendar = new FullCalendar.Calendar(calendarEl, {\n            displayEventTime: false,\n            locale: 'es',\n            initialView: 'dayGridMonth',\n            headerToolbar: {\n                left: 'prev,next today',\n                center: 'title',\n                right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'\n            },\n            buttonText: {\n                today: 'Hoy',\n                prev: 'Anterior',\n                next: 'Siguiente',\n                month: 'Mes',\n                week: 'Semana',\n                day: 'Día',\n                list: 'Lista',\n            },\n            allDayText: 'Todo el día',\n            events: [],\n            dateClick: dateClickHandler\n        });\n\n        // Inicializar el calendario\n        calendar.render();\n        setupEventListeners();\n        loadReservations();\n\n        // Variables y modal para edición\n        const modalEditarReservacion = document.getElementById('modalEditar');\n        const MyModalEditarReserva = new bootstrap.Modal(modalEditarReservacion);\n        let reservacionOriginal;\n        let choices = null;\n        let totalPriceBase = 0;\n\n        // Configuración de eventos\n        calendar.on('eventClick', async function(info) {\n            await handleEventClick(info, MyModalEditarReserva);\n        });\n\n        // Manejador de clic en la fecha del calendario\n        function dateClickHandler(info) {\n            var startInput = document.getElementById('start');\n            if (startInput) {\n                startInput.value = info.dateStr;\n            } else {\n                console.error(\"El input con ID 'start' no se encontró.\");\n            }\n\n            // Antes de mostrar el modal, asegúrate de limpiar previamente las selecciones de habitaciones\n            if (choices) {\n                choices.clearChoices();\n            }\n\n            MyModal.show();\n        }\n\n        // Configuración de event listeners\n        function setupEventListeners() {\n            let btnNuevaReservacion = document.querySelector('#btnAgregarReservacion');\n            btnNuevaReservacion.addEventListener('click', function() {\n                MyModal.show();\n            });\n        }\n\n        // Cargar reservas desde el API\n        function loadReservations() {\n            fetch('http://localhost:3000/api/reservaciones')\n                .then(response => response.json())\n                .then(data => {\n                    data.forEach(reservacion => {\n                        const evento = {\n                            id: reservacion.ID_reserva,\n                            title: `${reservacion.habitaciones} | ${reservacion.cliente_nombre}`,\n                            start: reservacion.fecha_entrada,\n                            end: reservacion.fecha_salida,\n                            description: reservacion.estado_descripcion,\n                            allDay: false,\n                            color: reservacion.estado_color\n                        };\n                        calendar.addEvent(evento);\n                    });\n                })\n                .catch(error => console.error('Error al obtener las reservaciones:', error));\n        }\n\n        // Manejar clic en evento del calendario\n        async function handleEventClick(info, modal) {\n            const evento = info.event;\n            const idEvento = evento.id;\n\n            try {\n                const respuesta = await fetch(`/api/reservaciones/${idEvento}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener la reservación: ${respuesta.statusText}`);\n                }\n                const reservacion = await respuesta.json();\n                reservacionOriginal = { ...reservacion };\n                populateEditForm(reservacion);\n                await cargarHabitacionesDisponibles(reservacion.fecha_entrada.split(' ')[0], reservacion.fecha_salida.split(' ')[0], reservacion.ID_habitacion);\n\n                modal.show();\n\n            } catch (error) {\n                console.error('Error al obtener los datos de la reservación:', error);\n            }\n        }\n\n        // Población de formulario de edición\n        function populateEditForm(reservacion) {\n            document.getElementById('idReservacion').value = reservacion.ID_reserva;\n            document.getElementById('nombreEditar').value = reservacion.cliente_nombre;\n            document.getElementById('searchEmailEditar').value = reservacion.correo;\n            document.getElementById('apellidosEditar').value = reservacion.cliente_apellidos;\n            document.getElementById('documento_identidadEditar').value = reservacion.documento_identidad;\n            document.getElementById('telefonoEditar').value = reservacion.telefono;\n            document.getElementById('direccionEditar').value = reservacion.direccion;\n            document.getElementById('observacionesEditar').value = reservacion.observaciones;\n\n            let fechaEntrada = reservacion.fecha_entrada.split(' ')[0];\n            let fechaSalida = reservacion.fecha_salida.split(' ')[0];\n            document.getElementById('fechaEntradaEditar').value = fechaEntrada;\n            document.getElementById('fechaSalidaEditar').value = fechaSalida;\n            // Rellenar campos de pago\n            document.getElementById('adelantoEditar').value = reservacion.adelanto;\n            document.getElementById('cobroExtraEditar').value = reservacion.cobro_extra;\n\n            if (reservacion.tipo_descuento === \"PORCENTAJE\") {\n                let porcentajeDescuento = (reservacion.descuento_aplicado / reservacion.precio_total) * 100;\n                document.getElementById('descuentoEditar').value = porcentajeDescuento.toFixed(2);\n                document.getElementById('descuentoPorcentajeEditar').checked = true;\n                document.getElementById('descuentoMontoEditar').checked = false;\n            } else {\n                document.getElementById('descuentoEditar').value = reservacion.descuento_aplicado;\n                document.getElementById('descuentoMontoEditar').checked = true;\n                document.getElementById('descuentoPorcentajeEditar').checked = false;\n            }\n\n            document.getElementById('metodoPagoEditar').value = reservacion.metodo_pago;\n            document.getElementById('estatusEditar').value = reservacion.ID_estado;\n            document.getElementById('totalPagarEditar').value = reservacion.precio_pendiente;\n        }\n\n        // Cargar habitaciones disponibles\n        async function cargarHabitacionesDisponibles(fechaEntrada, fechaSalida, habitacionesSeleccionadasIds) {\n            const selectHabitacion = document.getElementById('habitacionEditar');\n\n            try {\n                const response = await fetch(`/api/habitaciones/disponibles/${fechaEntrada}/${fechaSalida}`);\n                let habitacionesDisponibles = await response.json();\n                \n                const habitacionesSeleccionadas = habitacionesSeleccionadasIds ? habitacionesSeleccionadasIds.split(',').map(id => id.trim()) : [];\n\n                const responseHabitaciones = await fetch('/api/habitaciones');\n                todasHabitaciones = await responseHabitaciones.json();\n\n                const habitacionesCompletasSeleccionadas = todasHabitaciones.filter(habitacion => habitacionesSeleccionadas.includes(habitacion.id.toString()));\n                habitacionesDisponibles = habitacionesDisponibles.filter(h => !habitacionesSeleccionadas.includes(h.id.toString()));\n\n                // Inicializa Choices solo si aún no está inicializado\n                if (!choices) {\n                    choices = new Choices(selectHabitacion, {\n                        removeItemButton: true,\n                        placeholder: true,\n                        placeholderValue: \"Seleccione una o más habitaciones\",\n                        searchEnabled: false,\n                    });\n                }\n\n                // Elimina las elecciones anteriores antes de agregar nuevas para evitar duplicados\n                choices.clearChoices();\n\n                let opciones = [];\n\n                // Mantén las habitaciones seleccionadas\n                habitacionesCompletasSeleccionadas.forEach(habitacion => {\n                    opciones.push({\n                        value: habitacion.id,\n                        label: `Habitación ${habitacion.numero} | ${habitacion.id_categoria.nombre} | Capacidad max. ${habitacion.id_categoria.capacidad_maxima} personas | $${habitacion.id_categoria.precio_base} MXN`,\n                        selected: true  // Marcar como seleccionada\n                    });\n                });\n\n                // Agrega habitaciones disponibles\n                habitacionesDisponibles.forEach(habitacion => {\n                    opciones.push({\n                        value: habitacion.id,\n                        label: `Habitación ${habitacion.numero} | ${habitacion.id_categoria.nombre} | Capacidad max. ${habitacion.id_categoria.capacidad_maxima} personas | $${habitacion.id_categoria.precio_base} MXN`\n                    });\n                });\n                // Elimina todas las opciones antes de agregar las nuevas\n                choices.clearStore();\n\n                // Establece las nuevas opciones\n                choices.setChoices(opciones);\n\n                // Calcular precio total cuando cambien las habitaciones seleccionadas o las fechas\n                calculateTotalPrice();\n\n                // Obtener habitaciones seleccionadas desde Choices\n                document.getElementById('habitacionEditar').addEventListener('change', function() {\n                    let habitacionesSeleccionadas = choices.getValue(true);\n                    //console.log('Habitaciones seleccionadas:', habitacionesSeleccionadas);\n                    calculateTotalPrice();\n                });\n\n                // Detectar cambio de fechas\n                document.getElementById('fechaEntradaEditar').addEventListener('change', function() {\n                    calculateTotalPrice();\n                });\n\n                document.getElementById('fechaSalidaEditar').addEventListener('change', function() {\n                    calculateTotalPrice();\n                });\n\n            } catch (error) {\n                console.error('Error al obtener habitaciones disponibles:', error);\n            }\n        }\n\n        // Calcular precio total\n        function calculateTotalPrice() {\n            const habitacionesSeleccionadas = choices.getValue(true);\n            const fechaEntrada = document.getElementById('fechaEntradaEditar').value;\n            const fechaSalida = document.getElementById('fechaSalidaEditar').value;\n\n            if (!fechaEntrada || !fechaSalida || habitacionesSeleccionadas.length === 0) {\n                return;\n            }\n\n            // Calcular la cantidad de noches\n            const fechaEntradaObj = new Date(fechaEntrada);\n            const fechaSalidaObj = new Date(fechaSalida);\n            const diferenciaEnTiempo = fechaSalidaObj - fechaEntradaObj;\n            const noches = diferenciaEnTiempo / (1000 * 3600 * 24); // Convertir a días\n\n            let totalPrice = 0;\n\n            // Obtener los precios de las habitaciones seleccionadas\n            habitacionesSeleccionadas.forEach(id => {\n                const habitacion = todasHabitaciones.find(h => h.id.toString() === id);\n                if (habitacion) {\n                    totalPrice += habitacion.id_categoria.precio_base * noches;\n                }\n            });\n            totalPriceBase = totalPrice;\n            // Ahora, ajustamos el total con base en los inputs de pago\n\n            // Obtener valores de inputs de pago\n            const adelanto = parseFloat(document.getElementById('adelantoEditar').value) || 0;\n            const cobroExtra = parseFloat(document.getElementById('cobroExtraEditar').value) || 0;\n\n            const descuento = parseFloat(document.getElementById('descuentoEditar').value) || 0;\n            const descuentoPorcentaje = document.getElementById('descuentoPorcentajeEditar').checked;\n\n            // Si el descuento es por porcentaje, aplicamos el porcentaje\n            if (descuentoPorcentaje) {\n                totalPrice -= (totalPrice * (descuento / 100));\n            } else {\n                totalPrice -= descuento;\n            }\n\n            // Sumamos el cobro extra y restamos el adelanto\n            totalPrice += cobroExtra;\n            totalPrice -= adelanto;\n\n            // Mostrar el precio final\n            console.log(`Precio total: $${totalPrice.toFixed(2)} MXN`);\n            const totalPagarInput = document.getElementById('totalPagarEditar');\n            totalPagarInput.value = totalPrice.toFixed(2);\n        }\n\n        // Función para actualizar el precio cada vez que se cambien los campos de pago\n        function setupEventListenersForPriceUpdates() {\n            // Escuchar cambios en los inputs de fecha, adelanto, cobro extra y descuento\n            document.getElementById('fechaEntradaEditar').addEventListener('change', calculateTotalPrice);\n            document.getElementById('fechaSalidaEditar').addEventListener('change', calculateTotalPrice);\n            document.getElementById('adelantoEditar').addEventListener('input', calculateTotalPrice);\n            document.getElementById('cobroExtraEditar').addEventListener('input', calculateTotalPrice);\n            document.getElementById('descuentoEditar').addEventListener('input', calculateTotalPrice);\n            document.getElementById('descuentoPorcentajeEditar').addEventListener('change', calculateTotalPrice);\n            document.getElementById('descuentoMontoEditar').addEventListener('change', calculateTotalPrice);\n        }\n\n        // Llamamos la función de setup para los listeners\n        setupEventListenersForPriceUpdates();\n\n        document.getElementById('btnEditar').addEventListener('click', async function (e) {\n            e.preventDefault();\n        \n            const reservacionId = document.getElementById('idReservacion').value;\n        \n            const reservacionActualizada = {\n                cliente: {\n                    correo: document.getElementById('searchEmailEditar').value.trim(),\n                    nombre: document.getElementById('nombreEditar').value.trim(),\n                    apellidos: document.getElementById('apellidosEditar').value.trim(),\n                    documento_identidad: document.getElementById('documento_identidadEditar').value.trim(),\n                    telefono: document.getElementById('telefonoEditar').value.trim(),\n                    direccion: document.getElementById('direccionEditar').value.trim()\n                },\n                fechas: {\n                    entrada: `${document.getElementById('fechaEntradaEditar').value.trim()} 14:00:00`, // Hora manual\n                    salida: `${document.getElementById('fechaSalidaEditar').value.trim()} 12:00:00`   // Hora manual\n                },\n                habitaciones: choices.getValue(true), // Suponiendo que choices está correctamente inicializado\n                pago: {\n                    totalPagar: parseFloat(document.getElementById('totalPagarEditar').value.trim()) || 0,\n                    totalPagarOriginal: parseFloat(totalPriceBase || 0).toFixed(2), // Solo lo convierte a número y luego lo redondea\n                    descuento: document.getElementById('descuentoPorcentajeEditar').checked \n                        ? ((totalPriceBase || 0) * (parseFloat(document.getElementById('descuentoEditar').value.trim()) || 0)) / 100 \n                        : parseFloat(document.getElementById('descuentoEditar').value.trim()) || 0,\n                    tipoDescuento: document.getElementById('descuentoPorcentajeEditar').checked ? 'PORCENTAJE' : 'MONTO',\n                    cobroExtra: parseFloat(document.getElementById('cobroExtraEditar').value.trim()) || 0,\n                    adelanto: parseFloat(document.getElementById('adelantoEditar').value.trim()) || 0\n                },                \n                observaciones: document.getElementById('observacionesEditar').value.trim(),\n                metodo_pago: document.getElementById('metodoPagoEditar').value.trim(),\n                ID_estado: document.getElementById('estatusEditar').value\n            };\n\n            //console.log(reservacionActualizada);\n            //return;\n        \n            try {\n                // Mostrar spinner de carga\n                document.getElementById('loadingSpinner').classList.remove('d-none');\n        \n                const respuestaUpdate = await fetch(`/api/reservaciones/${reservacionId}`, {\n                    method: 'PATCH',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(reservacionActualizada)\n                });\n        \n                // Ocultar spinner\n                document.getElementById('loadingSpinner').classList.add('d-none');\n        \n                if (!respuestaUpdate.ok) {\n                    const errorData = await respuestaUpdate.json();\n                    throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n                }\n        \n                const resultado = await respuestaUpdate.json();\n                mostrarAlerta3(resultado.titulo, resultado.mensaje, resultado.tipo);\n        \n                // Cerrar modal\n                $('#modalEditar').modal('hide');\n        \n            } catch (error) {\n                console.error('Error al actualizar la reservación:', error);\n                mostrarAlerta('Error', error.message, 'error');\n            }\n        });                \n    });\n}\n"]}