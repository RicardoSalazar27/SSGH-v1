{"version":3,"sources":["Infohotel.js","auth.js","alertas.js","categorias.js","clientes.js","habitaciones.js","niveles.js","registro.js","usuarios.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","mostrarAlerta","titulo","mensaje","tipo","Swal","fire","icon","title","text","then","$","modal","reload","addEventListener","async","e","preventDefault","hotel","id","dataset","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","error","console","log","mostrarAlerta2","mensajeResultado","style","display","textContent","className","setTimeout","btniniciarSesion","event","usuario","email","password","autorizado","href","dataTable","dataTableInit","estatusDictionary","0","1","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","initDataTable","categorias","listarCategorias","length","llenarTabla","DataTable","response","status","ok","Error","tbody","innerHTML","categoria","index","estatus","estado","row","capacidad_maxima","tipo_cama","precio_base","servicios_incluidos","target","closest","categoriaId","getAttribute","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirmed","categoriaOriginal","statusText","querySelector","categoriaActualizada","cambios","keys","metodo","headers","Content-Type","JSON","stringify","errorData","respuestaUpdate","message","categoriaNueva","clientes","listarClientes","cliente","apellidos","direccion","documento_identidad","clienteOriginal","clientesId","clienteId","clienteActualizado","habitaciones","listarhabitaciones","habitacion","numero","id_nivel","id_categoria","detalles_personalizados","habitacionId","habitacionOriginal","habitacionActualizada","habitacionNueva","niveles","listarNiveles","nivel","nivelId","nivelOriginal","nivelActualizado","nivelNuevo","btnCrear","nuevoUsuario","password2","rolesDictionary","2","3","visible","usuarios","listarUsers","user","rol","rol_id","apellido","usuarioId","userId","src","usuarioActualizado","usuarioNuevo","test"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                id: btnActualizarInfo.dataset.id, \n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = '/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                                \n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide');\n            location.reload(); // Recarga la página automáticamente\n        });\n    }        \n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n}","// src/js/alertas.js\n(function() {\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); \n        });\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block';\n        mensajeResultado.textContent = mensaje;\n\n        mensajeResultado.className = `alert alert-${tipo === 'error' ? 'danger' : tipo === 'success' ? 'success' : 'info'}`;\n\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n\n    // Hacerlas accesibles globalmente\n    window.mostrarAlerta = mostrarAlerta;\n    window.mostrarAlerta2 = mostrarAlerta2;\n})();\n","if(window.location.pathname === '/admin/configuracion/categorias'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const categorias = await listarCategorias(); // Esperamos los datos antes de inicializar DataTable\n\n        if (categorias.length > 0) {\n            llenarTabla(categorias);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_categorias').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarCategorias() {\n        try {\n            const response = await fetch('/api/categorias');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener categorías:', error);\n            return null;\n        }\n    }\n    \n    // Delegación de eventos para eliminación de categorias\n    document.getElementById('tableBody_categorias').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCategoria')) {\n            const categoriaId = event.target.closest('.btn-eliminarCategoria').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/categorias/${categoriaId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(categorias) {\n        const tbody = document.getElementById('tableBody_categorias');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        categorias.forEach((categoria, index) => {\n            const estatus = estatusDictionary[categoria.estado] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${categoria.nombre}</td>\n                    <td class=\"text-center\">${categoria.capacidad_maxima}</td>\n                    <td>${categoria.tipo_cama}</td>\n                    <td>${categoria.precio_base}</td>\n                    <td>${categoria.servicios_incluidos}</td>\n                    <td>${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCategoria\" \n                            data-id=\"${categoria.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCategoria\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCategoria\" data-id=\"${categoria.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar la categoria original\n    let categoriaOriginal = null;\n\n    // ---------------------------    LLENAR MODAL PARA ACTUALIZAR    ------------------------------\n    document.addEventListener('click', async function (e) {\n        if(e.target.closest('.btnEditarCategoria')) { //boton editar que abre modal\n            const boton = e.target.closest('.btnEditarCategoria');\n            const categoriaId = boton.dataset.id;\n            categoriaOriginal = null;\n\n            try {\n                \n                // Obtener datos de la categoria desde la API\n                const url = `/api/categorias/${categoriaId}`;\n                const respuesta = await fetch(url);\n                if(!respuesta.ok){\n                    throw new Error(`Error al obtener categoria: ${respuesta.statusText}`);\n                }\n                const categoria = await respuesta.json();\n                categoriaOriginal = { ...categoria }; // Guarda en la variable global\n\n                // Llenar campos del modal con los datos de la categoria\n                document.getElementById('nombreEditar').value = categoria.nombre;\n                document.getElementById('capacidad_maximaEditar').value = categoria.capacidad_maxima;\n                document.getElementById('tipo_camaEditar').value = categoria.tipo_cama;\n                document.getElementById('precio_baseEditar').value = categoria.precio_base;\n                document.getElementById('servicios_incluidosEditar').value = categoria.servicios_incluidos;\n                document.getElementById('estadoEditar').value = categoria.estado;\n\n                // Guardar el ID de la categoria en el botón de actualización\n                document.querySelector('.btnActualizarCategoria').dataset.id = categoriaId;\n\n            } catch (error) {\n                console.log('Error al obtener los datos de la categoria:', error);\n            }\n        }\n    });\n\n    // ------------------------     ACTUALIZAR CATEGORIA    ------------------------\n    document.getElementById('formEditarCategoria').addEventListener('submit', async function (e) {\n\n        e.preventDefault();\n\n        const categoriaId = document.querySelector('.btnActualizarCategoria').dataset.id;\n\n        const categoriaActualizada = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maximaEditar').value.trim(),\n            tipo_cama: document.getElementById('tipo_camaEditar').value.trim(),\n            precio_base: document.getElementById('precio_baseEditar').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidosEditar').value.trim(),\n            estado: document.getElementById('estadoEditar').value.trim()\n        }\n\n        if (!categoriaOriginal) {\n            console.error('Error: No hay datos originales de la categoria');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        //Comparar con los datos originales\n        let cambios = {};\n        if (categoriaActualizada.nombre !== categoriaOriginal.nombre) cambios.nombre = categoriaActualizada.nombre;\n        if (categoriaActualizada.capacidad_maxima !== categoriaOriginal.capacidad_maxima) cambios.capacidad_maxima = categoriaActualizada.capacidad_maxima;\n        if (categoriaActualizada.tipo_cama !== categoriaOriginal.tipo_cama) cambios.tipo_cama = categoriaActualizada.tipo_cama;\n        if (categoriaActualizada.precio_base !== categoriaOriginal.precio_base) cambios.precio_base = categoriaActualizada.precio_base;\n        if (categoriaActualizada.servicios_incluidos !== categoriaOriginal.servicios_incluidos) cambios.servicios_incluidos = categoriaActualizada.servicios_incluidos;\n        if (categoriaActualizada.estado !== categoriaOriginal.estado) cambios.estado = categoriaActualizada.estado;\n\n        // Si no hay cambios, no se envia la peticion\n        if(Object.keys(cambios).length === 0){\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si es PUT O PATCH\n        const metodo = Object.keys(cambios).length === 6 ? 'PUT' : 'PATCH';\n        const datos = metodo === 'PUT' ? categoriaActualizada : cambios;\n\n        try {\n            // Enviar la actualizacion al servidor\n            const url = `/api/categorias/${categoriaId}`;\n            const respuesta = await fetch(url, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if(!respuesta.ok){\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n            \n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirCategoria = document.querySelector('.btnSubirCategoria');\n    botonSubirCategoria.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const categoriaNueva = {\n            nombre: document.getElementById('nombre').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maxima').value.trim(),\n            tipo_cama: document.getElementById('tipo_cama').value.trim(),\n            precio_base: document.getElementById('precio_base').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidos').value.trim(),\n            estado: document.getElementById('estado').value.trim()\n        };\n\n        if (categoriaNueva.nombre === \"\" || categoriaNueva.capacidad_maxima === \"\" || categoriaNueva.tipo_cama === \"\" || categoriaNueva.precio_base === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(categoriaNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/categorias', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('capacidad_maxima').value = '';\n            document.getElementById('tipo_cama').value = '';\n            document.getElementById('servicios_incluidos').value = '';\n            document.getElementById('precio_base').value = '';\n            document.getElementById('estatado').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if(window.location.pathname === '/admin/clientes'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [6,7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const clientes = await listarClientes(); // Esperamos los datos antes de inicializar DataTable\n\n        if (clientes.length > 0) {\n            llenarTabla(clientes);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_clientes').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarClientes() {\n        try {\n            const response = await fetch('/api/clientes');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener clientes:', error);\n            return null;\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(clientes) {\n        const tbody = document.getElementById('tableBody_clientes');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        clientes.forEach((cliente, index) => {\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${cliente.nombre}</td>\n                    <td>${cliente.apellidos}</td>\n                    <td>${cliente.telefono}</td>\n                    <td>${cliente.correo}</td>\n                    <td>${cliente.direccion}</td>\n                    <td>${cliente.documento_identidad}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCliente\" \n                            data-id=\"${cliente.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCliente\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCliente\" data-id=\"${cliente.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar el nivel original\n    let clienteOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarCliente')) {\n            const boton = event.target.closest('.btnEditarCliente');\n            const clientesId = boton.dataset.id;\n            clienteOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/clientes/${clientesId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener cliente: ${respuesta.statusText}`);\n                }\n                const cliente = await respuesta.json();\n                clienteOriginal = { ...cliente }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del cliente\n                document.getElementById('nombre').value = cliente.nombre;\n                document.getElementById('apellidos').value = cliente.apellidos;\n                document.getElementById('direccion').value = cliente.direccion;\n                document.getElementById('correo').value = cliente.correo;\n                document.getElementById('telefono').value = cliente.telefono;\n                document.getElementById('documento_identidad').value = cliente.documento_identidad;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarCliente').dataset.id = clientesId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del cliente:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR CLIENTE -----------------\n    document.getElementById('formEditarCliente').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const clienteId = document.querySelector('.btnActualizarCliente').dataset.id;\n\n        const clienteActualizado = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellidos: document.getElementById('apellidos').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            correo: document.getElementById('correo').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            documento_identidad: document.getElementById('documento_identidad').value.trim()\n        };\n\n        if (!clienteOriginal) {\n            console.error('Error: No hay datos originales del cliente');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (clienteActualizado.nombre !== clienteOriginal.nombre) cambios.nombre = clienteActualizado.nombre;\n        if (clienteActualizado.apellidos !== clienteOriginal.apellidos) cambios.apellidos = clienteActualizado.apellidos;\n        if (clienteActualizado.telefono !== clienteOriginal.telefono) cambios.telefono = clienteActualizado.telefono;\n        if (clienteActualizado.correo !== clienteOriginal.correo) cambios.correo = clienteActualizado.correo;\n        if (clienteActualizado.direccion !== clienteOriginal.direccion) cambios.direccion = clienteActualizado.direccion;\n        if (clienteActualizado.documento_identidad !== clienteOriginal.documento_identidad) cambios.documento_identidad = clienteActualizado.documento_identidad;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 6 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? clienteActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/clientes/${clienteId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar cliente:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    // Delegación de eventos para eliminación de clientes\n    document.getElementById('tableBody_clientes').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCliente')) {\n            const clienteId = event.target.closest('.btn-eliminarCliente').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/clientes/${clienteId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n}","if(window.location.pathname === '/admin/configuracion/habitaciones'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const habitaciones = await listarhabitaciones(); // Esperamos los datos antes de inicializar DataTable\n\n        if (habitaciones.length > 0) {\n            llenarTabla(habitaciones);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_habitaciones').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarhabitaciones() {\n        try {\n            const response = await fetch('/api/habitaciones');\n            const habitaciones = await response.json();\n            return habitaciones;\n        } catch (error) {\n            console.error('Error al obtener habitaciones:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(habitaciones) {\n        const tbody = document.getElementById('tableBody_habitaciones');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        habitaciones.forEach((habitacion) => {\n            const estatus = estatusDictionary[habitacion.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${habitacion.numero}</td>\n                    <td>${habitacion.id_nivel.nombre}</td>\n                    <td>${habitacion.id_categoria.nombre}</td>\n                    <td>${habitacion.id_categoria.precio_base}</td>\n                    <td>${habitacion.id_categoria.servicios_incluidos}</td>\n                    <td>${habitacion.detalles_personalizados}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarHabitacion\" \n                            data-id=\"${habitacion.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarHabitacion\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarHabitacion\" data-id=\"${habitacion.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_habitaciones').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarHabitacion')) {\n            const habitacionId = event.target.closest('.btn-eliminarHabitacion').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/habitaciones/${habitacionId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n\n    // Variable global para almacenar el habitacion original\n    let habitacionOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarHabitacion')) {\n            const boton = event.target.closest('.btnEditarHabitacion');\n            const habitacionId = boton.dataset.id;\n            habitacionOriginal = '';\n    \n            try {\n                const respuesta = await fetch(`/api/habitaciones/${habitacionId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener habitación: ${respuesta.statusText}`);\n                }\n                const habitacion = await respuesta.json();\n                console.log(habitacion);\n    \n                habitacionOriginal = { ...habitacion }; // Guardar en variable global\n    \n                // Llenar los campos del modal con los datos de la habitación\n                document.getElementById('numeroEditar').value = habitacion.numero;\n                document.getElementById('id_nivelEditar').value = habitacion.id_nivel.id; // Aquí se asigna el ID del habitacion\n                document.getElementById('id_categoriaEditar').value = habitacion.id_categoria.id; // Aquí el ID de la categoría\n                document.getElementById('detalles_personalizadosEditar').value = habitacion.detalles_personalizados;\n                document.getElementById('estatusEditar').value = habitacion.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarHabitacion').dataset.id = habitacionId;\n    \n            } catch (error) {\n                console.error('Error al obtener los datos de la habitación:', error);\n            }\n        }\n    });\n    \n    // --------------- ACTUALIZAR HABITACION -----------------\n    document.getElementById('formEditarHabitacion').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const habitacionId = document.querySelector('.btnActualizarHabitacion').dataset.id;\n\n        const habitacionActualizada = {\n            numero: document.getElementById('numeroEditar').value.trim(),\n            id_nivel: document.getElementById('id_nivelEditar').value.trim(),\n            id_categoria: document.getElementById('id_categoriaEditar').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizadosEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim()\n        };\n\n        // console.log(habitacionActualizada);\n        // return;\n\n        if (!habitacionOriginal) {\n            console.error('Error: No hay datos originales del habitacion');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (habitacionActualizada.numero !== habitacionOriginal.numero) cambios.numero = habitacionActualizada.numero;\n        if (habitacionActualizada.id_nivel !== habitacionOriginal.id_nivel) cambios.id_nivel = habitacionActualizada.id_nivel;\n        if (habitacionActualizada.id_categoria !== habitacionOriginal.id_categoria) cambios.id_categoria = habitacionActualizada.id_categoria;\n        if (habitacionActualizada.detalles_personalizados !== habitacionOriginal.detalles_personalizados) cambios.detalles_personalizados = habitacionActualizada.detalles_personalizados;\n        if (habitacionActualizada.estatus !== habitacionOriginal.estatus) cambios.estatus = habitacionActualizada.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n        const datos = habitacionActualizada;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/habitaciones/${habitacionId}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar habitacion:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------     CREAR NUEVa HABITACION     ----------------\n    const botonSubirHabitacion = document.querySelector('.btnSubirHabitacion');\n    botonSubirHabitacion.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const habitacionNueva = {\n\n            numero: document.getElementById('numero').value.trim(),\n            id_nivel: document.getElementById('id_nivel').value.trim(),\n            id_categoria: document.getElementById('id_categoria').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizados').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        \n        };\n\n        if (habitacionNueva.id_nivel === \"\" || habitacionNueva.numero === \"\" || habitacionNueva.id_categoria === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(habitacionNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/habitaciones', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario después de crear una habitación\n            document.getElementById('numero').value = '';\n            document.getElementById('detalles_personalizados').value = '';\n            document.getElementById('estatus').value = '1';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n\n}\n","if(window.location.pathname === '/admin/configuracion/niveles'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const niveles = await listarNiveles(); // Esperamos los datos antes de inicializar DataTable\n\n        if (niveles.length > 0) {\n            llenarTabla(niveles);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_niveles').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarNiveles() {\n        try {\n            const response = await fetch('/api/niveles');\n            const niveles = await response.json();\n            return niveles;\n        } catch (error) {\n            console.error('Error al obtener niveles:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(niveles) {\n        const tbody = document.getElementById('tableBody_niveles');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        niveles.forEach((nivel, index) => {\n            const estatus = estatusDictionary[nivel.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${nivel.nombre}</td>\n                    <td>${nivel.numero}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarNivel\" \n                            data-id=\"${nivel.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarNivel\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarNivel\" data-id=\"${nivel.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_niveles').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarNivel')) {\n            const nivelId = event.target.closest('.btn-eliminarNivel').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/niveles/${nivelId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n    \n    // Variable global para almacenar el nivel original\n    let nivelOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarNivel')) {\n            const boton = event.target.closest('.btnEditarNivel');\n            const nivelId = boton.dataset.id;\n            nivelOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/niveles/${nivelId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener nivel: ${respuesta.statusText}`);\n                }\n                const nivel = await respuesta.json();\n                nivelOriginal = { ...nivel }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del nivel\n                document.getElementById('nombreEditar').value = nivel.nombre;\n                document.getElementById('numeroEditar').value = nivel.numero;\n                document.getElementById('estatusEditar').value = nivel.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarNivel').dataset.id = nivelId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del nivel:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR NIVEL -----------------\n    document.getElementById('formEditarNivel').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const nivelId = document.querySelector('.btnActualizarNivel').dataset.id;\n\n        const nivelActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            numero: document.getElementById('numeroEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n        };\n\n        if (!nivelOriginal) {\n            console.error('Error: No hay datos originales del nivel');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (nivelActualizado.nombre !== nivelOriginal.nombre) cambios.nombre = nivelActualizado.nombre;\n        if (nivelActualizado.numero !== nivelOriginal.numero) cambios.numero = nivelActualizado.numero;\n        if (nivelActualizado.estatus !== nivelOriginal.estatus) cambios.estatus = nivelActualizado.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 3 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? nivelActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/niveles/${nivelId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n    \n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirNivel = document.querySelector('.btnSubirNivel');\n    botonSubirNivel.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const nivelNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            numero: document.getElementById('numero').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        };\n\n        if (nivelNuevo.nombre === \"\" || nivelNuevo.numero === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(nivelNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/niveles', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('numero').value = '';\n            document.getElementById('estatus').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    // function mostrarAlerta(titulo, mensaje, tipo) {\n    //     Swal.fire({\n    //         icon: tipo,\n    //         title: titulo,\n    //         text: mensaje,\n    //     }).then(() => {\n    //         $('.modal').modal('hide'); // Cierra todos los modales activos\n    //     });\n    // }    \n\n    // function mostrarAlerta2(mensaje, tipo) {\n    //     const mensajeResultado = document.getElementById('mensaje-resultado');\n    //     mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n    //     mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n    //     // Cambiar el color de fondo del contenedor según el tipo de mensaje\n    //     if (tipo === 'error') {\n    //         mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n    //     } else if (tipo === 'success') {\n    //         mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n    //     } else {\n    //         mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n    //     }\n    \n    //     // Opcional: Ocultar el mensaje después de 5 segundos\n    //     setTimeout(() => {\n    //         mensajeResultado.style.display = 'none';\n    //     }, 5000);\n    // }\n    \n}\n","if (window.location.pathname === '/admin/usuarios') {\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td><img src=\"/build/img/${user.img}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>${user.telefono}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña en opciones de la tabla -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarUsuario\" \n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuarioEditarModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de usuarios\n    document.getElementById('tableBody_users').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarUsuario')) {\n            const usuarioId = event.target.closest('.btn-eliminarUsuario').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/usuarios/${usuarioId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarUsuario')) {\n            const boton = event.target.closest('.btnEditarUsuario');\n            const userId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/usuarios/${userId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const usuario = await respuesta.json();\n                // Llenar los campos del modal con los datos del usuario\n                document.getElementById('nombreEditar').value = usuario.nombre;\n                document.getElementById('apellidoEditar').value = usuario.apellido;\n                document.getElementById('direccionEditar').value = usuario.direccion;\n                document.getElementById('emailEditar').value = usuario.email;\n                document.getElementById('telefonoEditar').value = usuario.telefono;\n                document.getElementById('rol_idEditar').value = usuario.rol_id;\n                document.getElementById('estatusEditar').value = usuario.estatus;\n    \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditar');\n                imgElement.src = usuario.img ? `/build/img/${usuario.img}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarUsuario').dataset.id = userId;\n    \n                // Abrir el modal manualmente si es necesario\n                $('#usuarioEditarModal').modal('show');\n    \n            } catch (error) {\n                console.error('Error al obtener los datos del usuario:', error);\n            }\n        }\n    });\n    \n    // ---------------    ACTUALIZAR USUARIO     - ----------------\n    document.getElementById('formEditarUsuario').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const userId = document.querySelector('.btnActualizarUsuario').dataset.id;\n    \n        const usuarioActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            apellido: document.getElementById('apellidoEditar').value.trim(),\n            direccion: document.getElementById('direccionEditar').value.trim(),\n            email: document.getElementById('emailEditar').value.trim(),\n            telefono: document.getElementById('telefonoEditar').value.trim(),\n            password: document.getElementById('passwordEditar').value.trim(),\n            password2: document.getElementById('password2Editar').value.trim(),\n            rol_id: document.getElementById('rol_idEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n            img: document.getElementById('logoEditar').files[0]\n        };\n    \n        if (usuarioActualizado.password !== usuarioActualizado.password2) {\n            mostrarAlerta('Error', 'Las contraseñas no coinciden.', 'error');\n            return;\n        }\n\n        if (usuarioActualizado.telefono.length > 10) {\n            mostrarAlerta('Error', 'Telefono no valido', 'error');\n            return;\n        }\n    \n        delete usuarioActualizado.password2; // No enviar password2 al backend\n    \n        try {\n            const datos = new FormData();\n            Object.entries(usuarioActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/usuarios/${userId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar usuario:', error);\n        }\n    });\n\n    //  --------------    CREAR NUEVO USUARIO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const usuarioNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellido: document.getElementById('apellido').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            email: document.getElementById('email').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            password: document.getElementById('password').value.trim(),\n            password2: document.getElementById('password2').value.trim(),\n            rol_id: document.getElementById('rol_id').value.trim(),\n            estatus: document.getElementById('estatus').value.trim(),\n            img: document.getElementById('logo').files[0]\n        };\n\n        if (usuarioNuevo.email === \"\" || usuarioNuevo.nombre === \"\" || usuarioNuevo.direccion === \"\" || usuarioNuevo.password === \"\" || usuarioNuevo.password2 === \"\" || usuarioNuevo.telefono === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (usuarioNuevo.password !== usuarioNuevo.password2) {\n            mostrarAlerta2(\"Las contraseñas no coinciden.\", \"error\");\n            return;\n        }\n\n        if (usuarioNuevo.telefono.length > 10) {\n            mostrarAlerta2('Telefono no valido', 'error');\n            return;\n        }\n\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(usuarioNuevo.email)) {\n            mostrarAlerta2(\"El correo electrónico no tiene un formato válido.\", \"error\");\n            return;\n        }\n\n        delete usuarioNuevo.password2;\n\n        try {\n            const datos = new FormData();\n            Object.entries(usuarioNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/usuarios', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n    \n}"]}