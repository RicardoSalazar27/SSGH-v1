{"version":3,"sources":["Infohotel.js","auth.js","alertas.js","catalogo_productos.js","categorias.js","clientes.js","habitaciones.js","niveles.js","registro.js","usuarios.js"],"names":["window","location","pathname","btnActualizarInfo","document","getElementById","mostrarAlerta","titulo","mensaje","tipo","Swal","fire","icon","title","text","then","$","modal","reload","addEventListener","async","e","preventDefault","hotel","id","dataset","nombre","value","trim","telefono","correo","ubicacion","img","files","datos","FormData","Object","entries","forEach","key","append","url","respuesta","fetch","method","body","resultado","json","error","console","log","mostrarAlerta2","mensajeResultado","style","display","textContent","className","setTimeout","btniniciarSesion","event","usuario","email","password","autorizado","href","dataTable","dataTableInit","dataTableOption","destroy","pageLength","language","dom","columnDefs","orderable","targets","initDataTable","productos","listarProductos","length","llenarTabla","DataTable","response","tbody","innerHTML","producto","index","row","precio","stock","categoria_producto_id","codigo_barras","proveedor","foto","estatusDictionary","0","1","categorias","listarCategorias","status","ok","Error","categoria","estatus","estado","capacidad_maxima","tipo_cama","precio_base","servicios_incluidos","target","closest","categoriaId","getAttribute","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","isConfirmed","categoriaOriginal","statusText","querySelector","categoriaActualizada","cambios","keys","metodo","headers","Content-Type","JSON","stringify","errorData","respuestaUpdate","message","categoriaNueva","clientes","listarClientes","cliente","apellidos","direccion","documento_identidad","clienteOriginal","clientesId","clienteId","clienteActualizado","habitaciones","listarhabitaciones","habitacion","numero","id_nivel","id_categoria","detalles_personalizados","habitacionId","habitacionOriginal","habitacionActualizada","habitacionNueva","niveles","listarNiveles","nivel","nivelId","nivelOriginal","nivelActualizado","nivelNuevo","btnCrear","nuevoUsuario","password2","rolesDictionary","2","3","visible","usuarios","listarUsers","user","rol","rol_id","apellido","usuarioId","userId","src","usuarioActualizado","usuarioNuevo","test"],"mappings":"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","file":"bundle.js","sourcesContent":["if (window.location.pathname === '/admin/configuracion/informacion') {\n    //Obtener datos del formulario por si hay actualizacion\n    const btnActualizarInfo = document.getElementById('btnActualizarInfo');\n\n    if(btnActualizarInfo){\n        btnActualizarInfo.addEventListener('click', async function(e){\n            e.preventDefault();\n            //alert('diste click en actualizar info');\n\n            const hotel = {\n                id: btnActualizarInfo.dataset.id, \n                nombre : document.getElementById('nombre').value.trim(),\n                telefono : document.getElementById('telefono').value.trim(),\n                correo : document.getElementById('correo').value.trim(),\n                ubicacion : document.getElementById('ubicacion').value.trim(),\n                img : document.getElementById('logo').files[0]\n            }\n\n            try {\n                //Crear datos para enviar en formdata\n                const datos  = new FormData();\n                Object.entries(hotel).forEach(([key, value]) => datos.append(key, value));\n                const url = '/admin/configuracion/informacion/actualizar';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                                \n            } catch (error) {\n                console.log('error');\n            }\n\n        })\n    }\n\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide');\n            location.reload(); // Recarga la página automáticamente\n        });\n    }        \n}","if (window.location.pathname === '/login') {\n    const btniniciarSesion = document.getElementById('btnIniciarSesion');\n\n    if( btniniciarSesion){\n        btniniciarSesion.addEventListener('click', async function (event) {\n            event.preventDefault();\n\n            const usuario = {\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim()\n            };\n\n            if( usuario.email === \"\" || usuario.password === \"\"){\n                mostrarAlerta2('Todos los campos son obligatorios', 'error');\n                return;\n            }\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(usuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/login';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                if(resultado.autorizado){\n                    window.location.href = '/admin/index';\n                } else{\n                    mostrarAlerta2(resultado.mensaje, resultado.tipo);\n                }\n\n            } catch (error) {\n                console.log(error);\n            }\n        })\n    }\n}","// src/js/alertas.js\n(function() {\n    function mostrarAlerta(titulo, mensaje, tipo) {\n        Swal.fire({\n            icon: tipo,\n            title: titulo,\n            text: mensaje,\n        }).then(() => {\n            $('.modal').modal('hide'); \n        });\n    }\n\n    function mostrarAlerta2(mensaje, tipo) {\n        const mensajeResultado = document.getElementById('mensaje-resultado');\n        mensajeResultado.style.display = 'block';\n        mensajeResultado.textContent = mensaje;\n\n        mensajeResultado.className = `alert alert-${tipo === 'error' ? 'danger' : tipo === 'success' ? 'success' : 'info'}`;\n\n        setTimeout(() => {\n            mensajeResultado.style.display = 'none';\n        }, 5000);\n    }\n\n    // Hacerlas accesibles globalmente\n    window.mostrarAlerta = mostrarAlerta;\n    window.mostrarAlerta2 = mostrarAlerta2;\n})();\n","if(window.location.pathname === '/admin/puntodeventa/catalogo'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const productos = await listarProductos(); // Esperamos los datos antes de inicializar DataTable\n\n        if (productos.length > 0) {\n            llenarTabla(productos);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_productos').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarProductos() {\n        try {\n            const response = await fetch('/api/productos');\n            const productos = await response.json();\n            return productos;\n        } catch (error) {\n            console.error('Error al obtener los productos:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(productos) {\n        const tbody = document.getElementById('tableBody_productos');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n        console.log(productos);\n\n        productos.forEach((producto, index) => {\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${producto.nombre}</td>\n                    <td>${producto.precio}</td>\n                    <td class=\"text-center\">${producto.stock}</td>\n                    <td class=\"text-center\">${producto.categoria_producto_id.nombre}</td>\n                    <td class=\"text-center\">${producto.codigo_barras}</td>\n                    <td class=\"text-center\">${producto.proveedor}</td>\n                    <td><img src=\"/build/img/${producto.foto}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarNivel\" \n                            data-id=\"${producto.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarNivel\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarNivel\" data-id=\"${producto.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n}","if(window.location.pathname === '/admin/configuracion/categorias'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const categorias = await listarCategorias(); // Esperamos los datos antes de inicializar DataTable\n\n        if (categorias.length > 0) {\n            llenarTabla(categorias);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_categorias').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarCategorias() {\n        try {\n            const response = await fetch('/api/categorias');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener categorías:', error);\n            return null;\n        }\n    }\n    \n    // Delegación de eventos para eliminación de categorias\n    document.getElementById('tableBody_categorias').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCategoria')) {\n            const categoriaId = event.target.closest('.btn-eliminarCategoria').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/categorias/${categoriaId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(categorias) {\n        const tbody = document.getElementById('tableBody_categorias');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        categorias.forEach((categoria, index) => {\n            const estatus = estatusDictionary[categoria.estado] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${categoria.nombre}</td>\n                    <td class=\"text-center\">${categoria.capacidad_maxima}</td>\n                    <td>${categoria.tipo_cama}</td>\n                    <td>${categoria.precio_base}</td>\n                    <td>${categoria.servicios_incluidos}</td>\n                    <td>${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCategoria\" \n                            data-id=\"${categoria.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCategoria\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCategoria\" data-id=\"${categoria.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar la categoria original\n    let categoriaOriginal = null;\n\n    // ---------------------------    LLENAR MODAL PARA ACTUALIZAR    ------------------------------\n    document.addEventListener('click', async function (e) {\n        if(e.target.closest('.btnEditarCategoria')) { //boton editar que abre modal\n            const boton = e.target.closest('.btnEditarCategoria');\n            const categoriaId = boton.dataset.id;\n            categoriaOriginal = null;\n\n            try {\n                \n                // Obtener datos de la categoria desde la API\n                const url = `/api/categorias/${categoriaId}`;\n                const respuesta = await fetch(url);\n                if(!respuesta.ok){\n                    throw new Error(`Error al obtener categoria: ${respuesta.statusText}`);\n                }\n                const categoria = await respuesta.json();\n                categoriaOriginal = { ...categoria }; // Guarda en la variable global\n\n                // Llenar campos del modal con los datos de la categoria\n                document.getElementById('nombreEditar').value = categoria.nombre;\n                document.getElementById('capacidad_maximaEditar').value = categoria.capacidad_maxima;\n                document.getElementById('tipo_camaEditar').value = categoria.tipo_cama;\n                document.getElementById('precio_baseEditar').value = categoria.precio_base;\n                document.getElementById('servicios_incluidosEditar').value = categoria.servicios_incluidos;\n                document.getElementById('estadoEditar').value = categoria.estado;\n\n                // Guardar el ID de la categoria en el botón de actualización\n                document.querySelector('.btnActualizarCategoria').dataset.id = categoriaId;\n\n            } catch (error) {\n                console.log('Error al obtener los datos de la categoria:', error);\n            }\n        }\n    });\n\n    // ------------------------     ACTUALIZAR CATEGORIA    ------------------------\n    document.getElementById('formEditarCategoria').addEventListener('submit', async function (e) {\n\n        e.preventDefault();\n\n        const categoriaId = document.querySelector('.btnActualizarCategoria').dataset.id;\n\n        const categoriaActualizada = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maximaEditar').value.trim(),\n            tipo_cama: document.getElementById('tipo_camaEditar').value.trim(),\n            precio_base: document.getElementById('precio_baseEditar').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidosEditar').value.trim(),\n            estado: document.getElementById('estadoEditar').value.trim()\n        }\n\n        if (!categoriaOriginal) {\n            console.error('Error: No hay datos originales de la categoria');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        //Comparar con los datos originales\n        let cambios = {};\n        if (categoriaActualizada.nombre !== categoriaOriginal.nombre) cambios.nombre = categoriaActualizada.nombre;\n        if (categoriaActualizada.capacidad_maxima !== categoriaOriginal.capacidad_maxima) cambios.capacidad_maxima = categoriaActualizada.capacidad_maxima;\n        if (categoriaActualizada.tipo_cama !== categoriaOriginal.tipo_cama) cambios.tipo_cama = categoriaActualizada.tipo_cama;\n        if (categoriaActualizada.precio_base !== categoriaOriginal.precio_base) cambios.precio_base = categoriaActualizada.precio_base;\n        if (categoriaActualizada.servicios_incluidos !== categoriaOriginal.servicios_incluidos) cambios.servicios_incluidos = categoriaActualizada.servicios_incluidos;\n        if (categoriaActualizada.estado !== categoriaOriginal.estado) cambios.estado = categoriaActualizada.estado;\n\n        // Si no hay cambios, no se envia la peticion\n        if(Object.keys(cambios).length === 0){\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si es PUT O PATCH\n        const metodo = Object.keys(cambios).length === 6 ? 'PUT' : 'PATCH';\n        const datos = metodo === 'PUT' ? categoriaActualizada : cambios;\n\n        try {\n            // Enviar la actualizacion al servidor\n            const url = `/api/categorias/${categoriaId}`;\n            const respuesta = await fetch(url, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if(!respuesta.ok){\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n            \n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirCategoria = document.querySelector('.btnSubirCategoria');\n    botonSubirCategoria.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const categoriaNueva = {\n            nombre: document.getElementById('nombre').value.trim(),\n            capacidad_maxima: document.getElementById('capacidad_maxima').value.trim(),\n            tipo_cama: document.getElementById('tipo_cama').value.trim(),\n            precio_base: document.getElementById('precio_base').value.trim(),\n            servicios_incluidos: document.getElementById('servicios_incluidos').value.trim(),\n            estado: document.getElementById('estado').value.trim()\n        };\n\n        if (categoriaNueva.nombre === \"\" || categoriaNueva.capacidad_maxima === \"\" || categoriaNueva.tipo_cama === \"\" || categoriaNueva.precio_base === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(categoriaNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/categorias', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('capacidad_maxima').value = '';\n            document.getElementById('tipo_cama').value = '';\n            document.getElementById('servicios_incluidos').value = '';\n            document.getElementById('precio_base').value = '';\n            document.getElementById('estatado').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if(window.location.pathname === '/admin/clientes'){\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [6,7] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const clientes = await listarClientes(); // Esperamos los datos antes de inicializar DataTable\n\n        if (clientes.length > 0) {\n            llenarTabla(clientes);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_clientes').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarClientes() {\n        try {\n            const response = await fetch('/api/clientes');\n    \n            if (response.status === 204) {\n                return []; // No hay contenido, devolvemos un array vacío\n            }\n    \n            if (!response.ok) {\n                throw new Error(`Error HTTP: ${response.status}`);\n            }\n    \n            return await response.json();\n        } catch (error) {\n            console.error('Error al obtener clientes:', error);\n            return null;\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(clientes) {\n        const tbody = document.getElementById('tableBody_clientes');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        clientes.forEach((cliente, index) => {\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${cliente.nombre}</td>\n                    <td>${cliente.apellidos}</td>\n                    <td>${cliente.telefono}</td>\n                    <td>${cliente.correo}</td>\n                    <td>${cliente.direccion}</td>\n                    <td>${cliente.documento_identidad}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarCliente\" \n                            data-id=\"${cliente.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarCliente\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarCliente\" data-id=\"${cliente.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Variable global para almacenar el nivel original\n    let clienteOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarCliente')) {\n            const boton = event.target.closest('.btnEditarCliente');\n            const clientesId = boton.dataset.id;\n            clienteOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/clientes/${clientesId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener cliente: ${respuesta.statusText}`);\n                }\n                const cliente = await respuesta.json();\n                clienteOriginal = { ...cliente }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del cliente\n                document.getElementById('nombre').value = cliente.nombre;\n                document.getElementById('apellidos').value = cliente.apellidos;\n                document.getElementById('direccion').value = cliente.direccion;\n                document.getElementById('correo').value = cliente.correo;\n                document.getElementById('telefono').value = cliente.telefono;\n                document.getElementById('documento_identidad').value = cliente.documento_identidad;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarCliente').dataset.id = clientesId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del cliente:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR CLIENTE -----------------\n    document.getElementById('formEditarCliente').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const clienteId = document.querySelector('.btnActualizarCliente').dataset.id;\n\n        const clienteActualizado = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellidos: document.getElementById('apellidos').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            correo: document.getElementById('correo').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            documento_identidad: document.getElementById('documento_identidad').value.trim()\n        };\n\n        if (!clienteOriginal) {\n            console.error('Error: No hay datos originales del cliente');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (clienteActualizado.nombre !== clienteOriginal.nombre) cambios.nombre = clienteActualizado.nombre;\n        if (clienteActualizado.apellidos !== clienteOriginal.apellidos) cambios.apellidos = clienteActualizado.apellidos;\n        if (clienteActualizado.telefono !== clienteOriginal.telefono) cambios.telefono = clienteActualizado.telefono;\n        if (clienteActualizado.correo !== clienteOriginal.correo) cambios.correo = clienteActualizado.correo;\n        if (clienteActualizado.direccion !== clienteOriginal.direccion) cambios.direccion = clienteActualizado.direccion;\n        if (clienteActualizado.documento_identidad !== clienteOriginal.documento_identidad) cambios.documento_identidad = clienteActualizado.documento_identidad;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 6 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? clienteActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/clientes/${clienteId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar cliente:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    // Delegación de eventos para eliminación de clientes\n    document.getElementById('tableBody_clientes').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarCliente')) {\n            const clienteId = event.target.closest('.btn-eliminarCliente').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/clientes/${clienteId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n}","if(window.location.pathname === '/admin/configuracion/habitaciones'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const habitaciones = await listarhabitaciones(); // Esperamos los datos antes de inicializar DataTable\n\n        if (habitaciones.length > 0) {\n            llenarTabla(habitaciones);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_habitaciones').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarhabitaciones() {\n        try {\n            const response = await fetch('/api/habitaciones');\n            const habitaciones = await response.json();\n            return habitaciones;\n        } catch (error) {\n            console.error('Error al obtener habitaciones:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(habitaciones) {\n        const tbody = document.getElementById('tableBody_habitaciones');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        habitaciones.forEach((habitacion) => {\n            const estatus = estatusDictionary[habitacion.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${habitacion.numero}</td>\n                    <td>${habitacion.id_nivel.nombre}</td>\n                    <td>${habitacion.id_categoria.nombre}</td>\n                    <td>${habitacion.id_categoria.precio_base}</td>\n                    <td>${habitacion.id_categoria.servicios_incluidos}</td>\n                    <td>${habitacion.detalles_personalizados}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarHabitacion\" \n                            data-id=\"${habitacion.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarHabitacion\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarHabitacion\" data-id=\"${habitacion.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_habitaciones').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarHabitacion')) {\n            const habitacionId = event.target.closest('.btn-eliminarHabitacion').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/habitaciones/${habitacionId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n\n    // Variable global para almacenar el habitacion original\n    let habitacionOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarHabitacion')) {\n            const boton = event.target.closest('.btnEditarHabitacion');\n            const habitacionId = boton.dataset.id;\n            habitacionOriginal = '';\n    \n            try {\n                const respuesta = await fetch(`/api/habitaciones/${habitacionId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener habitación: ${respuesta.statusText}`);\n                }\n                const habitacion = await respuesta.json();\n                console.log(habitacion);\n    \n                habitacionOriginal = { ...habitacion }; // Guardar en variable global\n    \n                // Llenar los campos del modal con los datos de la habitación\n                document.getElementById('numeroEditar').value = habitacion.numero;\n                document.getElementById('id_nivelEditar').value = habitacion.id_nivel.id; // Aquí se asigna el ID del habitacion\n                document.getElementById('id_categoriaEditar').value = habitacion.id_categoria.id; // Aquí el ID de la categoría\n                document.getElementById('detalles_personalizadosEditar').value = habitacion.detalles_personalizados;\n                document.getElementById('estatusEditar').value = habitacion.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarHabitacion').dataset.id = habitacionId;\n    \n            } catch (error) {\n                console.error('Error al obtener los datos de la habitación:', error);\n            }\n        }\n    });\n    \n    // --------------- ACTUALIZAR HABITACION -----------------\n    document.getElementById('formEditarHabitacion').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const habitacionId = document.querySelector('.btnActualizarHabitacion').dataset.id;\n\n        const habitacionActualizada = {\n            numero: document.getElementById('numeroEditar').value.trim(),\n            id_nivel: document.getElementById('id_nivelEditar').value.trim(),\n            id_categoria: document.getElementById('id_categoriaEditar').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizadosEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim()\n        };\n\n        // console.log(habitacionActualizada);\n        // return;\n\n        if (!habitacionOriginal) {\n            console.error('Error: No hay datos originales del habitacion');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (habitacionActualizada.numero !== habitacionOriginal.numero) cambios.numero = habitacionActualizada.numero;\n        if (habitacionActualizada.id_nivel !== habitacionOriginal.id_nivel) cambios.id_nivel = habitacionActualizada.id_nivel;\n        if (habitacionActualizada.id_categoria !== habitacionOriginal.id_categoria) cambios.id_categoria = habitacionActualizada.id_categoria;\n        if (habitacionActualizada.detalles_personalizados !== habitacionOriginal.detalles_personalizados) cambios.detalles_personalizados = habitacionActualizada.detalles_personalizados;\n        if (habitacionActualizada.estatus !== habitacionOriginal.estatus) cambios.estatus = habitacionActualizada.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n        const datos = habitacionActualizada;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/habitaciones/${habitacionId}`, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar habitacion:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n\n    //  --------------     CREAR NUEVa HABITACION     ----------------\n    const botonSubirHabitacion = document.querySelector('.btnSubirHabitacion');\n    botonSubirHabitacion.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const habitacionNueva = {\n\n            numero: document.getElementById('numero').value.trim(),\n            id_nivel: document.getElementById('id_nivel').value.trim(),\n            id_categoria: document.getElementById('id_categoria').value.trim(),\n            detalles_personalizados: document.getElementById('detalles_personalizados').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        \n        };\n\n        if (habitacionNueva.id_nivel === \"\" || habitacionNueva.numero === \"\" || habitacionNueva.id_categoria === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(habitacionNueva).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/habitaciones', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario después de crear una habitación\n            document.getElementById('numero').value = '';\n            document.getElementById('detalles_personalizados').value = '';\n            document.getElementById('estatus').value = '1';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n\n}\n","if(window.location.pathname === '/admin/configuracion/niveles'){\n\n    let dataTable;\n    let dataTableInit = false;\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [4] }  // Desactiva ordenación en Dirección y Estatus\n            //{ visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const niveles = await listarNiveles(); // Esperamos los datos antes de inicializar DataTable\n\n        if (niveles.length > 0) {\n            llenarTabla(niveles);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_niveles').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarNiveles() {\n        try {\n            const response = await fetch('/api/niveles');\n            const niveles = await response.json();\n            return niveles;\n        } catch (error) {\n            console.error('Error al obtener niveles:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(niveles) {\n        const tbody = document.getElementById('tableBody_niveles');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        niveles.forEach((nivel, index) => {\n            const estatus = estatusDictionary[nivel.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td>${nivel.nombre}</td>\n                    <td>${nivel.numero}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarNivel\" \n                            data-id=\"${nivel.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#modalEditarNivel\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarNivel\" data-id=\"${nivel.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de niveles\n    document.getElementById('tableBody_niveles').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarNivel')) {\n            const nivelId = event.target.closest('.btn-eliminarNivel').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/niveles/${nivelId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n    \n    // Variable global para almacenar el nivel original\n    let nivelOriginal = null;\n\n    // --------------- LLENAR MODAL PARA ACTUALIZAR -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarNivel')) {\n            const boton = event.target.closest('.btnEditarNivel');\n            const nivelId = boton.dataset.id;\n            nivelOriginal= '';\n            try {\n                // Obtener los datos del nivel desde la API\n                const respuesta = await fetch(`/api/niveles/${nivelId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener nivel: ${respuesta.statusText}`);\n                }\n                const nivel = await respuesta.json();\n                nivelOriginal = { ...nivel }; // Guardar en variable global\n\n                // Llenar los campos del modal con los datos del nivel\n                document.getElementById('nombreEditar').value = nivel.nombre;\n                document.getElementById('numeroEditar').value = nivel.numero;\n                document.getElementById('estatusEditar').value = nivel.estatus;\n\n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarNivel').dataset.id = nivelId;\n\n            } catch (error) {\n                console.error('Error al obtener los datos del nivel:', error);\n            }\n        }\n    });\n\n    // --------------- ACTUALIZAR NIVEL -----------------\n    document.getElementById('formEditarNivel').addEventListener('submit', async function (e) {\n        e.preventDefault();\n\n        const nivelId = document.querySelector('.btnActualizarNivel').dataset.id;\n\n        const nivelActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            numero: document.getElementById('numeroEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n        };\n\n        if (!nivelOriginal) {\n            console.error('Error: No hay datos originales del nivel');\n            mostrarAlerta('Error', 'No se pudieron comparar los datos originales', 'error');\n            return;\n        }\n\n        // Comparar con los datos originales sin hacer otra petición\n        let cambios = {};\n        if (nivelActualizado.nombre !== nivelOriginal.nombre) cambios.nombre = nivelActualizado.nombre;\n        if (nivelActualizado.numero !== nivelOriginal.numero) cambios.numero = nivelActualizado.numero;\n        if (nivelActualizado.estatus !== nivelOriginal.estatus) cambios.estatus = nivelActualizado.estatus;\n\n        // Si no hay cambios, no enviamos la petición\n        if (Object.keys(cambios).length === 0) {\n            mostrarAlerta2('No hay cambios por enviar', 'error');\n            return;\n        }\n\n        // Determinar si usar PUT o PATCH\n        const metodo = Object.keys(cambios).length === 3 ? \"PUT\" : \"PATCH\";\n        const datos = metodo === \"PUT\" ? nivelActualizado : cambios;\n\n        try {\n            // Enviar la actualización con una sola petición\n            const respuestaUpdate = await fetch(`/api/niveles/${nivelId}`, {\n                method: metodo,\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(datos)\n            });\n\n            if (!respuestaUpdate.ok) {\n                const errorData = await respuestaUpdate.json();\n                throw new Error(errorData.mensaje || 'Error desconocido al actualizar');\n            }\n\n            const resultado = await respuestaUpdate.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error al actualizar nivel:', error);\n            mostrarAlerta('Error', error.message, 'error');\n        }\n    });\n    \n    //  --------------    CREAR NUEVO NIVEL     ----------------\n    const botonSubirNivel = document.querySelector('.btnSubirNivel');\n    botonSubirNivel.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const nivelNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            numero: document.getElementById('numero').value.trim(),\n            estatus: document.getElementById('estatus').value.trim()\n        };\n\n        if (nivelNuevo.nombre === \"\" || nivelNuevo.numero === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n        \n        try {\n            const datos = new FormData();\n            Object.entries(nivelNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/niveles', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n            // Limpiar los campos del formulario\n            document.getElementById('nombre').value = '';\n            document.getElementById('numero').value = '';\n            document.getElementById('estatus').value = '';\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n}","if (window.location.pathname === '/registro') {\n\n    const btnCrear = document.getElementById('crear-cuenta');\n\n    if (btnCrear) {\n        btnCrear.addEventListener('click', async function(event) { // Marca la función como 'async'\n\n            event.preventDefault();\n\n            const nuevoUsuario = {\n                nombre: document.getElementById('nombre').value.trim(),\n                apellidos: document.getElementById('apellidos').value.trim(),\n                email: document.getElementById('email').value.trim(),\n                password: document.getElementById('password').value.trim(),\n                password2: document.getElementById('password2').value.trim(),\n                telefono: document.getElementById('telefono').value.trim(),\n                direccion: document.getElementById('direccion').value.trim()\n            };\n\n            if (nuevoUsuario.email === \"\" || nuevoUsuario.nombre === \"\" || nuevoUsuario.direccion === \"\" || nuevoUsuario.password === \"\" || nuevoUsuario.password2 === \"\" || nuevoUsuario.telefono === \"\") {\n                mostrarAlerta2('Todos los campos son necesarios', 'error');\n                return;\n            }\n            \n            if (nuevoUsuario.password !== nuevoUsuario.password2) {\n                mostrarAlerta2('Las contraseñas no coinciden', 'error');\n                return;\n            }\n            \n            // Eliminar 'password2' antes de enviarlo al servidor\n            delete nuevoUsuario.password2;\n\n            try {\n                // Crear FormData para enviar los datos\n                const datos = new FormData();\n                Object.entries(nuevoUsuario).forEach(([key, value]) => datos.append(key, value));\n                const url = 'http://localhost:3000/registro';\n                const respuesta = await fetch(url, { // Corregido: Usar un objeto en lugar de un array\n                    method: 'POST',\n                    body: datos\n                });\n\n                // Esperar la respuesta en formato JSON\n                const resultado = await respuesta.json();\n                mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n                \n            } catch (error) {\n                console.log('Error en la solicitud:', error);\n            }\n\n        });\n    }\n\n    // function mostrarAlerta(titulo, mensaje, tipo) {\n    //     Swal.fire({\n    //         icon: tipo,\n    //         title: titulo,\n    //         text: mensaje,\n    //     }).then(() => {\n    //         $('.modal').modal('hide'); // Cierra todos los modales activos\n    //     });\n    // }    \n\n    // function mostrarAlerta2(mensaje, tipo) {\n    //     const mensajeResultado = document.getElementById('mensaje-resultado');\n    //     mensajeResultado.style.display = 'block'; // Asegúrate de que el contenedor se muestre\n    //     mensajeResultado.textContent = mensaje; // Mostrar solo el mensaje\n    \n    //     // Cambiar el color de fondo del contenedor según el tipo de mensaje\n    //     if (tipo === 'error') {\n    //         mensajeResultado.className = 'alert alert-danger'; // Rojo para error\n    //     } else if (tipo === 'success') {\n    //         mensajeResultado.className = 'alert alert-success'; // Verde para éxito\n    //     } else {\n    //         mensajeResultado.className = 'alert alert-info'; // Azul o información por defecto\n    //     }\n    \n    //     // Opcional: Ocultar el mensaje después de 5 segundos\n    //     setTimeout(() => {\n    //         mensajeResultado.style.display = 'none';\n    //     }, 5000);\n    // }\n    \n}\n","if (window.location.pathname === '/admin/usuarios') {\n    \n    let dataTable;\n    let dataTableInit = false;\n\n    // Diccionarios para roles y estatus\n    const rolesDictionary = {\n        1: 'Administrador',\n        2: 'General',\n        3: 'Limpieza'\n    };\n\n    const estatusDictionary = {\n        0: 'Inactivo',\n        1: 'Activo'\n    };\n\n    // Configuración DataTable\n    const dataTableOption = {\n        destroy: true,\n        pageLength: 5,\n        language: {\n            url: 'https://cdn.datatables.net/plug-ins/2.1.8/i18n/es-MX.json',\n        },\n        dom: '<\"row mb-2\"<\"d-flex justify-content-start col-sm-6\"f>>' +  \n             '<\"row\"<\"col-sm-12\"tr>>' + \n             '<\"row d-flex justify-content-between\"<\"col d-flex justify-content-start\"l><\"col d-flex justify-content-center\"i><\"col d-flex justify-content-end\"p>>',\n        columnDefs: [\n            { orderable: false, targets: [3, 8] },  // Desactiva ordenación en Dirección y Estatus\n            { visible: false, targets: [7] }       // Oculta la columna Password\n        ]\n    };\n\n    // Ejecutar funciones\n    initDataTable();\n\n    // Inicializamos DataTable\n    async function initDataTable() {\n        if (dataTableInit) {\n            dataTable.destroy(); // Destruye la tabla si ya existe previamente\n        }\n\n        const usuarios = await listarUsers(); // Esperamos los datos antes de inicializar DataTable\n\n        if (usuarios.length > 0) {\n            llenarTabla(usuarios);\n        }\n\n        // Inicializa DataTable\n        dataTable = $('#datatable_users').DataTable(dataTableOption);\n        dataTableInit = true;\n    }\n\n    // Función para obtener los datos de la API\n    async function listarUsers() {\n        try {\n            const response = await fetch('/api/usuarios');\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Error al obtener usuarios:', error);\n            return [];\n        }\n    }\n\n    // Función para llenar la tabla con los datos obtenidos\n    function llenarTabla(usuarios) {\n        const tbody = document.getElementById('tableBody_users');\n        tbody.innerHTML = ''; // Limpiamos el contenido previo\n\n        usuarios.forEach((user, index) => {\n            const rol = rolesDictionary[user.rol_id] || 'Desconocido';\n            const estatus = estatusDictionary[user.estatus] || 'Desconocido';\n\n            const row = `\n                <tr>\n                    <td>${index + 1}</td>\n                    <td><img src=\"/build/img/${user.img}.png\" alt=\"Descripción de la imagen\" width=\"65\"></td>\n                    <td>${user.nombre}</td>\n                    <td>${user.apellido}</td>\n                    <td>${user.direccion}</td>\n                    <td>${user.email}</td>\n                    <td>${user.telefono}</td>\n                    <td>******</td> <!-- Ocultamos la contraseña en opciones de la tabla -->\n                    <td>${rol}</td>\n                    <td class=\"text-center\">${estatus}</td>\n                    <td>\n                        <!-- Botón de editar que abre el modal -->\n                        <button \n                            class=\"btn btn-sm btn-primary btnEditarUsuario\" \n                            data-id=\"${user.id}\" \n                            data-toggle=\"modal\" \n                            data-target=\"#usuarioEditarModal\">\n                            <i class=\"fa-solid fa-pen\"></i>\n                        </button>\n                        <!-- Botón de eliminar -->\n                        <button class=\"btn btn-sm btn-danger btn-eliminarUsuario\" data-id=\"${user.id}\">\n                            <i class=\"fa-solid fa-trash\"></i>\n                        </button>\n                    </td>\n                </tr>\n            `;\n            tbody.innerHTML += row;\n        });\n    }\n\n    // Delegación de eventos para eliminación de usuarios\n    document.getElementById('tableBody_users').addEventListener('click', async function (event) {\n        if (event.target.closest('.btn-eliminarUsuario')) {\n            const usuarioId = event.target.closest('.btn-eliminarUsuario').getAttribute('data-id');\n            const result = await Swal.fire({\n                title: '¿Estás seguro?',\n                text: \"Esta acción no se puede deshacer.\",\n                icon: 'warning',\n                showCancelButton: true,\n                confirmButtonColor: '#d33',\n                cancelButtonColor: '#3085d6',\n                confirmButtonText: 'Sí, eliminar',\n                cancelButtonText: 'Cancelar'\n            });\n\n            if (result.isConfirmed) {\n                try {\n                    const url = `/api/usuarios/${usuarioId}`;\n                    const respuesta = await fetch(url, {\n                        method: 'DELETE',\n                    });\n\n                    const resultado = await respuesta.json();\n                    mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n\n                    if (resultado.tipo === 'success') {\n                        await initDataTable();\n                    }\n                } catch (error) {\n                    console.error(error);\n                }\n            }\n        }\n    });\n\n    // ---------------    LLENAR MODAL PARA ACTUALIZAR  -----------------\n    document.addEventListener('click', async function (event) {\n        if (event.target.closest('.btnEditarUsuario')) {\n            const boton = event.target.closest('.btnEditarUsuario');\n            const userId = boton.dataset.id;\n            \n            try {\n                // Obtener los datos del usuario desde la API o una variable global\n                const respuesta = await fetch(`/api/usuarios/${userId}`);\n                if (!respuesta.ok) {\n                    throw new Error(`Error al obtener usuario: ${respuesta.statusText}`);\n                }\n    \n                const usuario = await respuesta.json();\n                // Llenar los campos del modal con los datos del usuario\n                document.getElementById('nombreEditar').value = usuario.nombre;\n                document.getElementById('apellidoEditar').value = usuario.apellido;\n                document.getElementById('direccionEditar').value = usuario.direccion;\n                document.getElementById('emailEditar').value = usuario.email;\n                document.getElementById('telefonoEditar').value = usuario.telefono;\n                document.getElementById('rol_idEditar').value = usuario.rol_id;\n                document.getElementById('estatusEditar').value = usuario.estatus;\n    \n                // Mostrar la imagen si existe\n                const imgElement = document.getElementById('imgEditar');\n                imgElement.src = usuario.img ? `/build/img/${usuario.img}.png` : '/build/img/default.png';                    \n    \n                // Guardar el ID en el botón de actualización\n                document.querySelector('.btnActualizarUsuario').dataset.id = userId;\n    \n                // Abrir el modal manualmente si es necesario\n                $('#usuarioEditarModal').modal('show');\n    \n            } catch (error) {\n                console.error('Error al obtener los datos del usuario:', error);\n            }\n        }\n    });\n    \n    // ---------------    ACTUALIZAR USUARIO     - ----------------\n    document.getElementById('formEditarUsuario').addEventListener('submit', async function (e) {\n        e.preventDefault();\n    \n        const userId = document.querySelector('.btnActualizarUsuario').dataset.id;\n    \n        const usuarioActualizado = {\n            nombre: document.getElementById('nombreEditar').value.trim(),\n            apellido: document.getElementById('apellidoEditar').value.trim(),\n            direccion: document.getElementById('direccionEditar').value.trim(),\n            email: document.getElementById('emailEditar').value.trim(),\n            telefono: document.getElementById('telefonoEditar').value.trim(),\n            password: document.getElementById('passwordEditar').value.trim(),\n            password2: document.getElementById('password2Editar').value.trim(),\n            rol_id: document.getElementById('rol_idEditar').value.trim(),\n            estatus: document.getElementById('estatusEditar').value.trim(),\n            img: document.getElementById('logoEditar').files[0]\n        };\n    \n        if (usuarioActualizado.password !== usuarioActualizado.password2) {\n            mostrarAlerta('Error', 'Las contraseñas no coinciden.', 'error');\n            return;\n        }\n\n        if (usuarioActualizado.telefono.length > 10) {\n            mostrarAlerta('Error', 'Telefono no valido', 'error');\n            return;\n        }\n    \n        delete usuarioActualizado.password2; // No enviar password2 al backend\n    \n        try {\n            const datos = new FormData();\n            Object.entries(usuarioActualizado).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch(`/api/usuarios/${userId}`, {\n                method: 'POST',\n                body: datos\n            });\n    \n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n    \n        } catch (error) {\n            console.error('Error al actualizar usuario:', error);\n        }\n    });\n\n    //  --------------    CREAR NUEVO USUARIO     ----------------\n    const botonSubirUsuario = document.querySelector('.btnSubirUsuario');\n    botonSubirUsuario.addEventListener('click', async function (e) {\n        e.preventDefault();\n\n        const usuarioNuevo = {\n            nombre: document.getElementById('nombre').value.trim(),\n            apellido: document.getElementById('apellido').value.trim(),\n            direccion: document.getElementById('direccion').value.trim(),\n            email: document.getElementById('email').value.trim(),\n            telefono: document.getElementById('telefono').value.trim(),\n            password: document.getElementById('password').value.trim(),\n            password2: document.getElementById('password2').value.trim(),\n            rol_id: document.getElementById('rol_id').value.trim(),\n            estatus: document.getElementById('estatus').value.trim(),\n            img: document.getElementById('logo').files[0]\n        };\n\n        if (usuarioNuevo.email === \"\" || usuarioNuevo.nombre === \"\" || usuarioNuevo.direccion === \"\" || usuarioNuevo.password === \"\" || usuarioNuevo.password2 === \"\" || usuarioNuevo.telefono === \"\") {\n            mostrarAlerta2('Todos los campos son necesarios', 'error');\n            return;\n        }\n\n        if (usuarioNuevo.password !== usuarioNuevo.password2) {\n            mostrarAlerta2(\"Las contraseñas no coinciden.\", \"error\");\n            return;\n        }\n\n        if (usuarioNuevo.telefono.length > 10) {\n            mostrarAlerta2('Telefono no valido', 'error');\n            return;\n        }\n\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(usuarioNuevo.email)) {\n            mostrarAlerta2(\"El correo electrónico no tiene un formato válido.\", \"error\");\n            return;\n        }\n\n        delete usuarioNuevo.password2;\n\n        try {\n            const datos = new FormData();\n            Object.entries(usuarioNuevo).forEach(([key, value]) => datos.append(key, value));\n            const respuesta = await fetch('/api/usuarios', {\n                method: 'POST',\n                body: datos\n            });\n\n            const resultado = await respuesta.json();\n            mostrarAlerta(resultado.titulo, resultado.mensaje, resultado.tipo);\n            initDataTable();\n\n        } catch (error) {\n            console.error('Error en la solicitud:', error);\n        }\n    });\n    \n}"]}